{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/1-23-1.png","path":"1-23-1.png","modified":1,"renderable":0},{"_id":"source/1.jpg","path":"1.jpg","modified":1,"renderable":0},{"_id":"source/2.jpg","path":"2.jpg","modified":1,"renderable":0},{"_id":"source/4.jpg","path":"4.jpg","modified":1,"renderable":0},{"_id":"source/5.jpg","path":"5.jpg","modified":1,"renderable":0},{"_id":"source/6.jpg","path":"6.jpg","modified":1,"renderable":0},{"_id":"source/logo.jpg","path":"logo.jpg","modified":1,"renderable":0},{"_id":"source/3.jpg","path":"3.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/1-23-1.png","hash":"6af2498377480a9648d66b085fb099338921bccd","modified":1524580058028},{"_id":"source/1.jpg","hash":"4f0bf076cfb356a649fa0465064740a5f58de17f","modified":1524580058029},{"_id":"source/2.jpg","hash":"100e0825e6934e85b940b3e1cf3c7f311720bb93","modified":1524580058030},{"_id":"source/4.jpg","hash":"e89ce6571b43f12be62ee3f2b15311acad03e619","modified":1524580058032},{"_id":"source/5.jpg","hash":"3364c41b12c673e4da8873464719ec62e815410b","modified":1524580058033},{"_id":"source/6.jpg","hash":"73b27a137a043193d48e1664e0d6dae99a49a570","modified":1524580058034},{"_id":"source/logo.jpg","hash":"f40d0a5fb37bfecd96e3122c1dcdfb5c5dd4fce2","modified":1524580058046},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1524580058136},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1524580058136},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1524580058137},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1524580058138},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1524580058138},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1524580058139},{"_id":"themes/yilia/_config.yml","hash":"7cfa74bdfe3fd322cc0d6877ae9867e451d89fa2","modified":1524580058139},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1524580058165},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1524580058211},{"_id":"source/3.jpg","hash":"dad24458d156606a9b742fdb73496b39d69135dc","modified":1524580058031},{"_id":"source/_posts/css-Grid.md","hash":"ef592465a6005f585613687175a778eab97e5925","modified":1524580058036},{"_id":"source/_posts/Vuex2-0-bmob 博客项目.md","hash":"a8e19cf2519d0e19a8dced7348225862cceebd78","modified":1524580058036},{"_id":"source/_posts/function和箭头函数的区别.md","hash":"7314da8b7a1e26b0cf0f3862f8c65b038ab9f92c","modified":1524580058037},{"_id":"source/_posts/js复习手记-一.md","hash":"54af2f18ff8eb282b4f26d33c0bfd7c5c74127a5","modified":1524580058038},{"_id":"source/_posts/js复习手记三.md","hash":"25c83129a32a64b9db14ab8a5ceb281a6186f40d","modified":1524580058039},{"_id":"source/_posts/js复习手记二.md","hash":"af428078aa7f58029a0cede0789a94b62c74b526","modified":1524580058039},{"_id":"source/_posts/js复习手记六.md","hash":"c836396b995aafcc96a345b86e4365fbebbc508c","modified":1524673376179},{"_id":"source/_posts/js复习手记五.md","hash":"528fa6d8601ad7833a5451847d538f1c0e8bbdeb","modified":1524580058040},{"_id":"source/_posts/js复习手记四.md","hash":"1d24933ad7118c4429c56203c6bedec3c8ea2fb6","modified":1524580058041},{"_id":"source/_posts/js实现继承方式及特点.md","hash":"6a4ba498595565c018d7dc2fddd80e9b7a491d70","modified":1524580058042},{"_id":"source/_posts/my-blog.md","hash":"81821399b60520376c5ad3e6ad6a87eece0b3338","modified":1524580058043},{"_id":"source/_posts/webpack-打包后font-awesome路径错误.md","hash":"81d1572621255e43861c647cfbb1abbf1508cf3e","modified":1524580058043},{"_id":"source/_posts/web性能优化（持续更新）.md","hash":"c29e548963b5035e8a93ac01b4a7ba7f9943bd55","modified":1524580058044},{"_id":"source/_posts/书籍时间记录.md","hash":"233dc16f75548642631ef3956ec2449b73e3e499","modified":1524580058044},{"_id":"source/_posts/从输入url到页面加载时发生了什么？.md","hash":"fe0265e63731605711c73e8257cfc1296a639905","modified":1524580058045},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1524580058140},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1524580058141},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1524580058141},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1524580058142},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1524580058143},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1524580058143},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1524580058144},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1524580058162},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1524580058162},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1524580058163},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1524580058163},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524580058164},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524580058164},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1524580058165},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1524580058166},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1524580058202},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"cae76b4bf08ee603dc169e007020db45167552bf","modified":1524580058208},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1524580058211},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524580058160},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1524580058210},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1524580058209},{"_id":"source/plugins/prettify/lang-apollo.js","hash":"6859a23fc6b37ae8ae5f7b730d4e03cb6cbcb5f7","modified":1524580058047},{"_id":"source/plugins/prettify/lang-basic.js","hash":"316f858152a89bc3e014af77ae81bed4ab7b5374","modified":1524580058048},{"_id":"source/plugins/prettify/lang-clj.js","hash":"dcc497dc7f588b0a56f6f369c10b275b80a2d867","modified":1524580058048},{"_id":"source/plugins/prettify/lang-css.js","hash":"e34871b1c589eb586de9f44e51ed7ec34b5058aa","modified":1524580058049},{"_id":"source/plugins/prettify/lang-dart.js","hash":"b829e359b850f693d0778ac5080ff8d5d59d0330","modified":1524580058050},{"_id":"source/plugins/prettify/lang-erlang.js","hash":"d681c553d509d0312ebbf61e5f383745f0e45744","modified":1524580058050},{"_id":"source/plugins/prettify/lang-ex.js","hash":"9cc238c3d8f550f0171a42c43791cd4f5a9a4c31","modified":1524580058051},{"_id":"source/plugins/prettify/lang-go.js","hash":"3bfbd28eedd3e0c169a4a0392c6aa475a612315b","modified":1524580058052},{"_id":"source/plugins/prettify/lang-hs.js","hash":"68f6b321cf60f3670fc0bf9e0eb79f3cd3e4fbd9","modified":1524580058052},{"_id":"source/plugins/prettify/lang-kotlin.js","hash":"921fdcae57fe6798a3d22abe2b27cf640549a923","modified":1524580058053},{"_id":"source/plugins/prettify/lang-lasso.js","hash":"b01f0a8c298afa7d15cf262f68346712a20087a8","modified":1524580058054},{"_id":"source/plugins/prettify/lang-lisp.js","hash":"0475d1a3f322051dfb3d9a0e2ba7f02ab0f87b5d","modified":1524580058054},{"_id":"source/plugins/prettify/lang-logtalk.js","hash":"33c0b5d277d9c9ada740091f250283cf49c9558b","modified":1524580058056},{"_id":"source/plugins/prettify/lang-llvm.js","hash":"bdaaccf9562964377d739bd1a741a418b93b259a","modified":1524580058055},{"_id":"source/plugins/prettify/lang-lua.js","hash":"957fc1c2134b5e649e10108c293c71902cde304f","modified":1524580058056},{"_id":"source/plugins/prettify/lang-matlab.js","hash":"e55790a5e08a50f0c7732321007ae48c43fd4fcc","modified":1524580058057},{"_id":"source/plugins/prettify/lang-ml.js","hash":"ada272584accc5684bb350493b8a66d13d64b8b4","modified":1524580058058},{"_id":"source/plugins/prettify/lang-mumps.js","hash":"6d8f5155b7028f724e28a376b991ca276cb5277c","modified":1524580058058},{"_id":"source/plugins/prettify/lang-n.js","hash":"b494bcbf864a9ce2a3d9b0cbbb0ddcc1bceabde8","modified":1524580058059},{"_id":"source/plugins/prettify/lang-pascal.js","hash":"027b12325585f39b206f21e9cd5ebf1501335520","modified":1524580058059},{"_id":"source/plugins/prettify/lang-proto.js","hash":"065fd574cebd9a8d85a0dcd0d34449482ed7d164","modified":1524580058060},{"_id":"source/plugins/prettify/lang-r.js","hash":"5802b5f686d3f5311fde9795686025751c2ded45","modified":1524580058061},{"_id":"source/plugins/prettify/lang-rd.js","hash":"8e61db134e8c4567d900333cf8f5ea79c21da271","modified":1524580058061},{"_id":"source/plugins/prettify/lang-rust.js","hash":"fbc3b733d5aca41e8960ecea7aab67e9d33968f9","modified":1524580058062},{"_id":"source/plugins/prettify/lang-scala.js","hash":"10106063cd5065387fe64d9eea852963b5467951","modified":1524580058063},{"_id":"source/plugins/prettify/lang-sql.js","hash":"0344ce55316201a328b8f0855d8516fa88b7d2c1","modified":1524580058063},{"_id":"source/plugins/prettify/lang-swift.js","hash":"fd9fc189fb6ed2238f8b0657464c109610dba536","modified":1524580058064},{"_id":"source/plugins/prettify/lang-tcl.js","hash":"3a990fc6b6eadb265a0e08efa4bc55849a1c9f63","modified":1524580058065},{"_id":"source/plugins/prettify/lang-tex.js","hash":"3d7324cf085f1119dab016bbae5f6a35626de4ed","modified":1524580058065},{"_id":"source/plugins/prettify/lang-vb.js","hash":"c6a679d5f6633a08ab2b2a9cf7a980278e580480","modified":1524580058066},{"_id":"source/plugins/prettify/lang-vhdl.js","hash":"d701fe1773811c55b21a96ed9caf31a3762b49cb","modified":1524580058067},{"_id":"source/plugins/prettify/lang-wiki.js","hash":"23b9c88460d6b8deff972737996814a7304f6374","modified":1524580058067},{"_id":"source/plugins/prettify/lang-xq.js","hash":"f25987ddb1df532556b1374f31f3e4b881096b5d","modified":1524580058068},{"_id":"source/plugins/prettify/lang-yaml.js","hash":"53fb2ecdb3284f5410ad709052bcbd5335b305b3","modified":1524580058069},{"_id":"source/plugins/prettify/prettify.css","hash":"2f1bf35c5cd762533840076eb7d52145814c7125","modified":1524580058071},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"a381775b8fbecda4a50aa8b83e58939cffb42803","modified":1524580058145},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1524580058145},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1524580058146},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1524580058146},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1524580058147},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1524580058147},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1524580058148},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1524580058148},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1524580058149},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"903296430a678d1da3f7df471013284fae580c6f","modified":1524580058149},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1524580058150},{"_id":"themes/yilia/layout/_partial/hie.css","hash":"f5a142e231c3b0de4fb3f56ae76021a7259e228d","modified":1524580058150},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"23e06107a7a87ced4b37b61da067b8d451decac1","modified":1524580058151},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1524580058151},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1524580058152},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0944c2bcf9435aaf96f5fab144c3ab51859bd012","modified":1524580058160},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1524580058161},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1524580058167},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1524580058168},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1524580058168},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1524580058169},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1524580058169},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1524580058170},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1524580058171},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1524580058171},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1524580058172},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1524580058178},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1524580058183},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1524580058183},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1524580058184},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"2694076cf929ed56f46f5c374b06badd05e045fd","modified":1524580058185},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1524580058188},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1524580058188},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1524580058189},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1524580058189},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1524580058190},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1524580058191},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1524580058191},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1524580058192},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1524580058192},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1524580058193},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1524580058193},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1524580058194},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1524580058194},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1524580058196},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1524580058195},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1524580058196},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1524580058197},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1524580058197},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1524580058198},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1524580058198},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1524580058199},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1524580058199},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1524580058200},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1524580058200},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1524580058201},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1524580058203},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1524580058204},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1524580058204},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1524580058205},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1524580058206},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1524580058206},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1524580058207},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1524580058207},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1524580058208},{"_id":"source/plugins/prettify/node_prettify.js","hash":"3422618818985a37173f30e190b49e761faa5297","modified":1524580058071},{"_id":"source/plugins/prettify/prettify.js","hash":"6986dae0db217831e7d87df04ab01a0acd23ce16","modified":1524580058073},{"_id":"source/plugins/prettify/run_prettify.js","hash":"40b0c05ba1e25a6bff93af8de51f9f96df3d6cdf","modified":1524580058074},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1524580058160},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1524580058153},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1524580058154},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1524580058154},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1524580058155},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1524580058155},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1524580058156},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1524580058157},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1524580058157},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1524580058158},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1524580058159},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1524580058173},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1524580058173},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1524580058174},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1524580058175},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1524580058177},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1524580058179},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1524580058180},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1524580058181},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1524580058182},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1524580058186},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1524580058187},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1524580058186},{"_id":"public/plugins/prettify/lang-apollo.js","hash":"515c363fe47379f09a0d4c7866d82386160fef00","modified":1524673385768},{"_id":"public/plugins/prettify/lang-clj.js","hash":"5fe46495bd5a05e0cbaf850ccf265f776a5ce7ea","modified":1524673386328},{"_id":"public/plugins/prettify/lang-basic.js","hash":"565276ee5ea2f117e07a8997d792b7d734e4063c","modified":1524673386376},{"_id":"public/plugins/prettify/lang-css.js","hash":"5ef1e1c5d899dfc86122d7c0549963390ff2e2f0","modified":1524673386376},{"_id":"public/plugins/prettify/lang-dart.js","hash":"34c6c4897cf7d22e230ff9db55f2821c5eddbca8","modified":1524673386376},{"_id":"public/plugins/prettify/lang-ex.js","hash":"cbabafd5b1cc64bcba2606a074fe95ef42a8f189","modified":1524673386377},{"_id":"public/plugins/prettify/lang-erlang.js","hash":"6cb9234429b62d55ff078346668725d6c08efea9","modified":1524673386377},{"_id":"public/plugins/prettify/lang-go.js","hash":"090ff1d14fa4358b16989ace1e44d67d717ba17d","modified":1524673386377},{"_id":"public/plugins/prettify/lang-hs.js","hash":"1dc771fca34ae17be208697db6a21c304f7cb0a4","modified":1524673386377},{"_id":"public/plugins/prettify/lang-kotlin.js","hash":"b0743c799b874c5c997c6b2f76cd83d37d8c2557","modified":1524673386377},{"_id":"public/plugins/prettify/lang-lasso.js","hash":"888aabcdd8cb37468af2d4c52fb217d5a86039d3","modified":1524673386377},{"_id":"public/plugins/prettify/lang-lisp.js","hash":"9d28f1b5bf96971cc34e6487f97c5decc7fc8e8e","modified":1524673386377},{"_id":"public/plugins/prettify/lang-logtalk.js","hash":"7836eccb85957e1dae2ca02a9530cf0c7369f949","modified":1524673386378},{"_id":"public/plugins/prettify/lang-llvm.js","hash":"5138b9a56f063688205157703c629fefdb8ed4d0","modified":1524673386378},{"_id":"public/plugins/prettify/lang-lua.js","hash":"d907fa9f1e43aa6f86530d9803b6150b0852140b","modified":1524673386378},{"_id":"public/plugins/prettify/lang-matlab.js","hash":"aefcb5725f22551dcdc8a1fad16d3c8ba90218fa","modified":1524673386379},{"_id":"public/plugins/prettify/lang-ml.js","hash":"968bdc15137ae94b206e485b5bdfa5c96eff5857","modified":1524673386379},{"_id":"public/plugins/prettify/lang-mumps.js","hash":"9a1cae257b9b028b22ac2c4c9e4c3d2873898566","modified":1524673386379},{"_id":"public/plugins/prettify/lang-n.js","hash":"b44fb33af92602af1c2ae32c9af2348932eb1736","modified":1524673386379},{"_id":"public/plugins/prettify/lang-proto.js","hash":"8dc02debbff302b7d75df5728888abea01d885ae","modified":1524673386379},{"_id":"public/plugins/prettify/lang-pascal.js","hash":"17d60d30e6a73b3a8657baba733bb04ecbd53039","modified":1524673386379},{"_id":"public/plugins/prettify/lang-r.js","hash":"7f773981391ccf93080946a37cf299770ca91d72","modified":1524673386379},{"_id":"public/plugins/prettify/lang-rd.js","hash":"5421a7fe15ddf2b5ea4ab37805e7b7df9784cb34","modified":1524673386379},{"_id":"public/plugins/prettify/lang-rust.js","hash":"d5320b7d04fa87634729120062047b4843d62e04","modified":1524673386379},{"_id":"public/plugins/prettify/lang-scala.js","hash":"77f3b1dcd7c2dbdb54bc9ba745cb26e77309b96c","modified":1524673386380},{"_id":"public/plugins/prettify/lang-sql.js","hash":"75c9fcd8145b0312c103841ba4fa80bcb76c01e7","modified":1524673386380},{"_id":"public/plugins/prettify/lang-swift.js","hash":"796f84aea808c4df116536433bd67e4f1ca3c3f1","modified":1524673386380},{"_id":"public/plugins/prettify/lang-tcl.js","hash":"2270ce056e525578c4fdff32947fa44baeb3475a","modified":1524673386380},{"_id":"public/plugins/prettify/lang-tex.js","hash":"4ade9950d7daac8973e65334229e4ee11df4bff4","modified":1524673386380},{"_id":"public/plugins/prettify/lang-vb.js","hash":"ba5046fe3caa09c7e2b7e1b3a643b710285a1efa","modified":1524673386380},{"_id":"public/plugins/prettify/lang-vhdl.js","hash":"d19fd1f281d3f7b9583bbf446790d8c7f0022d9c","modified":1524673386381},{"_id":"public/plugins/prettify/lang-wiki.js","hash":"197ed2adc974afa9eba86f6eec4dbb864a8649c7","modified":1524673386381},{"_id":"public/plugins/prettify/lang-xq.js","hash":"239693dd3c6655eb68dc133776d9d1bc4b5cad12","modified":1524673386381},{"_id":"public/plugins/prettify/prettify.css","hash":"3f5dc3139f7385092d5dd567bb273c4585dee82d","modified":1524673386381},{"_id":"public/plugins/prettify/lang-yaml.js","hash":"a3a509eb7a2298b962d8b132bd19d093c5e75b25","modified":1524673386381},{"_id":"public/plugins/prettify/node_prettify.js","hash":"abfcfa4b8f4273a20ecbc70515a530bce4cf655c","modified":1524673386381},{"_id":"public/plugins/prettify/prettify.js","hash":"891c2739db851298ac8ab411711d08484b0c7ba9","modified":1524673386381},{"_id":"public/plugins/prettify/run_prettify.js","hash":"ab459e9ee48009c99da4ba61c3a21eb00e6af4cd","modified":1524673386381},{"_id":"public/content.json","hash":"dae26dca5f769935d6f431c14f6e6e6a315948e4","modified":1524673386381},{"_id":"public/2018/04/21/js实现继承方式及特点/index.html","hash":"7ab22c5ce7d5aea29b832e2638e0baf74995611c","modified":1524673386398},{"_id":"public/2018/04/19/js复习手记六/index.html","hash":"f5d0d14a6351048da835654527a95c6bc6d76ff9","modified":1524673386398},{"_id":"public/2018/03/31/js复习手记五/index.html","hash":"ab54887a16cb09e8383450fa99221d8b50913283","modified":1524673386398},{"_id":"public/2018/03/31/从输入url到页面加载时发生了什么？/index.html","hash":"ab713040bbce196f14e2ad0328a90e67c128670c","modified":1524673386399},{"_id":"public/2018/02/05/function和箭头函数的区别/index.html","hash":"17a8bbf3b85dd79979e2caf16839e91c8061beaf","modified":1524673386399},{"_id":"public/2018/02/04/js复习手记四/index.html","hash":"8c389b2dfee9da99d3b3fa0927ccb018ac23a049","modified":1524673386399},{"_id":"public/2018/01/25/web性能优化（持续更新）/index.html","hash":"b411ce04d3f943606149a460df86fd610efdd802","modified":1524673386399},{"_id":"public/2018/01/24/js复习手记三/index.html","hash":"710568a30986581d13ba390b999e2783bf70e2bd","modified":1524673386400},{"_id":"public/2018/01/24/js复习手记二/index.html","hash":"1480729caa8ca55acdfe5e7d409a9b46b215a6e4","modified":1524673386400},{"_id":"public/2018/01/23/webpack-打包后font-awesome路径错误/index.html","hash":"0703b7caeec6719b1e5388f293c15684aed52f09","modified":1524673386400},{"_id":"public/2018/01/22/js复习手记-一/index.html","hash":"0b9d061ca6f30f1fe0d59ba0e1adbccfc5eed121","modified":1524673386400},{"_id":"public/2018/01/09/Vuex2-0-bmob 博客项目/index.html","hash":"95b1eb6ef7d7cb88def58879f186e600fbc0e1f0","modified":1524673386401},{"_id":"public/2018/01/09/书籍时间记录/index.html","hash":"04907f8352af185a745df3873788d07305bafa1d","modified":1524673386401},{"_id":"public/2018/01/02/css-Grid/index.html","hash":"97690adafb7329a61f2971fdbd33fd479972816a","modified":1524673386401},{"_id":"public/2017/12/09/my-blog/index.html","hash":"fba77880a4b24326a9287b4df67efcff8833f968","modified":1524673386401},{"_id":"public/index.html","hash":"82e83f75b12e46e975e02c2c1a5b5b1bb5152a15","modified":1524673386401},{"_id":"public/page/2/index.html","hash":"48959fb63b5ce99ac2820b744f18aab3b58e3963","modified":1524673386402},{"_id":"public/tags/主页/index.html","hash":"db7bbbe2361c89e794d440726635df0bb009e8fa","modified":1524673386402},{"_id":"public/tags/复习/index.html","hash":"6ab554856fb8b602df72ac2ca6482a1e21bb00f5","modified":1524673386402},{"_id":"public/tags/2017/index.html","hash":"eeddc586573e65b9c91625b46bc6ce4640e596a1","modified":1524673386402},{"_id":"public/archives/index.html","hash":"b5f067ec1c89f6382baaad06112197c6fc45812a","modified":1524673386402},{"_id":"public/archives/page/2/index.html","hash":"c4cb48f778e045fef06eb2c7dd0b8ad50b87f303","modified":1524673386402},{"_id":"public/archives/2017/index.html","hash":"5b9dd8229143d1abe2322ed207b1bf6d307c4971","modified":1524673386403},{"_id":"public/archives/2017/12/index.html","hash":"6260422e51b5a7cb4f3c1c9db5953db5a1fdeab8","modified":1524673386403},{"_id":"public/archives/2018/index.html","hash":"bb537e8905f35afd034386d71efd606f59866c3d","modified":1524673386403},{"_id":"public/archives/2018/page/2/index.html","hash":"5c952a4d829a89d171e02de6c1b143f3bff6672d","modified":1524673386403},{"_id":"public/archives/2018/01/index.html","hash":"6bb940963a927f36c5854e1d21dee6f6982b2da9","modified":1524673386403},{"_id":"public/archives/2018/02/index.html","hash":"d135bb553031d16cc80aa8fccbf2bf6167fb273b","modified":1524673386403},{"_id":"public/archives/2018/03/index.html","hash":"d94ba5ded2889e7951429c1593da88089ff349b1","modified":1524673386404},{"_id":"public/archives/2018/04/index.html","hash":"7c17b25bbd700ece2216a9a77d186efdcdcb9dec","modified":1524673386404},{"_id":"public/1-23-1.png","hash":"6af2498377480a9648d66b085fb099338921bccd","modified":1524673386430},{"_id":"public/1.jpg","hash":"4f0bf076cfb356a649fa0465064740a5f58de17f","modified":1524673386430},{"_id":"public/2.jpg","hash":"100e0825e6934e85b940b3e1cf3c7f311720bb93","modified":1524673386430},{"_id":"public/4.jpg","hash":"e89ce6571b43f12be62ee3f2b15311acad03e619","modified":1524673386430},{"_id":"public/5.jpg","hash":"3364c41b12c673e4da8873464719ec62e815410b","modified":1524673386431},{"_id":"public/6.jpg","hash":"73b27a137a043193d48e1664e0d6dae99a49a570","modified":1524673386431},{"_id":"public/logo.jpg","hash":"f40d0a5fb37bfecd96e3122c1dcdfb5c5dd4fce2","modified":1524673386431},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1524673386431},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1524673386431},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1524673386432},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1524673386432},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1524673386433},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1524673386433},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1524673386434},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1524673386434},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1524673386435},{"_id":"public/3.jpg","hash":"dad24458d156606a9b742fdb73496b39d69135dc","modified":1524673386447},{"_id":"public/main.0cf68a.css","hash":"8b755dfec83bf0bce1ba7321ece2635feba8ff14","modified":1524673386465},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1524673386465},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1524673386465},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1524673386465}],"Category":[],"Data":[],"Page":[{"_content":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n","source":"plugins/prettify/lang-apollo.js","raw":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n","date":"2018-04-24T14:27:38.047Z","updated":"2018-04-24T14:27:38.047Z","path":"plugins/prettify/lang-apollo.js","layout":"false","title":"","comments":1,"_id":"cjgfb607o000va4vbhi790ed2","content":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n</p>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Onno Hommes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the AGC/AEA Assembly Language as described\n * at http://virtualagc.googlecode.com\n * <p>\n * This file could be used by goodle code to allow syntax highlight for\n * Virtual AGC SVN repository or if you don't want to commonize\n * the header for the agc/aea html assembly listing.\n *\n * @author ohommes@alumni.cmu.edu\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:ADS|AD|AUG|BZF|BZMF|CAE|CAF|CA|CCS|COM|CS|DAS|DCA|DCOM|DCS|DDOUBL|DIM|DOUBLE|DTCB|DTCF|DV|DXCH|EDRUPT|EXTEND|INCR|INDEX|NDX|INHINT|LXCH|MASK|MSK|MP|MSU|NOOP|OVSK|QXCH|RAND|READ|RELINT|RESUME|RETURN|ROR|RXOR|SQUARE|SU|TCR|TCAA|OVSK|TCF|TC|TS|WAND|WOR|WRITE|XCH|XLQ|XXALQ|ZL|ZQ|ADD|ADZ|SUB|SUZ|MPY|MPR|MPZ|DVP|COM|ABS|CLA|CLZ|LDQ|STO|STQ|ALS|LLS|LRS|TRA|TSQ|TMI|TOV|AXT|TIX|DLY|INP|OUT)\\s/,null],\n         [PR['PR_TYPE'], /^(?:-?GENADR|=MINUS|2BCADR|VN|BOF|MM|-?2CADR|-?[1-6]DNADR|ADRES|BBCON|[SE]?BANK\\=?|BLOCK|BNKSUM|E?CADR|COUNT\\*?|2?DEC\\*?|-?DNCHAN|-?DNPTR|EQUALS|ERASE|MEMORY|2?OCT|REMADR|SETLOC|SUBRO|ORG|BSS|BES|SYN|EQU|DEFINE|END)\\s/,null],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // Any word including labels that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[!-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['apollo', 'agc', 'aea']);\n</p>"},{"_content":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n","source":"plugins/prettify/lang-clj.js","raw":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n","date":"2018-04-24T14:27:38.048Z","updated":"2018-04-24T14:27:38.048Z","path":"plugins/prettify/lang-clj.js","layout":"false","title":"","comments":1,"_id":"cjgfb607r000wa4vbeqz3nguq","content":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\" target=\"_blank\" rel=\"noopener\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Clojure.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-clj - Clojure\n *\n *\n * I used lang-lisp.js as the basis for this adding the clojure specific\n * keywords and syntax.\n *\n * \"Name\"    = 'Clojure'\n * \"Author\"  = 'Rich Hickey'\n * \"Version\" = '1.2'\n * \"About\"   = 'Clojure is a lisp for the jvm with concurrency primitives and a richer set of types.'\n *\n *\n * I used <a href=\"http://clojure.org/Reference\" target=\"_blank\" rel=\"noopener\">Clojure.org Reference</a> as\n * the basis for the reserved word list.\n *\n *\n * @author jwall@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // clojure has more paren types than minimal lisp.\n         ['opn',             /^[\\(\\{\\[]+/, null, '([{'],\n         ['clo',             /^[\\)\\}\\]]+/, null, ')]}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         // clojure has a much larger set of keywords\n         [PR['PR_KEYWORD'],     /^(?:def|if|do|let|quote|var|fn|loop|recur|throw|try|monitor-enter|monitor-exit|defmacro|defn|defn-|macroexpand|macroexpand-1|for|doseq|dosync|dotimes|and|or|when|not|assert|doto|proxy|defstruct|first|rest|cons|defprotocol|deftype|defrecord|reify|defmulti|defmethod|meta|with-meta|ns|in-ns|create-ns|import|intern|refer|alias|namespace|resolve|ref|deref|refset|new|set!|memfn|to-array|into-array|aset|gen-class|reduce|map|filter|find|nil?|empty?|hash-map|hash-set|vec|vector|seq|flatten|reverse|assoc|dissoc|list|list?|disj|get|union|difference|intersection|extend|extend-type|extend-protocol|prn)\\b/, null],\n         [PR['PR_TYPE'], /^:[0-9a-zA-Z\\-]+/]\n        ]),\n    ['clj']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n","source":"plugins/prettify/lang-basic.js","raw":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n","date":"2018-04-24T14:27:38.048Z","updated":"2018-04-24T14:27:38.048Z","path":"plugins/prettify/lang-basic.js","layout":"false","title":"","comments":1,"_id":"cjgfb607t000xa4vb7uywu4s6","content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for Basic.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-basic\">(my BASIC code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // \"single-line-string\"\n          [PR.PR_STRING,        /^(?:\"(?:[^\\\\\"\\r\\n]|\\\\.)*(?:\"|$))/, null, '\"'],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A line comment that starts with REM\n          [PR.PR_COMMENT,       /^REM[^\\r\\n]*/, null],\n          [PR.PR_KEYWORD,       /^\\b(?:AND|CLOSE|CLR|CMD|CONT|DATA|DEF ?FN|DIM|END|FOR|GET|GOSUB|GOTO|IF|INPUT|LET|LIST|LOAD|NEW|NEXT|NOT|ON|OPEN|OR|POKE|PRINT|READ|RESTORE|RETURN|RUN|SAVE|STEP|STOP|SYS|THEN|TO|VERIFY|WAIT)\\b/, null],\n          [PR.PR_PLAIN,         /^[A-Z][A-Z0-9]?(?:\\$|%)?/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$%\"]*/, null]\n          // [PR.PR_PUNCTUATION,   /^[-,:;!<>=\\+^\\/\\*]+/]\n        ]),\n    ['basic','cbm']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n","source":"plugins/prettify/lang-css.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n","date":"2018-04-24T14:27:38.049Z","updated":"2018-04-24T14:27:38.049Z","path":"plugins/prettify/lang-css.js","layout":"false","title":"","comments":1,"_id":"cjgfb607u000ya4vbt38o7v3w","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n</script>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for CSS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-css\"></pre>\n *\n *\n * http://www.w3.org/TR/CSS21/grammar.html Section G2 defines the lexical\n * grammar.  This scheme does not recognize keywords containing escapes.\n *\n * @author mikesamuel@gmail.com\n */\n\n// This file is a call to a function defined in prettify.js which defines a\n// lexical scanner for CSS and maps tokens to styles.\n\n// The call to PR['registerLangHandler'] is quoted so that Closure Compiler\n// will not rename the call so that this language extensions can be\n// compiled/minified separately from one another.  Other symbols defined in\n// prettify.js are similarly quoted.\n\n// The call is structured thus:\n// PR['registerLangHandler'](\n//    PR['createSimpleLexer'](\n//        shortcutPatterns,\n//        fallThroughPatterns),\n//    [languageId0, ..., languageIdN])\n\n// Langugage IDs\n// =============\n// The language IDs are typically the file extensions of source files for\n// that language so that users can syntax highlight arbitrary files based\n// on just the extension.  This is heuristic, but works pretty well in\n// practice.\n\n// Patterns\n// ========\n// Lexers are typically implemented as a set of regular expressions.\n// The SimpleLexer function takes regular expressions, styles, and some\n// pragma-info and produces a lexer.  A token description looks like\n//   [STYLE_NAME, /regular-expression/, pragmas]\n\n// Initially, simple lexer's inner loop looked like:\n\n//    while sourceCode is not empty:\n//      try each regular expression in order until one matches\n//      remove the matched portion from sourceCode\n\n// This was really slow for large files because some JS interpreters\n// do a buffer copy on the matched portion which is O(n*n)\n\n// The current loop now looks like\n\n//    1. use js-modules/combinePrefixPatterns.js to \n//       combine all regular expressions into one \n//    2. use a single global regular expresion match to extract all tokens\n//    3. for each token try regular expressions in order until one matches it\n//       and classify it using the associated style\n\n// This is a lot more efficient but it does mean that lookahead and lookbehind\n// can't be used across boundaries to classify tokens.\n\n// Sometimes we need lookahead and lookbehind and sometimes we want to handle\n// embedded language -- JavaScript or CSS embedded in HTML, or inline assembly\n// in C.\n\n// If a particular pattern has a numbered group, and its style pattern starts\n// with \"lang-\" as in\n//    ['lang-js', /<script>(.*?)<\\/script>/]\n// then the token classification step breaks the token into pieces.\n// Group 1 is re-parsed using the language handler for \"lang-js\", and the\n// surrounding portions are reclassified using the current language handler.\n// This mechanism gives us both lookahead, lookbehind, and language embedding.\n\n// Shortcut Patterns\n// =================\n// A shortcut pattern is one that is tried before other patterns if the first\n// character in the token is in the string of characters.\n// This very effectively lets us make quick correct decisions for common token\n// types.\n\n// All other patterns are fall-through patterns.\n\n\n\n// The comments inline below refer to productions in the CSS specification's\n// lexical grammar.  See link above.\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        // Shortcut patterns.\n        [\n         // The space production <s>\n         [PR['PR_PLAIN'],       /^[ \\t\\r\\n\\f]+/, null, ' \\t\\r\\n\\f']\n        ],\n        // Fall-through patterns.\n        [\n         // Quoted strings.  <string1> and <string2>\n         [PR['PR_STRING'],\n          /^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/, null],\n         [PR['PR_STRING'],\n          /^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/, null],\n         ['lang-css-str', /^url\\(([^\\)\\\"\\']+)\\)/i],\n         [PR['PR_KEYWORD'],\n          /^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,\n          null],\n         // A property name -- an identifier followed by a colon.\n         ['lang-css-kw', /^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],\n         // A C style block comment.  The <comment> production.\n         [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],\n         // Escaping text spans\n         [PR['PR_COMMENT'], /^(?:<!--|-->)/],\n         // A number possibly containing a suffix.\n         [PR['PR_LITERAL'], /^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],\n         // A hex color\n         [PR['PR_LITERAL'], /^#(?:[0-9a-f]{3}){1,2}\\b/i],\n         // An identifier\n         [PR['PR_PLAIN'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\s\\w\\'\\\"]+/]\n        ]),\n    ['css']);\n// Above we use embedded languages to highlight property names (identifiers\n// followed by a colon) differently from identifiers in values.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_KEYWORD'],\n          /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]\n        ]),\n    ['css-kw']);\n// The content of an unquoted URL literal like url(http://foo/img.png) should\n// be colored as string content.  This language handler is used above in the\n// URL production to do so.\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([],\n        [\n         [PR['PR_STRING'], /^[^\\)\\\"\\']+/]\n        ]),\n    ['css-str']);\n</script>"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n","source":"plugins/prettify/lang-dart.js","raw":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n","date":"2018-04-24T14:27:38.050Z","updated":"2018-04-24T14:27:38.050Z","path":"plugins/prettify/lang-dart.js","layout":"false","title":"","comments":1,"_id":"cjgfb607v000za4vbke15xsfe","content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler Dart.\n * Loosely structured based on the DartLexer in Pygments: http://pygments.org/.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-dart\">(Dart code)</pre>\n *\n * @author armstrong.timothy@gmail.com\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      // Whitespace.\n      [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n    ],\n    [\n      // Script tag.\n      [PR['PR_COMMENT'], /^#!(?:.*)/],\n\n      // `import`, `library`, `part of`, `part`, `as`, `show`, and `hide`\n      // keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:import|library|part of|part|as|show|hide)\\b/i],\n\n      // Single-line comments.\n      [PR['PR_COMMENT'], /^\\/\\/(?:.*)/],\n\n      // Multiline comments.\n      [PR['PR_COMMENT'], /^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//], // */\n\n      // `class` and `interface` keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:class|interface)\\b/i],\n\n      // General keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:assert|async|await|break|case|catch|continue|default|do|else|finally|for|if|in|is|new|return|super|switch|sync|this|throw|try|while)\\b/i],\n\n      // Declaration keywords.\n      [PR['PR_KEYWORD'], /^\\b(?:abstract|const|extends|factory|final|get|implements|native|operator|set|static|typedef|var)\\b/i],\n\n      // Keywords for types.\n      [PR['PR_TYPE'], /^\\b(?:bool|double|Dynamic|int|num|Object|String|void)\\b/i],\n\n      // Keywords for constants.\n      [PR['PR_KEYWORD'], /^\\b(?:false|null|true)\\b/i],\n\n      // Multiline strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?[\\']{3}[\\s|\\S]*?[^\\\\][\\']{3}/],\n      [PR['PR_STRING'], /^r?[\\\"]{3}[\\s|\\S]*?[^\\\\][\\\"]{3}/],\n\n      // Normal and raw strings, single- and double-quoted.\n      [PR['PR_STRING'], /^r?\\'(\\'|(?:[^\\n\\r\\f])*?[^\\\\]\\')/],\n      [PR['PR_STRING'], /^r?\\\"(\\\"|(?:[^\\n\\r\\f])*?[^\\\\]\\\")/],\n\n      // Types are capitalized by convention.\n      [PR['PR_TYPE'], /^[A-Z]\\w*/],\n\n      // Identifiers.\n      [PR['PR_PLAIN'], /^[a-z_$][a-z0-9_]*/i],\n\n      // Operators.\n      [PR['PR_PUNCTUATION'], /^[~!%^&*+=|?:<>/-]/],\n\n      // Hex numbers.\n      [PR['PR_LITERAL'], /^\\b0x[0-9a-f]+/i],\n\n      // Decimal numbers.\n      [PR['PR_LITERAL'], /^\\b\\d+(?:\\.\\d*)?(?:e[+-]?\\d+)?/i],\n      [PR['PR_LITERAL'], /^\\b\\.\\d+(?:e[+-]?\\d+)?/i],\n\n      // Punctuation.\n      [PR['PR_PUNCTUATION'], /^[(){}\\[\\],.;]/]\n    ]),\n  ['dart']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n","source":"plugins/prettify/lang-ex.js","raw":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n","date":"2018-04-24T14:27:38.051Z","updated":"2018-04-24T14:27:38.051Z","path":"plugins/prettify/lang-ex.js","layout":"false","title":"","comments":1,"_id":"cjgfb607w0010a4vb8nszo8yt","content":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n</(?:[^\\></foo::binary></=></=>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2017 Jacek Królikowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Elixir.\n *\n * @author nietaki@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // # comments\n         [PR['PR_COMMENT'], /^#.*/, null, '#'],\n         // a (possibly multiline) charlist\n         [PR['PR_LITERAL'], /^'(?:[^'\\\\]|\\\\(?:.|\\n|\\r))*'?/, null, '\\''],\n         // @attributes\n         [PR['PR_ATTRIB_NAME'], /^@\\w+/, null, '@'],\n         [PR['PR_PUNCTUATION'], /^[!%&()*+,\\-;<=>?\\[\\\\\\]^{|}]+/, null,\n          '!%&()*+,-;<=>?[\\\\]^{|}'],\n         // Borrowed from lang-erlang.js:\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7](?:[0-7]|_[0-7])*|0x[\\da-fA-F](?:[\\da-fA-F]|_[\\da-fA-F])*|\\d(?:\\d|_\\d)*(?:\\.\\d(?:\\d|_\\d)*)?(?:[eE][+\\-]?\\d(?:\\d|_\\d)*)?)/,\n          null, '0123456789']\n        ],\n        [\n         // the iex> prompt for interactive examples\n         [PR['PR_ATTRIB_NAME'], /^iex(?:\\(\\d+\\))?> /],\n         // special case for binaries, so that they don't get presented like atoms\n         [PR['PR_PUNCTUATION'], /^::/],\n         // atoms - :__a_word or :\"colon followed by a string\"\n         [PR['PR_LITERAL'], /^:(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"?)/],\n         // compile-time information\n         [PR['PR_ATTRIB_NAME'], /^(?:__(?:CALLER|ENV|MODULE|DIR)__)/],\n         // keywords\n         [PR['PR_KEYWORD'],\n          /^(?:alias|case|catch|def(?:delegate|exception|impl|macrop?|module|overridable|p?|protocol|struct)|do|else|end|fn|for|if|in|import|quote|raise|require|rescue|super|throw|try|unless|unquote(?:_splicing)?|use|when|with|yield)\\b/],\n         [PR['PR_LITERAL'], /^(?:true|false|nil)\\b/],\n         // atoms as keyword list keys\n         // NOTE: this does also handle the %{\"I'm an atom\": :foo} case\n         //\n         // Contains negative lookahead to handle <<foo::binary>>\n         [PR['PR_LITERAL'], /^(?:\\w+[\\!\\?\\@]?|\"(?:[^\"\\\\]|\\\\.)*\"):(?!:)/],\n         // heredoc: triple double-quoted multi-line string.\n         //\n         // NOTE: the opening \"\"\" needs to be followed by a newline\n         [PR['PR_STRING'],\n          /^\"\"\"\\s*(\\r|\\n)+(?:\"\"?(?!\")|[^\\\\\"]|\\\\(?:.|\\n|\\r))*\"{0,3}/],\n         // A double-quoted multi-line string\n         [PR['PR_STRING'],\n          /^\"(?:[^\"\\\\]|\\\\(?:.|\\n|\\r))*\"?(?!\")/],\n         // types\n         [PR['PR_TYPE'], /^[A-Z]\\w*/],\n         // variables not meant to be used or private functions\n         [PR['PR_COMMENT'], /^_\\w*/],\n         // plain: variables, functions, ...\n         [PR['PR_PLAIN'], /^[$a-z]\\w*[\\!\\?]?/],\n         // sigils with the same starting and ending character.\n         // Key part: X(?:[^X\\r\\n\\\\]|\\\\.)+X where X is the sigil character\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\/(?:[^\\/\\r\\n\\\\]|\\\\.)+\\/|\\|(?:[^\\|\\r\\n\\\\]|\\\\.)+\\||\"(?:[^\"\\r\\n\\\\]|\\\\.)+\"|'(?:[^'\\r\\n\\\\]|\\\\.)+')[A-Z]*/i],\n         // sigils with a different starting and ending character.\n         // Key part: X(?:[^Y\\r\\n\\\\]|\\\\.)+Y where X and Y are the starting and ending characters\n         [PR['PR_ATTRIB_VALUE'], /^~[A-Z](?:\\((?:[^\\)\\r\\n\\\\]|\\\\.)+\\)|\\[(?:[^\\]\\r\\n\\\\]|\\\\.)+\\]|\\{(?:[^\\}\\r\\n\\\\]|\\\\.)+\\}|\\<(?:[^\\>\\r\\n\\\\]|\\\\.)+\\>)[A-Z]*/i],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/|[:~])/]\n        ]),\n    ['ex','exs']);\n</(?:[^\\></foo::binary></=></=>"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n","source":"plugins/prettify/lang-erlang.js","raw":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n","date":"2018-04-24T14:27:38.050Z","updated":"2018-04-24T14:27:38.050Z","path":"plugins/prettify/lang-erlang.js","layout":"false","title":"","comments":1,"_id":"cjgfb607y0011a4vb3byyhm80","content":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Andrew Allen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Erlang.\n *\n * Derived from https://raw.github.com/erlang/otp/dev/lib/compiler/src/core_parse.yrl\n * Modified from Mike Samuel's Haskell plugin for google-code-prettify\n *\n * @author achew22@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double-quoted strings.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         \n         // Handle atoms\n         [PR['PR_LITERAL'],      /^[a-z][a-zA-Z0-9_]*/],\n         // Handle single quoted atoms\n         [PR['PR_LITERAL'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/,\n          null, \"'\"],\n         \n         // Handle macros. Just to be extra clear on this one, it detects the ?\n         // then uses the regexp to end it so be very careful about matching\n         // all the terminal elements\n         [PR['PR_LITERAL'],      /^\\?[^ \\t\\n({]+/, null, \"?\"],\n\n          \n         \n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // TODO: catch @declarations inside comments\n\n         // Comments in erlang are started with % and go till a newline\n         [PR['PR_COMMENT'], /^%[^\\n]*/],\n\n         // Catch macros\n         //[PR['PR_TAG'], /?[^( \\n)]+/],\n\n         /**\n          * %% Keywords (atoms are assumed to always be single-quoted).\n          * 'module' 'attributes' 'do' 'let' 'in' 'letrec'\n          * 'apply' 'call' 'primop'\n          * 'case' 'of' 'end' 'when' 'fun' 'try' 'catch' 'receive' 'after'\n          */\n         [PR['PR_KEYWORD'], /^(?:module|attributes|do|let|in|letrec|apply|call|primop|case|of|end|when|fun|try|catch|receive|after|char|integer|float,atom,string,var)\\b/],\n         \n         /**\n          * Catch definitions (usually defined at the top of the file)\n          * Anything that starts -something\n          */\n         [PR['PR_KEYWORD'], /^-[a-z_]+/],\n\n         // Catch variables\n         [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[.,;]/]\n        ]),\n    ['erlang', 'erl']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * <p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n","source":"plugins/prettify/lang-go.js","raw":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * <p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n","date":"2018-04-24T14:27:38.052Z","updated":"2018-04-24T14:27:38.052Z","path":"plugins/prettify/lang-go.js","layout":"false","title":"","comments":1,"_id":"cjgfb607z0012a4vbfdzrw3cm","content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * </p><p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </...></...></pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n</p>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Go language..\n * <p>\n * Based on the lexical grammar at \n * http://golang.org/doc/go_spec.html#Lexical_elements\n * </p><p>\n * Go uses a minimal style for highlighting so the below does not distinguish\n * strings, keywords, literals, etc. by design.\n * From a discussion with the Go designers:\n * <pre>\n * On Thursday, July 22, 2010, Mike Samuel <...> wrote:\n * > On Thu, Jul 22, 2010, Rob 'Commander' Pike <...> wrote:\n * >> Personally, I would vote for the subdued style godoc presents at http://golang.org\n * >>\n * >> Not as fancy as some like, but a case can be made it's the official style.\n * >> If people want more colors, I wouldn't fight too hard, in the interest of\n * >> encouragement through familiarity, but even then I would ask to shy away\n * >> from technicolor starbursts.\n * >\n * > Like http://golang.org/pkg/go/scanner/ where comments are blue and all\n * > other content is black?  I can do that.\n * </...></...></pre>\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // Not escaped as a string.  See note on minimalism above.\n         [PR['PR_PLAIN'],       /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])+(?:\\'|$)|`[^`]*(?:`|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by /* and */.\n         // Single-line comments begin with // and extend to the end of a line.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\/)/],\n         [PR['PR_PLAIN'],       /^(?:[^\\/\\\"\\'`]|\\/(?![\\/\\*]))+/i]\n        ]),\n    ['go']);\n</p>"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' | \\> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" | \\> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n","source":"plugins/prettify/lang-hs.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' | \\> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" | \\> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n","date":"2018-04-24T14:27:38.052Z","updated":"2018-04-24T14:27:38.052Z","path":"plugins/prettify/lang-hs.js","layout":"false","title":"","comments":1,"_id":"cjgfb60800013a4vbac9d07j2","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' |=\"\" \\=\"\"> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" |=\"\" \\=\"\"> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n</reservedid></symbol></\"></\\&></'>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Haskell.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-hs\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *\n *\n * I used http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-report-html/syntax-iso.html\n * as the basis, but ignore the way the ncomment production nests since this\n * makes the lexical grammar irregular.  It might be possible to support\n * ncomments using the lookbehind filter.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         // whitechar    ->    newline | vertab | space | tab | uniWhite\n         // newline      ->    return linefeed | return | linefeed | formfeed\n         [PR['PR_PLAIN'],       /^[\\t\\n\\x0B\\x0C\\r ]+/, null, '\\t\\n\\x0B\\x0C\\r '],\n         // Single line double and single-quoted strings.\n         // char         ->    ' (graphic<' |=\"\" \\=\"\"> | space | escape<\\&>) '\n         // string       ->    \" {graphic<\" |=\"\" \\=\"\"> | space | escape | gap}\"\n         // escape       ->    \\ ( charesc | ascii | decimal | o octal\n         //                        | x hexadecimal )\n         // charesc      ->    a | b | f | n | r | t | v | \\ | \" | ' | &\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/,\n          null, '\"'],\n         [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])\\'?/,\n          null, \"'\"],\n         // decimal      ->    digit{digit}\n         // octal        ->    octit{octit}\n         // hexadecimal  ->    hexit{hexit}\n         // integer      ->    decimal\n         //               |    0o octal | 0O octal\n         //               |    0x hexadecimal | 0X hexadecimal\n         // float        ->    decimal . decimal [exponent]\n         //               |    decimal exponent\n         // exponent     ->    (e | E) [+ | -] decimal\n         [PR['PR_LITERAL'],\n          /^(?:0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i,\n          null, '0123456789']\n        ],\n        [\n         // Haskell does not have a regular lexical grammar due to the nested\n         // ncomment.\n         // comment      ->    dashes [ any<symbol> {any}] newline\n         // ncomment     ->    opencom ANYseq {ncomment ANYseq}closecom\n         // dashes       ->    '--' {'-'}\n         // opencom      ->    '{-'\n         // closecom     ->    '-}'\n         [PR['PR_COMMENT'],     /^(?:(?:--+(?:[^\\r\\n\\x0C]*)?)|(?:\\{-(?:[^-]|-+[^-\\}])*-\\}))/],\n         // reservedid   ->    case | class | data | default | deriving | do\n         //               |    else | if | import | in | infix | infixl | infixr\n         //               |    instance | let | module | newtype | of | then\n         //               |    type | where | _\n         [PR['PR_KEYWORD'],     /^(?:case|class|data|default|deriving|do|else|if|import|in|infix|infixl|infixr|instance|let|module|newtype|of|then|type|where|_)(?=[^a-zA-Z0-9\\']|$)/, null],\n         // qvarid       ->    [ modid . ] varid\n         // qconid       ->    [ modid . ] conid\n         // varid        ->    (small {small | large | digit | ' })<reservedid>\n         // conid        ->    large {small | large | digit | ' }\n         // modid        ->    conid\n         // small        ->    ascSmall | uniSmall | _\n         // ascSmall     ->    a | b | ... | z\n         // uniSmall     ->    any Unicode lowercase letter\n         // large        ->    ascLarge | uniLarge\n         // ascLarge     ->    A | B | ... | Z\n         // uniLarge     ->    any uppercase or titlecase Unicode letter\n         [PR['PR_PLAIN'],  /^(?:[A-Z][\\w\\']*\\.)*[a-zA-Z][\\w\\']*/],\n         // matches the symbol production\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\x0B\\x0C\\r a-zA-Z0-9\\'\\\"]+/]\n        ]),\n    ['hs']);\n</reservedid></symbol></\"></\\&></'>"},{"_content":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n","source":"plugins/prettify/lang-kotlin.js","raw":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n","date":"2018-04-24T14:27:38.053Z","updated":"2018-04-24T14:27:38.053Z","path":"plugins/prettify/lang-kotlin.js","layout":"false","title":"","comments":1,"_id":"cjgfb60820014a4vbsvgf0omr","content":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n</=></=>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2017 Michał Bączkowski\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Kotlin.\n *\n * Limitations:\n * - doesn't support string interpolation (\"$var\")\n * - doesn't support labels if there is no space between the keyword (break@loop, loop@for)\n *\n * @author mibac138@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            [PR['PR_PUNCTUATION'], /^[.!%&()*+,\\-;<=>?\\[\\\\\\]^{|}:]+/, null, '.!%&()*+,-;<=>?[\\\\]^{|}:']\n        ],\n        [\n            // keywords\n            [PR['PR_KEYWORD'],\n                /^\\b(package|public|protected|private|open|abstract|constructor|final|override|import|for|while|as|typealias|get|set|((data|enum|annotation|sealed) )?class|this|super|val|var|fun|is|in|throw|return|break|continue|(companion )?object|if|try|else|do|when|init|interface|typeof)\\b/],\n            [PR['PR_LITERAL'], /^(?:true|false|null)\\b/],\n            // number literals\n            [PR['PR_LITERAL'], /^(0[xX][0-9a-fA-F_]+L?|0[bB][0-1]+L?|[0-9_.]+([eE]-?[0-9]+)?[fFL]?)/],\n            [PR['PR_TYPE'], /^(\\b[A-Z]+[a-z][a-zA-Z0-9_$@]*|`.*`)/, null],\n            //double slash comments\n            [PR['PR_COMMENT'], /^\\/\\/.*/],\n            //slash star comments and documentation\n            [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],\n            // char\n            [PR['PR_STRING'], /'.'/],\n            // string\n            [PR['PR_STRING'], /^\"([^\"\\\\]|\\\\[\\s\\S])*\"/],\n            // multiline string\n            [PR['PR_STRING'], /^\"{3}[\\s\\S]*?[^\\\\]\"{3}/],\n            // annotation (and label)\n            [PR['PR_LITERAL'], /^@([a-zA-Z0-9_$@]*|`.*`)/],\n            // label definition\n            [PR['PR_LITERAL'], /^[a-zA-Z0-9_]+@/]\n        ]),\n    ['kotlin']);\n</=></=>"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http://www.lassosoft.com>\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n","source":"plugins/prettify/lang-lasso.js","raw":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http://www.lassosoft.com>\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n","date":"2018-04-24T14:27:38.054Z","updated":"2018-04-24T14:27:38.054Z","path":"plugins/prettify/lang-lasso.js","layout":"false","title":"","comments":1,"_id":"cjgfb60830015a4vbptn8ymun","content":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http: www.lassosoft.com=\"\">\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n</\\?(?:lasso(?:script)?|=)|\\?></http:>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Eric Knibbe\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lasso. <http: www.lassosoft.com=\"\">\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then enclose your code in an HTML tag like so:\n *      <pre class=\"prettyprint lang-lasso\">[your Lasso code]</pre>\n *\n * @author Eric Knibbe\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // whitespace\n          [PR['PR_PLAIN'],        /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n          // single quote strings\n          [PR['PR_STRING'],       /^\\'[^\\'\\\\]*(?:\\\\[\\s\\S][^\\'\\\\]*)*(?:\\'|$)/, null, \"'\"],\n          // double quote strings\n          [PR['PR_STRING'],       /^\\\"[^\\\"\\\\]*(?:\\\\[\\s\\S][^\\\"\\\\]*)*(?:\\\"|$)/, null, '\"'],\n          // ticked strings\n          [PR['PR_STRING'],       /^\\`[^\\`]*(?:\\`|$)/, null, '`'],\n          // numeral as integer or hexidecimal\n          [PR['PR_LITERAL'],      /^0x[\\da-f]+|\\d+/i, null, '0123456789'],\n          // local or thread variables, or hashbang\n          [PR['PR_ATTRIB_NAME'],  /^[#$][a-z_][\\w.]*|#\\d+\\b|#![ \\S]+lasso9\\b/i, null, '#$']\n        ],\n        [\n          // square or angle bracket delimiters\n          [PR['PR_TAG'],          /^[[\\]]|<\\?(?:lasso(?:script)?|=)|\\?>|(no_square_brackets|noprocess)\\b/i],\n          // single-line or block comments\n          [PR['PR_COMMENT'],      /^\\/\\/[^\\r\\n]*|\\/\\*[\\s\\S]*?\\*\\//],\n          // member variables or keyword parameters\n          [PR['PR_ATTRIB_NAME'],  /^-(?!infinity)[a-z_][\\w.]*|\\.\\s*'[a-z_][\\w.]*'|\\.{3}/i],\n          // numeral as decimal or scientific notation\n          [PR['PR_LITERAL'],      /^\\d*\\.\\d+(?:e[-+]?\\d+)?|(infinity|NaN)\\b/i],\n          // tag literals\n          [PR['PR_ATTRIB_VALUE'], /^::\\s*[a-z_][\\w.]*/i],\n          // constants\n          [PR['PR_LITERAL'],      /^(?:true|false|none|minimal|full|all|void|and|or|not|bw|nbw|ew|new|cn|ncn|lt|lte|gt|gte|eq|neq|rx|nrx|ft)\\b/i],\n          // standard type or variable declarations\n          [PR['PR_TYPE'],         /^(?:array|date|decimal|duration|integer|map|pair|string|tag|xml|null|boolean|bytes|keyword|list|locale|queue|set|stack|staticarray|local|var|variable|global|data|self|inherited|currentcapture|givenblock)\\b|^\\.\\.?/i],\n          // container or control keywords\n          [PR['PR_KEYWORD'],      /^(?:cache|database_names|database_schemanames|database_tablenames|define_tag|define_type|email_batch|encode_set|html_comment|handle|handle_error|header|if|inline|iterate|ljax_target|link|link_currentaction|link_currentgroup|link_currentrecord|link_detail|link_firstgroup|link_firstrecord|link_lastgroup|link_lastrecord|link_nextgroup|link_nextrecord|link_prevgroup|link_prevrecord|log|loop|namespace_using|output_none|portal|private|protect|records|referer|referrer|repeating|resultset|rows|search_args|search_arguments|select|sort_args|sort_arguments|thread_atomic|value_list|while|abort|case|else|fail_if|fail_ifnot|fail|if_empty|if_false|if_null|if_true|loop_abort|loop_continue|loop_count|params|params_up|return|return_value|run_children|soap_definetag|soap_lastrequest|soap_lastresponse|tag_name|ascending|average|by|define|descending|do|equals|frozen|group|handle_failure|import|in|into|join|let|match|max|min|on|order|parent|protected|provide|public|require|returnhome|skip|split_thread|sum|take|thread|to|trait|type|where|with|yield|yieldhome)\\b/i],\n          // type, method, or parameter names\n          [PR['PR_PLAIN'],        /^[a-z_][\\w.]*(?:=\\s*(?=\\())?/i],\n          // operators\n          [PR['PR_PUNCTUATION'],  /^:=|[-+*\\/%=<>&|!?\\\\]+/]\n        ]),\n    ['lasso', 'ls', 'lassoscript']);\n</\\?(?:lasso(?:script)?|=)|\\?></http:>"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n","source":"plugins/prettify/lang-lisp.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n","date":"2018-04-24T14:27:38.054Z","updated":"2018-04-24T14:27:38.054Z","path":"plugins/prettify/lang-lisp.js","layout":"false","title":"","comments":1,"_id":"cjgfb60850016a4vb7zmt9x3u","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\" target=\"_blank\" rel=\"noopener\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Common Lisp and related languages.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lisp\">(my lisp code)</pre>\n * The lang-cl class identifies the language as common lisp.\n * This file supports the following language extensions:\n *     lang-cl - Common Lisp\n *     lang-el - Emacs Lisp\n *     lang-lisp - Lisp\n *     lang-scm - Scheme\n *     lang-lsp - FAT 8.3 filename version of lang-lisp.\n *\n *\n * I used http://www.devincook.com/goldparser/doc/meta-language/grammar-LISP.htm\n * as the basis, but added line comments that start with ; and changed the atom\n * production to disallow unquoted semicolons.\n *\n * \"Name\"    = 'LISP'\n * \"Author\"  = 'John McCarthy'\n * \"Version\" = 'Minimal'\n * \"About\"   = 'LISP is an abstract language that organizes ALL'\n *           | 'data around \"lists\".'\n *\n * \"Start Symbol\" = [s-Expression]\n *\n * {Atom Char}   = {Printable} - {Whitespace} - [()\"\\'']\n *\n * Atom = ( {Atom Char} | '\\'{Printable} )+\n *\n * [s-Expression] ::= [Quote] Atom\n *                  | [Quote] '(' [Series] ')'\n *                  | [Quote] '(' [s-Expression] '.' [s-Expression] ')'\n *\n * [Series] ::= [s-Expression] [Series]\n *            |\n *\n * [Quote]  ::= ''      !Quote = do not evaluate\n *            |\n *\n *\n * I used <a href=\"http://gigamonkeys.com/book/\" target=\"_blank\" rel=\"noopener\">Practical Common Lisp</a> as\n * the basis for the reserved word list.\n *\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\(+/, null, '('],\n         ['clo',             /^\\)+/, null, ')'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:block|c[ad]+r|catch|con[ds]|def(?:ine|un)|do|eq|eql|equal|equalp|eval-when|flet|format|go|if|labels|lambda|let|load-time-value|locally|macrolet|multiple-value-call|nil|progn|progv|quote|require|return-from|setq|symbol-macrolet|t|tagbody|the|throw|unwind)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['cl', 'el', 'lisp', 'lsp', 'scm', 'ss', 'rkt']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n","source":"plugins/prettify/lang-logtalk.js","raw":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n","date":"2018-04-24T14:27:38.056Z","updated":"2018-04-24T14:27:38.056Z","path":"plugins/prettify/lang-logtalk.js","layout":"false","title":"","comments":1,"_id":"cjgfb60860017a4vb0wa2v3xr","content":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2014 Paulo Moura\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Logtalk.\n * http://logtalk.org/\n * @author Paulo Moura\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          // double-quoted strings.\n          [PR['PR_STRING'], /^\\\"(?:[^\\\"\\\\\\n\\x0C\\r]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n          // atoms (don't break on underscores!)\n          [PR['PR_LITERAL'], /^[a-z][a-zA-Z0-9_]*/],\n          // quoted atoms\n          [PR['PR_LITERAL'], /^\\'(?:[^\\'\\\\\\n\\x0C\\r]|\\\\[^&])+\\'?/, null, \"'\"],\n          // numbers\n          [PR['PR_LITERAL'], /^(?:0'.|0b[0-1]+|0o[0-7]+|0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+\\-]?\\d+)?)/i, null, '0123456789']\n        ],\n        [\n          // single-line comments begin with %\n          [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%'],\n          // block comments are delimited by /* and */\n          [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?\\*\\//],\n          // directives\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(c(a(lls|tegory)|oinductive)|p(ublic|r(ot(ocol|ected)|ivate))|e(l(if|se)|n(coding|sure_loaded)|xport)|i(f|n(clude|itialization|fo))|alias|d(ynamic|iscontiguous)|m(eta_(non_terminal|predicate)|od(e|ule)|ultifile)|reexport|s(et_(logtalk|prolog)_flag|ynchronized)|o(bject|p)|use(s|_module))/],\n          [PR['PR_KEYWORD'], /^\\s*:-\\s(e(lse|nd(if|_(category|object|protocol)))|built_in|dynamic|synchronized|threaded)/],\n          // variables\n          [PR['PR_TYPE'], /^[A-Z_][a-zA-Z0-9_]*/],\n          // operators\n          [PR['PR_PUNCTUATION'], /^[.,;{}:^<>=\\\\/+*?#!-]/]\n        ]),\n    ['logtalk', 'lgt']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n","source":"plugins/prettify/lang-llvm.js","raw":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n","date":"2018-04-24T14:27:38.055Z","updated":"2018-04-24T14:27:38.055Z","path":"plugins/prettify/lang-llvm.js","layout":"false","title":"","comments":1,"_id":"cjgfb60890018a4vbnpbszcq2","content":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Nikhil Dabas\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for LLVM.\n * From https://gist.github.com/ndabas/2850418\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-llvm\">(my LLVM code)</pre>\n *\n *\n * The regular expressions were adapted from:\n * https://github.com/hansstimer/llvm.tmbundle/blob/76fedd8f50fd6108b1780c51d79fbe3223de5f34/Syntaxes/LLVM.tmLanguage\n * \n * http://llvm.org/docs/LangRef.html#constants describes the language grammar.\n * \n * @author Nikhil Dabas\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^!?\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n         // comment.llvm\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';']\n        ],\n        [\n         // variable.llvm\n         [PR['PR_PLAIN'],       /^[%@!](?:[-a-zA-Z$._][-a-zA-Z$._0-9]*|\\d+)/],\n\n         // According to http://llvm.org/docs/LangRef.html#well-formedness\n         // These reserved words cannot conflict with variable names, because none of them start with a prefix character ('%' or '@').\n         [PR['PR_KEYWORD'],     /^[A-Za-z_][0-9A-Za-z_]*/, null],\n\n         // constant.numeric.float.llvm\n         [PR['PR_LITERAL'],     /^\\d+\\.\\d+/],\n         \n         // constant.numeric.integer.llvm\n         [PR['PR_LITERAL'],     /^(?:\\d+|0[xX][a-fA-F0-9]+)/],\n\n         // punctuation\n         [PR['PR_PUNCTUATION'], /^[()\\[\\]{},=*<>:]|\\.\\.\\.$/]\n        ]),\n    ['llvm', 'll']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n","source":"plugins/prettify/lang-lua.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n","date":"2018-04-24T14:27:38.056Z","updated":"2018-04-24T14:27:38.056Z","path":"plugins/prettify/lang-lua.js","layout":"false","title":"","comments":1,"_id":"cjgfb608b0019a4vb5kdisqea","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Lua.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-lua\">(my Lua code)</pre>\n *\n *\n * I used http://www.lua.org/manual/5.1/manual.html#2.1\n * Because of the long-bracket concept used in strings and comments, Lua does\n * not have a regular lexical grammar, but luckily it fits within the space\n * of irregular grammars supported by javascript regular expressions.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^--(?:\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)|[^\\r\\n]*)/],\n         // A long bracketed block not preceded by -- is a string.\n         [PR['PR_STRING'],  /^\\[(=*)\\[[\\s\\S]*?(?:\\]\\1\\]|$)/],\n         [PR['PR_KEYWORD'], /^(?:and|break|do|else|elseif|end|false|for|function|if|in|local|nil|not|or|repeat|return|then|true|until|while)\\b/, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0][^\\w\\t\\n\\r \\xA0\\\"\\'\\-\\+=]*/]\n        ]),\n    ['lua']);\n"},{"_content":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n","source":"plugins/prettify/lang-matlab.js","raw":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n","date":"2018-04-24T14:27:38.057Z","updated":"2018-04-24T14:27:38.057Z","path":"plugins/prettify/lang-matlab.js","layout":"false","title":"","comments":1,"_id":"cjgfb608c001aa4vbes00ry6a","content":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n</|></|></=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|></amroamroamro@gmail.com>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (c) 2013 by Amro <amroamroamro@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MATLAB.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code inside an HTML tag like\n *     <pre class=\"prettyprint lang-matlab\">\n *     </pre>\n *\n * @see https://github.com/amroamroamro/prettify-matlab\n */\n(function (PR) {\n  /*\n    PR_PLAIN: plain text\n    PR_STRING: string literals\n    PR_KEYWORD: keywords\n    PR_COMMENT: comments\n    PR_TYPE: types\n    PR_LITERAL: literal values (1, null, true, ..)\n    PR_PUNCTUATION: punctuation string\n    PR_SOURCE: embedded source\n    PR_DECLARATION: markup declaration such as a DOCTYPE\n    PR_TAG: sgml tag\n    PR_ATTRIB_NAME: sgml attribute name\n    PR_ATTRIB_VALUE: sgml attribute value\n  */\n  var PR_IDENTIFIER = \"ident\",\n    PR_CONSTANT = \"const\",\n    PR_FUNCTION = \"fun\",\n    PR_FUNCTION_TOOLBOX = \"fun_tbx\",\n    PR_SYSCMD = \"syscmd\",\n    PR_CODE_OUTPUT = \"codeoutput\",\n    PR_ERROR = \"err\",\n    PR_WARNING = \"wrn\",\n    PR_TRANSPOSE = \"transpose\",\n    PR_LINE_CONTINUATION = \"linecont\";\n\n  // Refer to: http://www.mathworks.com/help/matlab/functionlist-alpha.html\n  var coreFunctions = [\n    'abs|accumarray|acos(?:d|h)?|acot(?:d|h)?|acsc(?:d|h)?|actxcontrol(?:list|select)?|actxGetRunningServer|actxserver|addlistener|addpath|addpref|addtodate|airy|align|alim|all|allchild|alpha|alphamap|amd|ancestor|and|angle|annotation|any|area|arrayfun|asec(?:d|h)?|asin(?:d|h)?|assert|assignin|atan(?:2|d|h)?|audiodevinfo|audioplayer|audiorecorder|aufinfo|auread|autumn|auwrite|avifile|aviinfo|aviread|axes|axis|balance|bar(?:3|3h|h)?|base2dec|beep|BeginInvoke|bench|bessel(?:h|i|j|k|y)|beta|betainc|betaincinv|betaln|bicg|bicgstab|bicgstabl|bin2dec|bitand|bitcmp|bitget|bitmax|bitnot|bitor|bitset|bitshift|bitxor|blanks|blkdiag|bone|box|brighten|brush|bsxfun|builddocsearchdb|builtin|bvp4c|bvp5c|bvpget|bvpinit|bvpset|bvpxtend|calendar|calllib|callSoapService|camdolly|cameratoolbar|camlight|camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\\.(?:close|closeVar|computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|commandwindow|compan|compass|complex|computer|cond|condeig|condest|coneplot|conj|containers\\.Map|contour(?:3|c|f|slice)?|contrast|conv|conv2|convhull|convhulln|convn|cool|copper|copyfile|copyobj|corrcoef|cos(?:d|h)?|cot(?:d|h)?|cov|cplxpair|cputime|createClassFromWsdl|createSoapMessage|cross|csc(?:d|h)?|csvread|csvwrite|ctranspose|cumprod|cumsum|cumtrapz|curl|customverctrl|cylinder|daqread|daspect|datacursormode|datatipinfo|date|datenum|datestr|datetick|datevec|dbclear|dbcont|dbdown|dblquad|dbmex|dbquit|dbstack|dbstatus|dbstep|dbstop|dbtype|dbup|dde23|ddeget|ddesd|ddeset|deal|deblank|dec2base|dec2bin|dec2hex|decic|deconv|del2|delaunay|delaunay3|delaunayn|DelaunayTri|delete|demo|depdir|depfun|det|detrend|deval|diag|dialog|diary|diff|diffuse|dir|disp|display|dither|divergence|dlmread|dlmwrite|dmperm|doc|docsearch|dos|dot|dragrect|drawnow|dsearch|dsearchn|dynamicprops|echo|echodemo|edit|eig|eigs|ellipj|ellipke|ellipsoid|empty|enableNETfromNetworkDrive|enableservice|EndInvoke|enumeration|eomday|eq|erf|erfc|erfcinv|erfcx|erfinv|error|errorbar|errordlg|etime|etree|etreeplot|eval|evalc|evalin|event\\.(?:EventData|listener|PropertyEvent|proplistener)|exifread|exist|exit|exp|expint|expm|expm1|export2wsdlg|eye|ezcontour|ezcontourf|ezmesh|ezmeshc|ezplot|ezplot3|ezpolar|ezsurf|ezsurfc|factor|factorial|fclose|feather|feature|feof|ferror|feval|fft|fft2|fftn|fftshift|fftw|fgetl|fgets|fieldnames|figure|figurepalette|fileattrib|filebrowser|filemarker|fileparts|fileread|filesep|fill|fill3|filter|filter2|find|findall|findfigs|findobj|findstr|finish|fitsdisp|fitsinfo|fitsread|fitswrite|fix|flag|flipdim|fliplr|flipud|floor|flow|fminbnd|fminsearch|fopen|format|fplot|fprintf|frame2im|fread|freqspace|frewind|fscanf|fseek|ftell|FTP|full|fullfile|func2str|functions|funm|fwrite|fzero|gallery|gamma|gammainc|gammaincinv|gammaln|gca|gcbf|gcbo|gcd|gcf|gco|ge|genpath|genvarname|get|getappdata|getenv|getfield|getframe|getpixelposition|getpref|ginput|gmres|gplot|grabcode|gradient|gray|graymon|grid|griddata(?:3|n)?|griddedInterpolant|gsvd|gt|gtext|guidata|guide|guihandles|gunzip|gzip|h5create|h5disp|h5info|h5read|h5readatt|h5write|h5writeatt|hadamard|handle|hankel|hdf|hdf5|hdf5info|hdf5read|hdf5write|hdfinfo|hdfread|hdftool|help|helpbrowser|helpdesk|helpdlg|helpwin|hess|hex2dec|hex2num|hgexport|hggroup|hgload|hgsave|hgsetget|hgtransform|hidden|hilb|hist|histc|hold|home|horzcat|hostid|hot|hsv|hsv2rgb|hypot|ichol|idivide|ifft|ifft2|ifftn|ifftshift|ilu|im2frame|im2java|imag|image|imagesc|imapprox|imfinfo|imformats|import|importdata|imread|imwrite|ind2rgb|ind2sub|inferiorto|info|inline|inmem|inpolygon|input|inputdlg|inputname|inputParser|inspect|instrcallback|instrfind|instrfindall|int2str|integral(?:2|3)?|interp(?:1|1q|2|3|ft|n)|interpstreamspeed|intersect|intmax|intmin|inv|invhilb|ipermute|isa|isappdata|iscell|iscellstr|ischar|iscolumn|isdir|isempty|isequal|isequaln|isequalwithequalnans|isfield|isfinite|isfloat|isglobal|ishandle|ishghandle|ishold|isinf|isinteger|isjava|iskeyword|isletter|islogical|ismac|ismatrix|ismember|ismethod|isnan|isnumeric|isobject|isocaps|isocolors|isonormals|isosurface|ispc|ispref|isprime|isprop|isreal|isrow|isscalar|issorted|isspace|issparse|isstr|isstrprop|isstruct|isstudent|isunix|isvarname|isvector|javaaddpath|javaArray|javachk|javaclasspath|javacomponent|javaMethod|javaMethodEDT|javaObject|javaObjectEDT|javarmpath|jet|keyboard|kron|lasterr|lasterror|lastwarn|lcm|ldivide|ldl|le|legend|legendre|length|libfunctions|libfunctionsview|libisloaded|libpointer|libstruct|license|light|lightangle|lighting|lin2mu|line|lines|linkaxes|linkdata|linkprop|linsolve|linspace|listdlg|listfonts|load|loadlibrary|loadobj|log|log10|log1p|log2|loglog|logm|logspace|lookfor|lower|ls|lscov|lsqnonneg|lsqr|lt|lu|luinc|magic|makehgtform|mat2cell|mat2str|material|matfile|matlab\\.io\\.MatFile|matlab\\.mixin\\.(?:Copyable|Heterogeneous(?:\\.getDefaultScalarElement)?)|matlabrc|matlabroot|max|maxNumCompThreads|mean|median|membrane|memmapfile|memory|menu|mesh|meshc|meshgrid|meshz|meta\\.(?:class(?:\\.fromName)?|DynamicProperty|EnumeratedValue|event|MetaData|method|package(?:\\.(?:fromName|getAllPackages))?|property)|metaclass|methods|methodsview|mex(?:\\.getCompilerConfigurations)?|MException|mexext|mfilename|min|minres|minus|mislocked|mkdir|mkpp|mldivide|mlint|mlintrpt|mlock|mmfileinfo|mmreader|mod|mode|more|move|movefile|movegui|movie|movie2avi|mpower|mrdivide|msgbox|mtimes|mu2lin|multibandread|multibandwrite|munlock|namelengthmax|nargchk|narginchk|nargoutchk|native2unicode|nccreate|ncdisp|nchoosek|ncinfo|ncread|ncreadatt|ncwrite|ncwriteatt|ncwriteschema|ndgrid|ndims|ne|NET(?:\\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|NetException|setStaticProperty))?|netcdf\\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|permute|pie|pink|pinv|planerot|playshow|plot|plot3|plotbrowser|plotedit|plotmatrix|plottools|plotyy|plus|pol2cart|polar|poly|polyarea|polyder|polyeig|polyfit|polyint|polyval|polyvalm|pow2|power|ppval|prefdir|preferences|primes|print|printdlg|printopt|printpreview|prod|profile|profsave|propedit|propertyeditor|psi|publish|PutCharArray|PutFullMatrix|PutWorkspaceData|pwd|qhull|qmr|qr|qrdelete|qrinsert|qrupdate|quad|quad2d|quadgk|quadl|quadv|questdlg|quit|quiver|quiver3|qz|rand|randi|randn|randperm|RandStream(?:\\.(?:create|getDefaultStream|getGlobalStream|list|setDefaultStream|setGlobalStream))?|rank|rat|rats|rbbox|rcond|rdivide|readasync|real|reallog|realmax|realmin|realpow|realsqrt|record|rectangle|rectint|recycle|reducepatch|reducevolume|refresh|refreshdata|regexp|regexpi|regexprep|regexptranslate|rehash|rem|Remove|RemoveAll|repmat|reset|reshape|residue|restoredefaultpath|rethrow|rgb2hsv|rgb2ind|rgbplot|ribbon|rmappdata|rmdir|rmfield|rmpath|rmpref|rng|roots|rose|rosser|rot90|rotate|rotate3d|round|rref|rsf2csf|run|save|saveas|saveobj|savepath|scatter|scatter3|schur|sec|secd|sech|selectmoveresize|semilogx|semilogy|sendmail|serial|set|setappdata|setdiff|setenv|setfield|setpixelposition|setpref|setstr|setxor|shading|shg|shiftdim|showplottool|shrinkfaces|sign|sin(?:d|h)?|size|slice|smooth3|snapnow|sort|sortrows|sound|soundsc|spalloc|spaugment|spconvert|spdiags|specular|speye|spfun|sph2cart|sphere|spinmap|spline|spones|spparms|sprand|sprandn|sprandsym|sprank|spring|sprintf|spy|sqrt|sqrtm|squeeze|ss2tf|sscanf|stairs|startup|std|stem|stem3|stopasync|str2double|str2func|str2mat|str2num|strcat|strcmp|strcmpi|stream2|stream3|streamline|streamparticles|streamribbon|streamslice|streamtube|strfind|strjust|strmatch|strncmp|strncmpi|strread|strrep|strtok|strtrim|struct2cell|structfun|strvcat|sub2ind|subplot|subsasgn|subsindex|subspace|subsref|substruct|subvolume|sum|summer|superclasses|superiorto|support|surf|surf2patch|surface|surfc|surfl|surfnorm|svd|svds|swapbytes|symamd|symbfact|symmlq|symrcm|symvar|system|tan(?:d|h)?|tar|tempdir|tempname|tetramesh|texlabel|text|textread|textscan|textwrap|tfqmr|throw|tic|Tiff(?:\\.(?:getTagNames|getVersion))?|timer|timerfind|timerfindall|times|timeseries|title|toc|todatenum|toeplitz|toolboxdir|trace|transpose|trapz|treelayout|treeplot|tril|trimesh|triplequad|triplot|TriRep|TriScatteredInterp|trisurf|triu|tscollection|tsearch|tsearchn|tstool|type|typecast|uibuttongroup|uicontextmenu|uicontrol|uigetdir|uigetfile|uigetpref|uiimport|uimenu|uiopen|uipanel|uipushtool|uiputfile|uiresume|uisave|uisetcolor|uisetfont|uisetpref|uistack|uitable|uitoggletool|uitoolbar|uiwait|uminus|undocheckout|unicode2native|union|unique|unix|unloadlibrary|unmesh|unmkpp|untar|unwrap|unzip|uplus|upper|urlread|urlwrite|usejava|userpath|validateattributes|validatestring|vander|var|vectorize|ver|verctrl|verLessThan|version|vertcat|VideoReader(?:\\.isPlatformSupported)?|VideoWriter(?:\\.getProfiles)?|view|viewmtx|visdiff|volumebounds|voronoi|voronoin|wait|waitbar|waitfor|waitforbuttonpress|warndlg|warning|waterfall|wavfinfo|wavplay|wavread|wavrecord|wavwrite|web|weekday|what|whatsnew|which|whitebg|who|whos|wilkinson|winopen|winqueryreg|winter|wk1finfo|wk1read|wk1write|workspace|xlabel|xlim|xlsfinfo|xlsread|xlswrite|xmlread|xmlwrite|xor|xslt|ylabel|ylim|zeros|zip|zlabel|zlim|zoom'\n  ].join(\"|\");\n  var statsFunctions = [\n    'addedvarplot|andrewsplot|anova(?:1|2|n)|ansaribradley|aoctool|barttest|bbdesign|beta(?:cdf|fit|inv|like|pdf|rnd|stat)|bino(?:cdf|fit|inv|pdf|rnd|stat)|biplot|bootci|bootstrp|boxplot|candexch|candgen|canoncorr|capability|capaplot|caseread|casewrite|categorical|ccdesign|cdfplot|chi2(?:cdf|gof|inv|pdf|rnd|stat)|cholcov|Classification(?:BaggedEnsemble|Discriminant(?:\\.(?:fit|make|template))?|Ensemble|KNN(?:\\.(?:fit|template))?|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|classify|classregtree|cluster|clusterdata|cmdscale|combnk|Compact(?:Classification(?:Discriminant|Ensemble|Tree)|Regression(?:Ensemble|Tree)|TreeBagger)|confusionmat|controlchart|controlrules|cophenet|copula(?:cdf|fit|param|pdf|rnd|stat)|cordexch|corr|corrcov|coxphfit|createns|crosstab|crossval|cvpartition|datasample|dataset|daugment|dcovary|dendrogram|dfittool|disttool|dummyvar|dwtest|ecdf|ecdfhist|ev(?:cdf|fit|inv|like|pdf|rnd|stat)|ExhaustiveSearcher|exp(?:cdf|fit|inv|like|pdf|rnd|stat)|factoran|fcdf|ff2n|finv|fitdist|fitensemble|fpdf|fracfact|fracfactgen|friedman|frnd|fstat|fsurfht|fullfact|gagerr|gam(?:cdf|fit|inv|like|pdf|rnd|stat)|GeneralizedLinearModel(?:\\.fit)?|geo(?:cdf|inv|mean|pdf|rnd|stat)|gev(?:cdf|fit|inv|like|pdf|rnd|stat)|gline|glmfit|glmval|glyphplot|gmdistribution(?:\\.fit)?|gname|gp(?:cdf|fit|inv|like|pdf|rnd|stat)|gplotmatrix|grp2idx|grpstats|gscatter|haltonset|harmmean|hist3|histfit|hmm(?:decode|estimate|generate|train|viterbi)|hougen|hyge(?:cdf|inv|pdf|rnd|stat)|icdf|inconsistent|interactionplot|invpred|iqr|iwishrnd|jackknife|jbtest|johnsrnd|KDTreeSearcher|kmeans|knnsearch|kruskalwallis|ksdensity|kstest|kstest2|kurtosis|lasso|lassoglm|lassoPlot|leverage|lhsdesign|lhsnorm|lillietest|LinearModel(?:\\.fit)?|linhyptest|linkage|logn(?:cdf|fit|inv|like|pdf|rnd|stat)|lsline|mad|mahal|maineffectsplot|manova1|manovacluster|mdscale|mhsample|mle|mlecov|mnpdf|mnrfit|mnrnd|mnrval|moment|multcompare|multivarichart|mvn(?:cdf|pdf|rnd)|mvregress|mvregresslike|mvt(?:cdf|pdf|rnd)|NaiveBayes(?:\\.fit)?|nan(?:cov|max|mean|median|min|std|sum|var)|nbin(?:cdf|fit|inv|pdf|rnd|stat)|ncf(?:cdf|inv|pdf|rnd|stat)|nct(?:cdf|inv|pdf|rnd|stat)|ncx2(?:cdf|inv|pdf|rnd|stat)|NeighborSearcher|nlinfit|nlintool|nlmefit|nlmefitsa|nlparci|nlpredci|nnmf|nominal|NonLinearModel(?:\\.fit)?|norm(?:cdf|fit|inv|like|pdf|rnd|stat)|normplot|normspec|ordinal|outlierMeasure|parallelcoords|paretotails|partialcorr|pcacov|pcares|pdf|pdist|pdist2|pearsrnd|perfcurve|perms|piecewisedistribution|plsregress|poiss(?:cdf|fit|inv|pdf|rnd|tat)|polyconf|polytool|prctile|princomp|ProbDist(?:Kernel|Parametric|UnivKernel|UnivParam)?|probplot|procrustes|qqplot|qrandset|qrandstream|quantile|randg|random|randsample|randtool|range|rangesearch|ranksum|rayl(?:cdf|fit|inv|pdf|rnd|stat)|rcoplot|refcurve|refline|regress|Regression(?:BaggedEnsemble|Ensemble|PartitionedEnsemble|PartitionedModel|Tree(?:\\.(?:fit|template))?)|regstats|relieff|ridge|robustdemo|robustfit|rotatefactors|rowexch|rsmdemo|rstool|runstest|sampsizepwr|scatterhist|sequentialfs|signrank|signtest|silhouette|skewness|slicesample|sobolset|squareform|statget|statset|stepwise|stepwisefit|surfht|tabulate|tblread|tblwrite|tcdf|tdfread|tiedrank|tinv|tpdf|TreeBagger|treedisp|treefit|treeprune|treetest|treeval|trimmean|trnd|tstat|ttest|ttest2|unid(?:cdf|inv|pdf|rnd|stat)|unif(?:cdf|inv|it|pdf|rnd|stat)|vartest(?:2|n)?|wbl(?:cdf|fit|inv|like|pdf|rnd|stat)|wblplot|wishrnd|x2fx|xptread|zscore|ztest'\n  ].join(\"|\");\n  var imageFunctions = [\n    'adapthisteq|analyze75info|analyze75read|applycform|applylut|axes2pix|bestblk|blockproc|bwarea|bwareaopen|bwboundaries|bwconncomp|bwconvhull|bwdist|bwdistgeodesic|bweuler|bwhitmiss|bwlabel|bwlabeln|bwmorph|bwpack|bwperim|bwselect|bwtraceboundary|bwulterode|bwunpack|checkerboard|col2im|colfilt|conndef|convmtx2|corner|cornermetric|corr2|cp2tform|cpcorr|cpselect|cpstruct2pairs|dct2|dctmtx|deconvblind|deconvlucy|deconvreg|deconvwnr|decorrstretch|demosaic|dicom(?:anon|dict|info|lookup|read|uid|write)|edge|edgetaper|entropy|entropyfilt|fan2para|fanbeam|findbounds|fliptform|freqz2|fsamp2|fspecial|ftrans2|fwind1|fwind2|getheight|getimage|getimagemodel|getline|getneighbors|getnhood|getpts|getrangefromclass|getrect|getsequence|gray2ind|graycomatrix|graycoprops|graydist|grayslice|graythresh|hdrread|hdrwrite|histeq|hough|houghlines|houghpeaks|iccfind|iccread|iccroot|iccwrite|idct2|ifanbeam|im2bw|im2col|im2double|im2int16|im2java2d|im2single|im2uint16|im2uint8|imabsdiff|imadd|imadjust|ImageAdapter|imageinfo|imagemodel|imapplymatrix|imattributes|imbothat|imclearborder|imclose|imcolormaptool|imcomplement|imcontour|imcontrast|imcrop|imdilate|imdisplayrange|imdistline|imdivide|imellipse|imerode|imextendedmax|imextendedmin|imfill|imfilter|imfindcircles|imfreehand|imfuse|imgca|imgcf|imgetfile|imhandles|imhist|imhmax|imhmin|imimposemin|imlincomb|imline|immagbox|immovie|immultiply|imnoise|imopen|imoverview|imoverviewpanel|impixel|impixelinfo|impixelinfoval|impixelregion|impixelregionpanel|implay|impoint|impoly|impositionrect|improfile|imputfile|impyramid|imreconstruct|imrect|imregconfig|imregionalmax|imregionalmin|imregister|imresize|imroi|imrotate|imsave|imscrollpanel|imshow|imshowpair|imsubtract|imtool|imtophat|imtransform|imview|ind2gray|ind2rgb|interfileinfo|interfileread|intlut|ippl|iptaddcallback|iptcheckconn|iptcheckhandle|iptcheckinput|iptcheckmap|iptchecknargin|iptcheckstrs|iptdemos|iptgetapi|iptGetPointerBehavior|iptgetpref|ipticondir|iptnum2ordinal|iptPointerManager|iptprefs|iptremovecallback|iptSetPointerBehavior|iptsetpref|iptwindowalign|iradon|isbw|isflat|isgray|isicc|isind|isnitf|isrgb|isrset|lab2double|lab2uint16|lab2uint8|label2rgb|labelmatrix|makecform|makeConstrainToRectFcn|makehdr|makelut|makeresampler|maketform|mat2gray|mean2|medfilt2|montage|nitfinfo|nitfread|nlfilter|normxcorr2|ntsc2rgb|openrset|ordfilt2|otf2psf|padarray|para2fan|phantom|poly2mask|psf2otf|qtdecomp|qtgetblk|qtsetblk|radon|rangefilt|reflect|regionprops|registration\\.metric\\.(?:MattesMutualInformation|MeanSquares)|registration\\.optimizer\\.(?:OnePlusOneEvolutionary|RegularStepGradientDescent)|rgb2gray|rgb2ntsc|rgb2ycbcr|roicolor|roifill|roifilt2|roipoly|rsetwrite|std2|stdfilt|strel|stretchlim|subimage|tformarray|tformfwd|tforminv|tonemap|translate|truesize|uintlut|viscircles|warp|watershed|whitepoint|wiener2|xyz2double|xyz2uint16|ycbcr2rgb'\n  ].join(\"|\");\n  var optimFunctions = [\n    'bintprog|color|fgoalattain|fminbnd|fmincon|fminimax|fminsearch|fminunc|fseminf|fsolve|fzero|fzmult|gangstr|ktrlink|linprog|lsqcurvefit|lsqlin|lsqnonlin|lsqnonneg|optimget|optimset|optimtool|quadprog'\n  ].join(\"|\");\n\n  // identifiers: variable/function name, or a chain of variable names joined by dots (obj.method, struct.field1.field2, etc..)\n  // valid variable names (start with letter, and contains letters, digits, and underscores).\n  // we match \"xx.yy\" as a whole so that if \"xx\" is plain and \"yy\" is not, we dont get a false positive for \"yy\"\n  //var reIdent = '(?:[a-zA-Z][a-zA-Z0-9_]*)';\n  //var reIdentChain = '(?:' + reIdent + '(?:\\.' + reIdent + ')*' + ')';\n\n  // patterns that always start with a known character. Must have a shortcut string.\n  var shortcutStylePatterns = [\n    // whitespaces: space, tab, carriage return, line feed, line tab, form-feed, non-break space\n    [PR.PR_PLAIN, /^[ \\t\\r\\n\\v\\f\\xA0]+/, null, \" \\t\\r\\n\\u000b\\u000c\\u00a0\"],\n\n    // block comments\n    //TODO: chokes on nested block comments\n    //TODO: false positives when the lines with %{ and %} contain non-spaces\n    //[PR.PR_COMMENT, /^%(?:[^\\{].*|\\{(?:%|%*[^\\}%])*(?:\\}+%?)?)/, null],\n    [PR.PR_COMMENT, /^%\\{[^%]*%+(?:[^\\}%][^%]*%+)*\\}/, null],\n\n    // single-line comments\n    [PR.PR_COMMENT, /^%[^\\r\\n]*/, null, \"%\"],\n\n    // system commands\n    [PR_SYSCMD, /^![^\\r\\n]*/, null, \"!\"]\n  ];\n\n  // patterns that will be tried in order if the shortcut ones fail. May have shortcuts.\n  var fallthroughStylePatterns = [\n    // line continuation\n    [PR_LINE_CONTINUATION, /^\\.\\.\\.\\s*[\\r\\n]/, null],\n\n    // error message\n    [PR_ERROR, /^\\?\\?\\? [^\\r\\n]*/, null],\n\n    // warning message\n    [PR_WARNING, /^Warning: [^\\r\\n]*/, null],\n\n    // command prompt/output\n    //[PR_CODE_OUTPUT, /^>>\\s+[^\\r\\n]*[\\r\\n]{1,2}[^=]*=[^\\r\\n]*[\\r\\n]{1,2}[^\\r\\n]*/, null],    // full command output (both loose/compact format): `>> EXP\\nVAR =\\n VAL`\n    [PR_CODE_OUTPUT, /^>>\\s+/, null],      // only the command prompt `>> `\n    [PR_CODE_OUTPUT, /^octave:\\d+>\\s+/, null],  // Octave command prompt `octave:1> `\n\n    // identifier (chain) or closing-parenthesis/brace/bracket, and IS followed by transpose operator\n    // this way we dont misdetect the transpose operator ' as the start of a string\n    [\"lang-matlab-operators\", /^((?:[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*|\\)|\\]|\\}|\\.)')/, null],\n\n    // identifier (chain), and NOT followed by transpose operator\n    // this must come AFTER the \"is followed by transpose\" step (otherwise it chops the last char of identifier)\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)(?!')/, null],\n\n    // single-quoted strings: allow for escaping with '', no multilines\n    //[PR.PR_STRING, /(?:(?<=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|>|&|-|\\+|\\*|\\.|\\^|\\|))/, null],  // string vs. transpose (check before/after context using negative/positive lookbehind/lookahead)\n    [PR.PR_STRING, /^'(?:[^']|'')*'/, null],  // \"'\"\n\n    // floating point numbers: 1, 1.0, 1i, -1.1E-1\n    [PR.PR_LITERAL, /^[+\\-]?\\.?\\d+(?:\\.\\d*)?(?:[Ee][+\\-]?\\d+)?[ij]?/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null]\n  ];\n\n  var identifiersPatterns = [\n    // list of keywords (`iskeyword`)\n    [PR.PR_KEYWORD, /^\\b(?:break|case|catch|classdef|continue|else|elseif|end|for|function|global|if|otherwise|parfor|persistent|return|spmd|switch|try|while)\\b/, null],\n\n    // some specials variables/constants\n    [PR_CONSTANT, /^\\b(?:true|false|inf|Inf|nan|NaN|eps|pi|ans|nargin|nargout|varargin|varargout)\\b/, null],\n\n    // some data types\n    [PR.PR_TYPE, /^\\b(?:cell|struct|char|double|single|logical|u?int(?:8|16|32|64)|sparse)\\b/, null],\n\n    // commonly used builtin functions from core MATLAB and a few popular toolboxes\n    [PR_FUNCTION, new RegExp('^\\\\b(?:' + coreFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + statsFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + imageFunctions + ')\\\\b'), null],\n    [PR_FUNCTION_TOOLBOX, new RegExp('^\\\\b(?:' + optimFunctions + ')\\\\b'), null],\n\n    // plain identifier (user-defined variable/function name)\n    [PR_IDENTIFIER, /^[a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*/, null]\n  ];\n\n  var operatorsPatterns = [\n    // forward to identifiers to match\n    [\"lang-matlab-identifiers\", /^([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)/, null],\n\n    // parentheses, braces, brackets\n    [PR.PR_TAG, /^(?:\\{|\\}|\\(|\\)|\\[|\\])/, null],  // \"{}()[]\"\n\n    // other operators\n    [PR.PR_PUNCTUATION, /^(?:<|>|=|~|@|&|;|,|:|!|\\-|\\+|\\*|\\^|\\.|\\||\\\\|\\/)/, null],\n\n    // transpose operators\n    [PR_TRANSPOSE, /^'/, null]\n  ];\n\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], identifiersPatterns),\n    [\"matlab-identifiers\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer([], operatorsPatterns),\n    [\"matlab-operators\"]\n  );\n  PR.registerLangHandler(\n    PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns),\n    [\"matlab\"]\n  );\n})(window['PR']);\n</|></|></=(?:\\(|\\[|\\{|\\s|=|;|,|:))|^)'(?:[^']|'')*'(?=(?:\\)|\\]|\\}|\\s|=|;|,|:|~|<|></amroamroamro@gmail.com>"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n","source":"plugins/prettify/lang-ml.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n","date":"2018-04-24T14:27:38.058Z","updated":"2018-04-24T14:27:38.058Z","path":"plugins/prettify/lang-ml.js","layout":"false","title":"","comments":1,"_id":"cjgfb608e001ba4vbkz6xjnba","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for OCaml, SML, F# and similar languages.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/spec.html#_Toc270597388\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace is made up of spaces, tabs and newline characters.\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // #if ident/#else/#endif directives delimit conditional compilation\n         // sections\n         [PR['PR_COMMENT'],\n          /^#(?:if[\\t\\n\\r \\xA0]+(?:[a-z_$][\\w\\']*|``[^\\r\\n\\t`]*(?:``|$))|else|endif|light)/i,\n          null, '#'],\n         // A double or single quoted, possibly multi-line, string.\n         // F# allows escaped newlines in strings.\n         [PR['PR_STRING'],      /^(?:\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\]|\\\\[\\s\\S])(?:\\'|$))/, null, '\"\\'']\n        ],\n        [\n         // Block comments are delimited by (* and *) and may be\n         // nested. Single-line comments begin with // and extend to\n         // the end of a line.\n         // TODO: (*...*) comments can be nested.  This does not handle that.\n         [PR['PR_COMMENT'],     /^(?:\\/\\/[^\\r\\n]*|\\(\\*[\\s\\S]*?\\*\\))/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|and|as|assert|begin|class|default|delegate|do|done|downcast|downto|elif|else|end|exception|extern|false|finally|for|fun|function|if|in|inherit|inline|interface|internal|lazy|let|match|member|module|mutable|namespace|new|null|of|open|or|override|private|public|rec|return|static|struct|then|to|true|try|type|upcast|use|val|void|when|while|with|yield|asr|land|lor|lsl|lsr|lxor|mod|sig|atomic|break|checked|component|const|constraint|constructor|continue|eager|event|external|fixed|functor|global|include|method|mixin|object|parallel|process|protected|pure|sealed|trait|virtual|volatile)\\b/],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         [PR['PR_PLAIN'],       /^(?:[a-z_][\\w']*[!?#]?|``[^\\r\\n\\t`]*(?:``|$))/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\t\\n\\r \\xA0\\\"\\'\\w]+/]\n        ]),\n    ['fs', 'ml']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n","source":"plugins/prettify/lang-mumps.js","raw":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n","date":"2018-04-24T14:27:38.058Z","updated":"2018-04-24T14:27:38.058Z","path":"plugins/prettify/lang-mumps.js","layout":"false","title":"","comments":1,"_id":"cjgfb608i001ca4vbvqhd388n","content":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Kitware Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for MUMPS.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-mumps\">(my SQL code)</pre>\n * \n * Commands, intrinsic functions and variables taken from ISO/IEC 11756:1999(E)\n *\n * @author chris.harris@kitware.com\n *\n * Known issues:\n * \n * - Currently can't distinguish between keywords and local or global variables having the same name\n *   for exampe SET IF=\"IF?\"\n * - m file are already used for MatLab hence using mumps.\n */\n\n(function () {\n\n\nvar commands = 'B|BREAK|'       + \n               'C|CLOSE|'       +\n               'D|DO|'          +\n               'E|ELSE|'        +\n               'F|FOR|'         +\n               'G|GOTO|'        +\n               'H|HALT|'        +\n               'H|HANG|'        +\n               'I|IF|'          +\n               'J|JOB|'         +\n               'K|KILL|'        +\n               'L|LOCK|'        +\n               'M|MERGE|'       +\n               'N|NEW|'         +\n               'O|OPEN|'        +     \n               'Q|QUIT|'        +\n               'R|READ|'        +\n               'S|SET|'         +\n               'TC|TCOMMIT|'    +\n               'TRE|TRESTART|'  +\n               'TRO|TROLLBACK|' +\n               'TS|TSTART|'     +\n               'U|USE|'         +\n               'V|VIEW|'        +  \n               'W|WRITE|'       +\n               'X|XECUTE';\n\nvar intrinsicVariables = 'D|DEVICE|'       +\n                         'EC|ECODE|'       +  \n                         'ES|ESTACK|'      +\n                         'ET|ETRAP|'       +\n                         'H|HOROLOG|'      +\n                         'I|IO|'           +\n                         'J|JOB|'          +\n                         'K|KEY|'          +\n                         'P|PRINCIPAL|'    +\n                         'Q|QUIT|'         +\n                         'ST|STACK|'       +\n                         'S|STORAGE|'      +\n                         'SY|SYSTEM|'      +\n                         'T|TEST|'         +\n                         'TL|TLEVEL|'      +\n                         'TR|TRESTART|'    +\n                         'X|'              +\n                         'Y|'              +\n                         'Z[A-Z]*|';    \n\nvar intrinsicFunctions = 'A|ASCII|'        +\n                         'C|CHAR|'         +\n                         'D|DATA|'         +\n                         'E|EXTRACT|'      +\n                         'F|FIND|'         +\n                         'FN|FNUMBER|'     +\n                         'G|GET|'          +\n                         'J|JUSTIFY|'      +\n                         'L|LENGTH|'       +\n                         'NA|NAME|'        +\n                         'O|ORDER|'        +\n                         'P|PIECE|'        +\n                         'QL|QLENGTH|'     +\n                         'QS|QSUBSCRIPT|'  +\n                         'Q|QUERY|'        +\n                         'R|RANDOM|'       +\n                         'RE|REVERSE|'     +\n                         'S|SELECT|'       +\n                         'ST|STACK|'       +\n                         'T|TEXT|'         +\n                         'TR|TRANSLATE|'   +\n                         'V|VIEW|'         * \n                         'Z[A-Z]*|';   \n\nvar intrinsic = intrinsicVariables + intrinsicFunctions;                  \n\n\nvar shortcutStylePatterns = [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\"]|\\\\.)*\")/, null, '\"']\n  ];\n\nvar fallthroughStylePatterns = [\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^;[^\\r\\n]*/, null, ';'],\n         // Add intrinsic variables and functions as declarations, there not really but it mean\n         // they will hilighted differently from commands.\n         [PR['PR_DECLARATION'], new RegExp('^(?:\\\\$(?:' + intrinsic + '))\\\\b', 'i'), null],\n         // Add commands as keywords\n         [PR['PR_KEYWORD'], new RegExp('^(?:[^\\\\$]' + commands + ')\\\\b', 'i'), null],\n         // A number is a decimal real literal or in scientific notation. \n         [PR['PR_LITERAL'],\n          /^[+-]?(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:E[+\\-]?\\d+)?)/i], \n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z][a-zA-Z0-9]*/i],\n         // Exclude $ % and ^\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r\\xA0\\\"\\$;%\\^]|_/]\n  ];\n// Can't use m as its already used for MatLab\nPR.registerLangHandler(PR.createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns), ['mumps']);\n})();\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n","source":"plugins/prettify/lang-n.js","raw":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n","date":"2018-04-24T14:27:38.059Z","updated":"2018-04-24T14:27:38.059Z","path":"plugins/prettify/lang-n.js","layout":"false","title":"","comments":1,"_id":"cjgfb608k001da4vbg8wnhuxn","content":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\ )*|\\=\"\" ?)(?:[\\w-]+(?:\\=\"\" [\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)=\"\">/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n</(?:(?:(?:\\.\\.\\></#(?:[^#>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Zimin A.V.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for the Nemerle language.\n * http://nemerle.org\n * @author Zimin A.V.\n */\n(function () {\n  // http://nemerle.org/wiki/index.php?title=Base_keywords\n  var keywords = 'abstract|and|as|base|catch|class|def|delegate|enum|event|extern|false|finally|'\n         + 'fun|implements|interface|internal|is|macro|match|matches|module|mutable|namespace|new|'\n         + 'null|out|override|params|partial|private|protected|public|ref|sealed|static|struct|'\n         + 'syntax|this|throw|true|try|type|typeof|using|variant|virtual|volatile|when|where|with|'\n         + 'assert|assert2|async|break|checked|continue|do|else|ensures|for|foreach|if|late|lock|new|nolate|'\n         + 'otherwise|regexp|repeat|requires|return|surroundwith|unchecked|unless|using|while|yield';\n\n  PR['registerLangHandler'](PR['createSimpleLexer'](\n      // shortcutStylePatterns\n      [\n        [PR['PR_STRING'], /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*\\'|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/, null, '\"'],\n        [PR['PR_COMMENT'], /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/, null, '#'],\n        [PR['PR_PLAIN'], /^\\s+/, null, ' \\r\\n\\t\\xA0']\n      ],\n      // fallthroughStylePatterns\n      [\n        [PR['PR_STRING'], /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null],\n        [PR['PR_STRING'], /^<#(?:[^#>])*(?:#>|$)/, null],\n        [PR['PR_STRING'], /^<(?:(?:(?:\\.\\.\\ )*|\\=\"\" ?)(?:[\\w-]+(?:\\=\"\" [\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)=\"\">/, null],\n        [PR['PR_COMMENT'], /^\\/\\/[^\\r\\n]*/, null],\n        [PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n        [PR['PR_KEYWORD'], new RegExp('^(?:' + keywords + ')\\\\b'), null],\n        [PR['PR_TYPE'], /^(?:array|bool|byte|char|decimal|double|float|int|list|long|object|sbyte|short|string|ulong|uint|ufloat|ulong|ushort|void)\\b/, null],\n        [PR['PR_LITERAL'], /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_TYPE'], /^@[A-Z]+[a-z][A-Za-z_$@0-9]*/, null],\n        [PR['PR_PLAIN'], /^'?[A-Za-z_$][a-z_$@0-9]*/i, null],\n        [PR['PR_LITERAL'], new RegExp(\n             '^(?:'\n  // A hex number\n             + '0x[a-f0-9]+'\n  // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n  // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n  // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'), null, '0123456789'],\n\n        [PR['PR_PUNCTUATION'], /^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#]*/, null]\n      ]),\n      ['n', 'nemerle']);\n})();\n</(?:(?:(?:\\.\\.\\></#(?:[^#>"},{"_content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n","source":"plugins/prettify/lang-proto.js","raw":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n","date":"2018-04-24T14:27:38.060Z","updated":"2018-04-24T14:27:38.060Z","path":"plugins/prettify/lang-proto.js","layout":"false","title":"","comments":1,"_id":"cjgfb608l001ea4vbq1iwmuoo","content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Protocol Buffers as described at\n * http://code.google.com/p/protobuf/.\n *\n * Based on the lexical grammar at\n * http://research.microsoft.com/fsharp/manual/spec2.aspx#_Toc202383715\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](PR['sourceDecorator']({\n        'keywords': (\n            'bytes,default,double,enum,extend,extensions,false,'\n            + 'group,import,max,message,option,'\n            + 'optional,package,repeated,required,returns,rpc,service,'\n            + 'syntax,to,true'),\n        'types': /^(bool|(double|s?fixed|[su]?int)(32|64)|float|string)\\b/,\n        'cStyleComments': true\n      }), ['proto']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n","source":"plugins/prettify/lang-pascal.js","raw":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n","date":"2018-04-24T14:27:38.059Z","updated":"2018-04-24T14:27:38.059Z","path":"plugins/prettify/lang-pascal.js","layout":"false","title":"","comments":1,"_id":"cjgfb608n001fa4vbi38ui0pw","content":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Peter Kofler\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Contributed by peter dot kofler at code minus cop dot org\n\n/**\n * @fileoverview\n * Registers a language handler for (Turbo) Pascal.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-pascal\">(my Pascal code)</pre>\n *\n * @author peter dot kofler at code minus cop dot org\n */\n\nPR.registerLangHandler(\n    PR.createSimpleLexer(\n        [ // shortcutStylePatterns\n          // 'single-line-string'\n          [PR.PR_STRING,        /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$))/, null, '\\''],\n          // Whitespace\n          [PR.PR_PLAIN,         /^\\s+/, null, ' \\r\\n\\t\\xA0']\n        ],\n        [ // fallthroughStylePatterns\n          // A cStyleComments comment (* *) or {}\n          [PR.PR_COMMENT,       /^\\(\\*[\\s\\S]*?(?:\\*\\)|$)|^\\{[\\s\\S]*?(?:\\}|$)/, null],\n          [PR.PR_KEYWORD,       /^(?:ABSOLUTE|AND|ARRAY|ASM|ASSEMBLER|BEGIN|CASE|CONST|CONSTRUCTOR|DESTRUCTOR|DIV|DO|DOWNTO|ELSE|END|EXTERNAL|FOR|FORWARD|FUNCTION|GOTO|IF|IMPLEMENTATION|IN|INLINE|INTERFACE|INTERRUPT|LABEL|MOD|NOT|OBJECT|OF|OR|PACKED|PROCEDURE|PROGRAM|RECORD|REPEAT|SET|SHL|SHR|THEN|TO|TYPE|UNIT|UNTIL|USES|VAR|VIRTUAL|WHILE|WITH|XOR)\\b/i, null],\n          [PR.PR_LITERAL,       /^(?:true|false|self|nil)/i, null],\n          [PR.PR_PLAIN,         /^[a-z][a-z0-9]*/i, null],\n          // Literals .0, 0, 0.0 0E13\n          [PR.PR_LITERAL,       /^(?:\\$[a-f0-9]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+\\-]?\\d+)?)/i,  null, '0123456789'],\n          [PR.PR_PUNCTUATION,   /^.[^\\s\\w\\.$@\\'\\/]*/, null]\n        ]),\n    ['pascal']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n","source":"plugins/prettify/lang-r.js","raw":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n","date":"2018-04-24T14:27:38.061Z","updated":"2018-04-24T14:27:38.061Z","path":"plugins/prettify/lang-r.js","layout":"false","title":"","comments":1,"_id":"cjgfb608o001ga4vb0jhkwpmi","content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n</|></=|>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2012 Jeffrey B. Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for S, S-plus, and R source code.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-r\"> code </pre>\n *\n * Language definition from\n * http://cran.r-project.org/doc/manuals/R-lang.html.\n * Many of the regexes are shared  with the pygments SLexer,\n * http://pygments.org/.\n *\n * Original: https://raw.github.com/jrnold/prettify-lang-r-bugs/master/lang-r.js\n *\n * @author jeffrey.arnold@gmail.com\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n\t    [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"'],\n\t    [PR['PR_STRING'],      /^\\'(?:[^\\'\\\\]|\\\\[\\s\\S])*(?:\\'|$)/, null, \"'\"]\n        ],\n        [\n            [PR['PR_COMMENT'],     /^#.*/],\n\t    [PR['PR_KEYWORD'],     /^(?:if|else|for|while|repeat|in|next|break|return|switch|function)(?![A-Za-z0-9_.])/],\n\t    // hex numbes\n\t    [PR['PR_LITERAL'], /^0[xX][a-fA-F0-9]+([pP][0-9]+)?[Li]?/],\n\t    // Decimal numbers\n            [PR['PR_LITERAL'], /^[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+)([eE][+-]?[0-9]+)?[Li]?/],\n\t    // builtin symbols\n\t    [PR['PR_LITERAL'], /^(?:NULL|NA(?:_(?:integer|real|complex|character)_)?|Inf|TRUE|FALSE|NaN|\\.\\.(?:\\.|[0-9]+))(?![A-Za-z0-9_.])/],\n\t    // assignment, operators, and parens, etc.\n\t    [PR['PR_PUNCTUATION'], /^(?:<<?-|->>?|-|==|<=|>=|<|>|&&?|!=|\\|\\|?|\\*|\\+|\\^|\\/|!|%.*?%|=|~|\\$|@|:{1,3}|[\\[\\](){};,?])/],\n\t    // valid variable names\n\t    [PR['PR_PLAIN'], /^(?:[A-Za-z]+[A-Za-z0-9_.]*|\\.[a-zA-Z_][0-9a-zA-Z\\._]*)(?![A-Za-z0-9_.])/],\n\t    // string backtick\n\t    [PR['PR_STRING'], /^`.+`/]\n        ]),\n    ['r', 's', 'R', 'S', 'Splus']);\n</|></=|>"},{"_content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n","source":"plugins/prettify/lang-rd.js","raw":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n","date":"2018-04-24T14:27:38.061Z","updated":"2018-04-24T14:27:38.061Z","path":"plugins/prettify/lang-rd.js","layout":"false","title":"","comments":1,"_id":"cjgfb608p001ha4vbdigexv87","content":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2012 Jeffrey Arnold\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for R documentation (Rd) files\n *\n * Minimal highlighting or Rd files, basically just highlighting\n * macros. It does not try to identify verbatim or R-like regions of\n * macros as that is too complicated for a lexer.  Descriptions of the\n * Rd format can be found\n * http://cran.r-project.org/doc/manuals/R-exts.html and\n * http://developer.r-project.org/parseRd.pdf.\n *\n * @author Jeffrey Arnold\n */\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n            // whitespace\n            [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n            // all comments begin with '%'\n            [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [// special macros with no args\n            [PR['PR_LITERAL'], /^\\\\(?:cr|l?dots|R|tab)\\b/],\n\t    // macros\n            [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n\t    // highlighted as macros, since technically they are\n            [PR['PR_KEYWORD'],  /^#(?:ifn?def|endif)/ ],\n\t    // catch escaped brackets\n\t    [PR['PR_PLAIN'], /^\\\\[{}]/],\n            // punctuation\n            [PR['PR_PUNCTUATION'], /^[{}()\\[\\]]+/]\n        ]),\n    ['Rd', 'rd']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n","source":"plugins/prettify/lang-rust.js","raw":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n","date":"2018-04-24T14:27:38.062Z","updated":"2018-04-24T14:27:38.062Z","path":"plugins/prettify/lang-rust.js","layout":"false","title":"","comments":1,"_id":"cjgfb608q001ia4vbupphh4jw","content":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 Chris Morgan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Rust.\n *\n * Derived from prior experience implementing similar things in a few environments,\n * most especially rust.vim.\n *\n * @author me@chrismorgan.info\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([], [\n\t\t// Whitespace\n\t\t[PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/],\n\n\t\t// Single line comments\n\t\t[PR['PR_COMMENT'], /^\\/\\/.*/],\n\t\t// Block comments (sadly I do not see how to make this cope with comment nesting as it should)\n\t\t[PR['PR_COMMENT'], /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/],//, null],\n\t\t// String and character literals\n\t\t[PR['PR_STRING'], /^b\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}))*?\"/],  // Bytes literal\n\t\t[PR['PR_STRING'], /^\"(?:[^\\\\]|\\\\(?:.|x[\\da-fA-F]{2}|u\\{\\[\\da-fA-F]{1,6}\\}))*?\"/],  // String literal\n\t\t[PR['PR_STRING'], /^b?r(#*)\\\"[\\s\\S]*?\\\"\\1/],  // Raw string/bytes literal\n\t\t[PR['PR_STRING'], /^b'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}))'/],  // Byte literal\n\t\t[PR['PR_STRING'], /^'([^\\\\]|\\\\(.|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{1,6}\\}))'/],  // Character literal\n\n\t\t// Lifetime\n\t\t[PR['PR_TAG'], /^'\\w+?\\b/],\n\n\t\t// Keywords, reserved keywords and primitive types\n\t\t[PR['PR_KEYWORD'], /^(?:match|if|else|as|break|box|continue|extern|fn|for|in|if|impl|let|loop|pub|return|super|unsafe|where|while|use|mod|trait|struct|enum|type|move|mut|ref|static|const|crate)\\b/],\n\t\t[PR['PR_KEYWORD'], /^(?:alignof|become|do|offsetof|priv|pure|sizeof|typeof|unsized|yield|abstract|virtual|final|override|macro)\\b/],\n\t\t[PR['PR_TYPE'], /^(?:[iu](8|16|32|64|128|size)|char|bool|f32|f64|str|Self)\\b/],\n\n\t\t// Rust 1.0 prelude items\n\t\t[PR['PR_TYPE'], /^(?:Copy|Send|Sized|Sync|Drop|Fn|FnMut|FnOnce|Box|ToOwned|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator|Option|Some|None|Result|Ok|Err|SliceConcatExt|String|ToString|Vec)\\b/],\n\n\t\t// Literals:\n\t\t[PR['PR_LITERAL'], /^(self|true|false|null)\\b/],\n\t\t// A number is a hex integer literal, a decimal real literal, or in\n\t\t// scientific notation.\n\t\t// Integer literals: decimal, hexadecimal, octal, binary.\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0x[a-fA-F0-9_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0o[0-7_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t[PR['PR_LITERAL'], /^0b[01_]+(?:[iu](?:size|8|16|32|64|128))?/],\n\t\t// Float literals\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*\\.(?![^\\s\\d.])/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)(?:[eE][+-]?[0-9_]+)?(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)(?:f32|f64)?/],\n\t\t[PR['PR_LITERAL'], /^\\d[0-9_]*(?:\\.\\d[0-9_]*)?(?:[eE][+-]?[0-9_]+)?(?:f32|f64)/],\n\n\t\t// Macro invocations (an identifier plus a !)\n\t\t[PR['PR_ATTRIB_NAME'], /^[a-z_]\\w*!/i],\n\t\t// An identifier (sorry, this should be unicode)\n\t\t[PR['PR_PLAIN'], /^[a-z_]\\w*/i],\n\t\t// Attributes\n\t\t[PR['PR_ATTRIB_VALUE'], /^#!?\\[[\\s\\S]*?\\]/],\n\t\t// All the punctuation\n\t\t[PR['PR_PUNCTUATION'], /^[+\\-/*=^&|!<>%[\\](){}?:.,;]/],\n\t\t// Anything else (which is probably illegal, as all the legal stuff should have been covered) can be plain\n\t\t[PR['PR_PLAIN'], /./]\n\t\t]),\n    ['rust']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n","source":"plugins/prettify/lang-scala.js","raw":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n","date":"2018-04-24T14:27:38.063Z","updated":"2018-04-24T14:27:38.063Z","path":"plugins/prettify/lang-scala.js","layout":"false","title":"","comments":1,"_id":"cjgfb608r001ja4vb76omfs4v","content":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n</=></=>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Scala.\n *\n * Derived from http://lampsvn.epfl.ch/svn-repos/scala/scala-documentation/trunk/src/reference/SyntaxSummary.tex\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted string \n          // or a triple double-quoted multi-line string.\n         [PR['PR_STRING'],\n          /^(?:\"(?:(?:\"\"(?:\"\"?(?!\")|[^\\\\\"]|\\\\.)*\"{0,3})|(?:[^\"\\r\\n\\\\]|\\\\.)*\"?))/,\n          null, '\"'],\n         [PR['PR_LITERAL'],     /^`(?:[^\\r\\n\\\\`]|\\\\.)*`?/, null, '`'],\n         [PR['PR_PUNCTUATION'], /^[!#%&()*+,\\-:;<=>?@\\[\\\\\\]^{|}~]+/, null,\n          '!#%&()*+,-:;<=>?@[\\\\]^{|}~']\n        ],\n        [\n         // A symbol literal is a single quote followed by an identifier with no\n         // single quote following\n         // A character literal has single quotes on either side\n         [PR['PR_STRING'],      /^'(?:[^\\r\\n\\\\']|\\\\(?:'|[^\\r\\n']+))'/],\n         [PR['PR_LITERAL'],     /^'[a-zA-Z_$][\\w$]*(?!['$\\w])/],\n         [PR['PR_KEYWORD'],     /^(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|object|override|package|private|protected|requires|return|sealed|super|throw|trait|try|type|val|var|while|with|yield)\\b/],\n         [PR['PR_LITERAL'],     /^(?:true|false|null|this)\\b/],\n         [PR['PR_LITERAL'],     /^(?:(?:0(?:[0-7]+|X[0-9A-F]+))L?|(?:(?:0|[1-9][0-9]*)(?:(?:\\.[0-9]+)?(?:E[+\\-]?[0-9]+)?F?|L?))|\\\\.[0-9]+(?:E[+\\-]?[0-9]+)?F?)/i],\n         // Treat upper camel case identifiers as types.\n         [PR['PR_TYPE'],        /^[$_]*[A-Z][_$A-Z0-9]*[a-z][\\w$]*/],\n         [PR['PR_PLAIN'],       /^[$a-zA-Z_][\\w$]*/],\n         [PR['PR_COMMENT'],     /^\\/(?:\\/.*|\\*(?:\\/|\\**[^*/])*(?:\\*+\\/?)?)/],\n         [PR['PR_PUNCTUATION'], /^(?:\\.+|\\/)/]\n        ]),\n    ['scala']);\n</=></=>"},{"_content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n","source":"plugins/prettify/lang-sql.js","raw":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n","date":"2018-04-24T14:27:38.063Z","updated":"2018-04-24T14:27:38.063Z","path":"plugins/prettify/lang-sql.js","layout":"false","title":"","comments":1,"_id":"cjgfb608s001ka4vbu111jmtw","content":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2008 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for SQL.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-sql\">(my SQL code)</pre>\n *\n *\n * http://savage.net.au/SQL/sql-99.bnf.html is the basis for the grammar, and\n * http://msdn.microsoft.com/en-us/library/aa238507(SQL.80).aspx and\n * http://meta.stackoverflow.com/q/92352/137403 as the bases for the keyword\n * list.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double or single quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^(?:\"(?:[^\\\"\\\\]|\\\\.)*\"|'(?:[^\\'\\\\]|\\\\.)*')/, null,\n          '\"\\'']\n        ],\n        [\n         // A comment is either a line comment that starts with two dashes, or\n         // two dashes preceding a long bracketed block.\n         [PR['PR_COMMENT'], /^(?:--[^\\r\\n]*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))/],\n         [PR['PR_KEYWORD'], /^(?:ADD|ALL|ALTER|AND|ANY|APPLY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BULK|BY|CASCADE|CASE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMN|COMMIT|COMPUTE|CONNECT|CONSTRAINT|CONTAINS|CONTAINSTABLE|CONTINUE|CONVERT|CREATE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DELETE|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DROP|DUMMY|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXEC|EXECUTE|EXISTS|EXIT|FETCH|FILE|FILLFACTOR|FOLLOWING|FOR|FOREIGN|FREETEXT|FREETEXTTABLE|FROM|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITYCOL|IDENTITY_INSERT|IF|IN|INDEX|INNER|INSERT|INTERSECT|INTO|IS|JOIN|KEY|KILL|LEFT|LIKE|LINENO|LOAD|MATCH|MATCHED|MERGE|NATURAL|NATIONAL|NOCHECK|NONCLUSTERED|NOCYCLE|NOT|NULL|NULLIF|OF|OFF|OFFSETS|ON|OPEN|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|OPTION|OR|ORDER|OUTER|OVER|PARTITION|PERCENT|PIVOT|PLAN|PRECEDING|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVOKE|RIGHT|ROLLBACK|ROWCOUNT|ROWGUIDCOL|ROWS?|RULE|SAVE|SCHEMA|SELECT|SESSION_USER|SET|SETUSER|SHUTDOWN|SOME|START|STATISTICS|SYSTEM_USER|TABLE|TEXTSIZE|THEN|TO|TOP|TRAN|TRANSACTION|TRIGGER|TRUNCATE|TSEQUAL|UNBOUNDED|UNION|UNIQUE|UNPIVOT|UPDATE|UPDATETEXT|USE|USER|USING|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHERE|WHILE|WITH|WITHIN|WRITETEXT|XML)(?=[^\\w-]|$)/i, null],\n         // A number is a hex integer literal, a decimal real literal, or in\n         // scientific notation.\n         [PR['PR_LITERAL'],\n          /^[+-]?(?:0x[\\da-f]+|(?:(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:e[+\\-]?\\d+)?))/i],\n         // An identifier\n         [PR['PR_PLAIN'], /^[a-z_][\\w-]*/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0+\\-\\\"\\']*/]\n        ]),\n    ['sql']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|try|Type|typealias|unowned|unsafe|var|weak|watchOS|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\/=|\\*=|\\^=|%=|\\|=|->|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n","source":"plugins/prettify/lang-swift.js","raw":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|try|Type|typealias|unowned|unsafe|var|weak|watchOS|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\/=|\\*=|\\^=|%=|\\|=|->|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n","date":"2018-04-24T14:27:38.064Z","updated":"2018-04-24T14:27:38.064Z","path":"plugins/prettify/lang-swift.js","layout":"false","title":"","comments":1,"_id":"cjgfb608t001la4vbkfjpyfcf","content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|try|Type|typealias|unowned|unsafe|var|weak|watchOS|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\ =|\\*=\"|\\^=|%=|\\|=|-\">|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n</|></|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\></=|<=|<<|>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Swift\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-swift\">(my swift code)</pre>\n * This file supports the following language extensions:\n *     lang-swift - Swift\n *\n * I used https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html\n * as the source of truth for this. The revision from 2015-10-21 (Swift 2.1) was used in most recent update.\n *\n * @author cerech@google.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n          //whitespace\n          [PR['PR_PLAIN'],                /^[ \\n\\r\\t\\v\\f\\0]+/, null, ' \\n\\r\\t\\v\\f\\0'],\n          //string literals\n          [PR['PR_STRING'],               /^\"(?:[^\"\\\\]|(?:\\\\.)|(?:\\\\\\((?:[^\"\\\\)]|\\\\.)*\\)))*\"/, null, '\"']\n        ],\n        [\n          //floating point literals\n          [PR['PR_LITERAL'],              /^(?:(?:0x[\\da-fA-F][\\da-fA-F_]*\\.[\\da-fA-F][\\da-fA-F_]*[pP]?)|(?:\\d[\\d_]*\\.\\d[\\d_]*[eE]?))[+-]?\\d[\\d_]*/, null],\n          //integer literals\n          [PR['PR_LITERAL'],              /^-?(?:(?:0(?:(?:b[01][01_]*)|(?:o[0-7][0-7_]*)|(?:x[\\da-fA-F][\\da-fA-F_]*)))|(?:\\d[\\d_]*))/, null],\n          //some other literals\n          [PR['PR_LITERAL'],              /^(?:true|false|nil)\\b/, null],\n          //keywords\n          [PR['PR_KEYWORD'],              /^\\b(?:__COLUMN__|__FILE__|__FUNCTION__|__LINE__|#available|#colorLiteral|#column|#else|#elseif|#endif|#file|#fileLiteral|#function|#if|#imageLiteral|#line|#selector|#sourceLocation|arch|arm|arm64|associatedtype|associativity|as|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|dynamicType|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|import|indirect|infix|init|inout|internal|i386|if|in|iOS|iOSApplicationExtension|is|lazy|left|let|mutating|none|nonmutating|open|operator|optional|OSX|OSXApplicationExtension|override|postfix|precedence|prefix|private|protocol|Protocol|public|required|rethrows|return|right|safe|Self|self|set|static|struct|subscript|super|switch|throw|try|Type|typealias|unowned|unsafe|var|weak|watchOS|while|willSet|x86_64)\\b/, null],\n          //double slash comments\n          [PR['PR_COMMENT'],              /^\\/\\/.*?[\\n\\r]/, null],\n          //slash star comments\n          [PR['PR_COMMENT'],              /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null],\n          //punctuation\n          [PR['PR_PUNCTUATION'],          /^<<=|<=|<<|>>=|>=|>>|===|==|\\.\\.\\.|&&=|\\.\\.<|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\ =|\\*=\"|\\^=|%=|\\|=|-\">|`|==|\\+\\+|--|\\/|\\+|!|\\*|%|<|>|&|\\||\\^|\\?|=|-|_/, null],\n          [PR['PR_TYPE'],                 /^\\b(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null]   //borrowing the type regex given by the main program for C-family languages\n        ]),\n    ['swift']); \n</|></|!==|!=|&=|~=|~|\\(|\\)|\\[|\\]|{|}|@|#|;|\\.|,|:|\\|\\|=|\\?\\?|\\|\\||&&|&\\*|&\\+|&-|&=|\\+=|-=|\\></=|<=|<<|>"},{"_content":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n","source":"plugins/prettify/lang-tcl.js","raw":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n","date":"2018-04-24T14:27:38.065Z","updated":"2018-04-24T14:27:38.065Z","path":"plugins/prettify/lang-tcl.js","layout":"false","title":"","comments":1,"_id":"cjgfb608v001ma4vbx6y3ch4a","content":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2012 Pyrios\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for TCL\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-tcl\">proc foo {} {puts bar}</pre>\n *\n * I copy-pasted lang-lisp.js, so this is probably not 100% accurate.\n * I used http://wiki.tcl.tk/1019 for the keywords, but tried to only\n * include as keywords that had more impact on the program flow\n * rather than providing convenience. For example, I included 'if'\n * since that provides branching, but left off 'open' since that is more\n * like a proc. Add more if it makes sense.\n *\n * @author pyrios@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         ['opn',             /^\\{+/, null, '{'],\n         ['clo',             /^\\}+/, null, '}'],\n         // A line comment that starts with ;\n         [PR['PR_COMMENT'],     /^#[^\\r\\n]*/, null, '#'],\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // A double quoted, possibly multi-line, string.\n         [PR['PR_STRING'],      /^\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S])*(?:\\\"|$)/, null, '\"']\n        ],\n        [\n         [PR['PR_KEYWORD'],     /^(?:after|append|apply|array|break|case|catch|continue|error|eval|exec|exit|expr|for|foreach|if|incr|info|proc|return|set|switch|trace|uplevel|upvar|while)\\b/, null],\n         [PR['PR_LITERAL'],\n          /^[+\\-]?(?:[0#]x[0-9a-f]+|\\d+\\/\\d+|(?:\\.\\d+|\\d+(?:\\.\\d*)?)(?:[ed][+\\-]?\\d+)?)/i],\n         // A single quote possibly followed by a word that optionally ends with\n         // = ! or ?.\n         [PR['PR_LITERAL'],\n          /^\\'(?:-*(?:\\w|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?)?/],\n         // A word that optionally ends with = ! or ?.\n         [PR['PR_PLAIN'],\n          /^-*(?:[a-z_]|\\\\[\\x21-\\x7e])(?:[\\w-]*|\\\\[\\x21-\\x7e])[=!?]?/i],\n         // A printable non-space non-special character\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0()\\\"\\\\\\';]+/]\n        ]),\n    ['tcl']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n","source":"plugins/prettify/lang-tex.js","raw":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n","date":"2018-04-24T14:27:38.065Z","updated":"2018-04-24T14:27:38.065Z","path":"plugins/prettify/lang-tex.js","layout":"false","title":"","comments":1,"_id":"cjgfb608w001na4vbubzm57pp","content":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\" target=\"_blank\" rel=\"noopener\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Martin S.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Support for tex highlighting as discussed on\n * <a href=\"http://meta.tex.stackexchange.com/questions/872/text-immediate-following-double-backslashes-is-highlighted-as-macro-inside-a-code/876#876\" target=\"_blank\" rel=\"noopener\">meta.tex.stackexchange.com</a>.\n *\n * @author Martin S.\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // whitespace\n         [PR['PR_PLAIN'],   /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0'],\n         // all comments begin with '%'\n         [PR['PR_COMMENT'], /^%[^\\r\\n]*/, null, '%']\n        ],\n        [\n         //[PR['PR_DECLARATION'], /^\\\\([egx]?def|(new|renew|provide)(command|environment))\\b/],\n         // any command starting with a \\ and contains\n         // either only letters (a-z,A-Z), '@' (internal macros)\n         [PR['PR_KEYWORD'], /^\\\\[a-zA-Z@]+/],\n         // or contains only one character\n         [PR['PR_KEYWORD'], /^\\\\./],\n         // Highlight dollar for math mode and ampersam for tabular\n         [PR['PR_TYPE'],    /^[$&]/],\n         // numeric measurement values with attached units\n         [PR['PR_LITERAL'],\n          /[+-]?(?:\\.\\d+|\\d+(?:\\.\\d*)?)(cm|em|ex|in|pc|pt|bp|mm)/i],\n         // punctuation usually occurring within commands\n         [PR['PR_PUNCTUATION'], /^[{}()\\[\\]=]+/]\n        ]),\n    ['latex', 'tex']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n","source":"plugins/prettify/lang-vb.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n","date":"2018-04-24T14:27:38.066Z","updated":"2018-04-24T14:27:38.066Z","path":"plugins/prettify/lang-vb.js","layout":"false","title":"","comments":1,"_id":"cjgfb608x001oa4vbgljmpkfo","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for various flavors of basic.\n *\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-vb\"></pre>\n *\n *\n * http://msdn.microsoft.com/en-us/library/aa711638(VS.71).aspx defines the\n * visual basic grammar lexical grammar.\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t\\n\\r \\xA0\\u2028\\u2029]+/, null, '\\t\\n\\r \\xA0\\u2028\\u2029'],\n         // A double quoted string with quotes escaped by doubling them.\n         // A single character can be suffixed with C.\n         [PR['PR_STRING'],      /^(?:[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})(?:[\\\"\\u201C\\u201D]c|$)|[\\\"\\u201C\\u201D](?:[^\\\"\\u201C\\u201D]|[\\\"\\u201C\\u201D]{2})*(?:[\\\"\\u201C\\u201D]|$))/i, null,\n          '\"\\u201C\\u201D'],\n         // A comment starts with a single quote and runs until the end of the\n         // line.\n         // VB6 apparently allows _ as an escape sequence for newlines though\n         // this is not a documented feature of VB.net.\n         // http://meta.stackoverflow.com/q/121497/137403\n         [PR['PR_COMMENT'],     /^[\\'\\u2018\\u2019](?:_(?:\\r\\n?|[^\\r]?)|[^\\r\\n_\\u2028\\u2029])*/, null, '\\'\\u2018\\u2019']\n        ],\n        [\n         [PR['PR_KEYWORD'], /^(?:AddHandler|AddressOf|Alias|And|AndAlso|Ansi|As|Assembly|Auto|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|CShort|CSng|CStr|CType|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get|GetType|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|New|Next|Not|NotInheritable|NotOverridable|Object|On|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Preserve|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TypeOf|Unicode|Until|Variant|Wend|When|While|With|WithEvents|WriteOnly|Xor|EndIf|GoSub|Let|Variant|Wend)\\b/i, null],\n         // A second comment form\n         [PR['PR_COMMENT'], /^REM\\b[^\\r\\n\\u2028\\u2029]*/i],\n         // A boolean, numeric, or date literal.\n         [PR['PR_LITERAL'],\n          /^(?:True\\b|False\\b|Nothing\\b|\\d+(?:E[+\\-]?\\d+[FRD]?|[FRDSIL])?|(?:&H[0-9A-F]+|&O[0-7]+)[SIL]?|\\d*\\.\\d+(?:E[+\\-]?\\d+)?[FRD]?|#\\s+(?:\\d+[\\-\\/]\\d+[\\-\\/]\\d+(?:\\s+\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)?|\\d+:\\d+(?::\\d+)?(\\s*(?:AM|PM))?)\\s+#)/i],\n         // An identifier.  Keywords can be turned into identifers\n         // with square brackets, and there may be optional type\n         // characters after a normal identifier in square brackets.\n         [PR['PR_PLAIN'], /^(?:(?:[a-z]|_\\w)\\w*(?:\\[[%&@!#]+\\])?|\\[(?:[a-z]|_\\w)\\w*\\])/i],\n         // A run of punctuation\n         [PR['PR_PUNCTUATION'],\n          /^[^\\w\\t\\n\\r \\\"\\'\\[\\]\\xA0\\u2018\\u2019\\u201C\\u201D\\u2028\\u2029]+/],\n         // Square brackets\n         [PR['PR_PUNCTUATION'], /^(?:\\[|\\])/]\n        ]),\n    ['vb', 'vbs']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n","source":"plugins/prettify/lang-vhdl.js","raw":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n","date":"2018-04-24T14:27:38.067Z","updated":"2018-04-24T14:27:38.067Z","path":"plugins/prettify/lang-vhdl.js","layout":"false","title":"","comments":1,"_id":"cjgfb608y001pa4vbuzvz11a8","content":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2010 benoit@ryder.fr\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for VHDL '93.\n *\n * Based on the lexical grammar and keywords at\n * http://www.iis.ee.ethz.ch/~zimmi/download/vhdl93_syntax.html\n *\n * @author benoit@ryder.fr\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/, null, '\\t\\n\\r \\xA0']\n        ],\n        [\n         // String, character or bit string\n         [PR['PR_STRING'], /^(?:[BOX]?\"(?:[^\\\"]|\"\")*\"|'.')/i],\n         // Comment, from two dashes until end of line.\n         [PR['PR_COMMENT'], /^--[^\\r\\n]*/],\n         [PR['PR_KEYWORD'], /^(?:abs|access|after|alias|all|and|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|rem|report|return|rol|ror|select|severity|shared|signal|sla|sll|sra|srl|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)(?=[^\\w-]|$)/i, null],\n         // Type, predefined or standard\n         [PR['PR_TYPE'], /^(?:bit|bit_vector|character|boolean|integer|real|time|string|severity_level|positive|natural|signed|unsigned|line|text|std_u?logic(?:_vector)?)(?=[^\\w-]|$)/i, null],\n         // Predefined attributes\n         [PR['PR_TYPE'], /^\\'(?:ACTIVE|ASCENDING|BASE|DELAYED|DRIVING|DRIVING_VALUE|EVENT|HIGH|IMAGE|INSTANCE_NAME|LAST_ACTIVE|LAST_EVENT|LAST_VALUE|LEFT|LEFTOF|LENGTH|LOW|PATH_NAME|POS|PRED|QUIET|RANGE|REVERSE_RANGE|RIGHT|RIGHTOF|SIMPLE_NAME|STABLE|SUCC|TRANSACTION|VAL|VALUE)(?=[^\\w-]|$)/i, null],\n         // Number, decimal or based literal\n         [PR['PR_LITERAL'], /^\\d+(?:_\\d+)*(?:#[\\w\\\\.]+#(?:[+\\-]?\\d+(?:_\\d+)*)?|(?:\\.\\d+(?:_\\d+)*)?(?:E[+\\-]?\\d+(?:_\\d+)*)?)/i],\n         // Identifier, basic or extended\n         [PR['PR_PLAIN'], /^(?:[a-z]\\w*|\\\\[^\\\\]*\\\\)/i],\n         // Punctuation\n         [PR['PR_PUNCTUATION'], /^[^\\w\\t\\n\\r \\xA0\\\"\\'][^\\w\\t\\n\\r \\xA0\\-\\\"\\']*/]\n        ]),\n    ['vhdl', 'vhd']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n","source":"plugins/prettify/lang-wiki.js","raw":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n","date":"2018-04-24T14:27:38.067Z","updated":"2018-04-24T14:27:38.067Z","path":"plugins/prettify/lang-wiki.js","layout":"false","title":"","comments":1,"_id":"cjgfb608z001qa4vbyqwau4f9","content":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2009 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * Registers a language handler for Wiki pages.\n *\n * Based on WikiSyntax at http://code.google.com/p/support/wiki/WikiSyntax\n *\n * @author mikesamuel@gmail.com\n */\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Whitespace\n         [PR['PR_PLAIN'],       /^[\\t \\xA0a-gi-z0-9]+/, null,\n          '\\t \\xA0abcdefgijklmnopqrstuvwxyz0123456789'],\n         // Wiki formatting\n         [PR['PR_PUNCTUATION'], /^[=*~\\^\\[\\]]+/, null, '=*~^[]']\n        ],\n        [\n         // Meta-info like #summary, #labels, etc.\n         ['lang-wiki.meta',  /(?:^^|\\r\\n?|\\n)(#[a-z]+)\\b/],\n         // A WikiWord\n         [PR['PR_LITERAL'],     /^(?:[A-Z][a-z][a-z0-9]+[A-Z][a-z][a-zA-Z0-9]+)\\b/\n          ],\n         // A preformatted block in an unknown language\n         ['lang-',           /^\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/],\n         // A block of source code in an unknown language\n         ['lang-',           /^`([^\\r\\n`]+)`/],\n         // An inline URL.\n         [PR['PR_STRING'],\n          /^https?:\\/\\/[^\\/?#\\s]*(?:\\/[^?#\\s]*)?(?:\\?[^#\\s]*)?(?:#\\S*)?/i],\n         [PR['PR_PLAIN'],       /^(?:\\r\\n|[\\s\\S])[^#=*~^A-Zh\\{`\\[\\r\\n]*/]\n        ]),\n    ['wiki']);\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer']([[PR['PR_KEYWORD'], /^#[a-z]+/i, null, '#']], []),\n    ['wiki.meta']);\n"},{"_content":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n","source":"plugins/prettify/lang-xq.js","raw":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n","date":"2018-04-24T14:27:38.068Z","updated":"2018-04-24T14:27:38.068Z","path":"plugins/prettify/lang-xq.js","layout":"false","title":"","comments":1,"_id":"cjgfb6091001ra4vbhjjubv84","content":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\ ?[a-z](?:[\\w.:-]*\\w)?|\\=\"\" ?=\"\">$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n</text></\\>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2011 Patrick Wied\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview\n * Registers a language handler for XQuery.\n *\n * To use, include prettify.js and this file in your HTML page.\n * Then put your code in an HTML tag like\n *      <pre class=\"prettyprint lang-xq\"></pre>\n *\n *\n * @author Patrick Wied ( patpa7p@live.de )\n * @version 2010-09-28\n */\n\n(function () {\n// Falls back to plain for stylesheets that don't style fun.\nvar PR_FUNCTION = 'fun pln';\n// Falls back to plaiin for stylesheets that don't style var.\nvar PR_VARIABLE = 'var pln';\n\nPR['registerLangHandler'](\n    PR['createSimpleLexer'](\n        [\n         // Matching $var-ia_bles\n         [PR_VARIABLE, /^\\$[A-Za-z0-9_\\-]+/, null, \"$\"]\n        ],\n        [\n         // Matching lt and gt operators\n         // Not the best matching solution but you have to differentiate between the gt operator and the tag closing char\n         [PR['PR_PLAIN'], /^[\\s=][<>][\\s=]/],\n         // Matching @Attributes\n         [PR['PR_LITERAL'], /^\\@[\\w-]+/],\n         // Matching xml tags\n         [PR['PR_TAG'], /^<\\ ?[a-z](?:[\\w.:-]*\\w)?|\\=\"\" ?=\"\">$/i],\n         // Matching single or multiline xquery comments -> (: <text> :)\n         [PR['PR_COMMENT'], /^\\(:[\\s\\S]*?:\\)/],\n         // Tokenizing /{}:=;*,[]() as plain\n         [PR['PR_PLAIN'], /^[\\/\\{\\};,\\[\\]\\(\\)]$/],\n         // Matching a double or single quoted, possibly multi-line, string.\n         // with the special condition that a { in a string changes to xquery context \n         [PR['PR_STRING'], /^(?:\\\"(?:[^\\\"\\\\\\{]|\\\\[\\s\\S])*(?:\\\"|$)|\\'(?:[^\\'\\\\\\{]|\\\\[\\s\\S])*(?:\\'|$))/, null, '\"\\''],\n         // Matching standard xquery keywords\n         [PR['PR_KEYWORD'], /^(?:xquery|where|version|variable|union|typeswitch|treat|to|then|text|stable|sortby|some|self|schema|satisfies|returns|return|ref|processing-instruction|preceding-sibling|preceding|precedes|parent|only|of|node|namespace|module|let|item|intersect|instance|in|import|if|function|for|follows|following-sibling|following|external|except|every|else|element|descending|descendant-or-self|descendant|define|default|declare|comment|child|cast|case|before|attribute|assert|ascending|as|ancestor-or-self|ancestor|after|eq|order|by|or|and|schema-element|document-node|node|at)\\b/],\n         // Matching standard xquery types\n         [PR['PR_TYPE'], /^(?:xs:yearMonthDuration|xs:unsignedLong|xs:time|xs:string|xs:short|xs:QName|xs:Name|xs:long|xs:integer|xs:int|xs:gYearMonth|xs:gYear|xs:gMonthDay|xs:gDay|xs:float|xs:duration|xs:double|xs:decimal|xs:dayTimeDuration|xs:dateTime|xs:date|xs:byte|xs:boolean|xs:anyURI|xf:yearMonthDuration)\\b/, null],\n         // Matching standard xquery functions\n         [PR_FUNCTION, /^(?:xp:dereference|xinc:node-expand|xinc:link-references|xinc:link-expand|xhtml:restructure|xhtml:clean|xhtml:add-lists|xdmp:zip-manifest|xdmp:zip-get|xdmp:zip-create|xdmp:xquery-version|xdmp:word-convert|xdmp:with-namespaces|xdmp:version|xdmp:value|xdmp:user-roles|xdmp:user-last-login|xdmp:user|xdmp:url-encode|xdmp:url-decode|xdmp:uri-is-file|xdmp:uri-format|xdmp:uri-content-type|xdmp:unquote|xdmp:unpath|xdmp:triggers-database|xdmp:trace|xdmp:to-json|xdmp:tidy|xdmp:subbinary|xdmp:strftime|xdmp:spawn-in|xdmp:spawn|xdmp:sleep|xdmp:shutdown|xdmp:set-session-field|xdmp:set-response-encoding|xdmp:set-response-content-type|xdmp:set-response-code|xdmp:set-request-time-limit|xdmp:set|xdmp:servers|xdmp:server-status|xdmp:server-name|xdmp:server|xdmp:security-database|xdmp:security-assert|xdmp:schema-database|xdmp:save|xdmp:role-roles|xdmp:role|xdmp:rethrow|xdmp:restart|xdmp:request-timestamp|xdmp:request-status|xdmp:request-cancel|xdmp:request|xdmp:redirect-response|xdmp:random|xdmp:quote|xdmp:query-trace|xdmp:query-meters|xdmp:product-edition|xdmp:privilege-roles|xdmp:privilege|xdmp:pretty-print|xdmp:powerpoint-convert|xdmp:platform|xdmp:permission|xdmp:pdf-convert|xdmp:path|xdmp:octal-to-integer|xdmp:node-uri|xdmp:node-replace|xdmp:node-kind|xdmp:node-insert-child|xdmp:node-insert-before|xdmp:node-insert-after|xdmp:node-delete|xdmp:node-database|xdmp:mul64|xdmp:modules-root|xdmp:modules-database|xdmp:merging|xdmp:merge-cancel|xdmp:merge|xdmp:md5|xdmp:logout|xdmp:login|xdmp:log-level|xdmp:log|xdmp:lock-release|xdmp:lock-acquire|xdmp:load|xdmp:invoke-in|xdmp:invoke|xdmp:integer-to-octal|xdmp:integer-to-hex|xdmp:http-put|xdmp:http-post|xdmp:http-options|xdmp:http-head|xdmp:http-get|xdmp:http-delete|xdmp:hosts|xdmp:host-status|xdmp:host-name|xdmp:host|xdmp:hex-to-integer|xdmp:hash64|xdmp:hash32|xdmp:has-privilege|xdmp:groups|xdmp:group-serves|xdmp:group-servers|xdmp:group-name|xdmp:group-hosts|xdmp:group|xdmp:get-session-field-names|xdmp:get-session-field|xdmp:get-response-encoding|xdmp:get-response-code|xdmp:get-request-username|xdmp:get-request-user|xdmp:get-request-url|xdmp:get-request-protocol|xdmp:get-request-path|xdmp:get-request-method|xdmp:get-request-header-names|xdmp:get-request-header|xdmp:get-request-field-names|xdmp:get-request-field-filename|xdmp:get-request-field-content-type|xdmp:get-request-field|xdmp:get-request-client-certificate|xdmp:get-request-client-address|xdmp:get-request-body|xdmp:get-current-user|xdmp:get-current-roles|xdmp:get|xdmp:function-name|xdmp:function-module|xdmp:function|xdmp:from-json|xdmp:forests|xdmp:forest-status|xdmp:forest-restore|xdmp:forest-restart|xdmp:forest-name|xdmp:forest-delete|xdmp:forest-databases|xdmp:forest-counts|xdmp:forest-clear|xdmp:forest-backup|xdmp:forest|xdmp:filesystem-file|xdmp:filesystem-directory|xdmp:exists|xdmp:excel-convert|xdmp:eval-in|xdmp:eval|xdmp:estimate|xdmp:email|xdmp:element-content-type|xdmp:elapsed-time|xdmp:document-set-quality|xdmp:document-set-property|xdmp:document-set-properties|xdmp:document-set-permissions|xdmp:document-set-collections|xdmp:document-remove-properties|xdmp:document-remove-permissions|xdmp:document-remove-collections|xdmp:document-properties|xdmp:document-locks|xdmp:document-load|xdmp:document-insert|xdmp:document-get-quality|xdmp:document-get-properties|xdmp:document-get-permissions|xdmp:document-get-collections|xdmp:document-get|xdmp:document-forest|xdmp:document-delete|xdmp:document-add-properties|xdmp:document-add-permissions|xdmp:document-add-collections|xdmp:directory-properties|xdmp:directory-locks|xdmp:directory-delete|xdmp:directory-create|xdmp:directory|xdmp:diacritic-less|xdmp:describe|xdmp:default-permissions|xdmp:default-collections|xdmp:databases|xdmp:database-restore-validate|xdmp:database-restore-status|xdmp:database-restore-cancel|xdmp:database-restore|xdmp:database-name|xdmp:database-forests|xdmp:database-backup-validate|xdmp:database-backup-status|xdmp:database-backup-purge|xdmp:database-backup-cancel|xdmp:database-backup|xdmp:database|xdmp:collection-properties|xdmp:collection-locks|xdmp:collection-delete|xdmp:collation-canonical-uri|xdmp:castable-as|xdmp:can-grant-roles|xdmp:base64-encode|xdmp:base64-decode|xdmp:architecture|xdmp:apply|xdmp:amp-roles|xdmp:amp|xdmp:add64|xdmp:add-response-header|xdmp:access|trgr:trigger-set-recursive|trgr:trigger-set-permissions|trgr:trigger-set-name|trgr:trigger-set-module|trgr:trigger-set-event|trgr:trigger-set-description|trgr:trigger-remove-permissions|trgr:trigger-module|trgr:trigger-get-permissions|trgr:trigger-enable|trgr:trigger-disable|trgr:trigger-database-online-event|trgr:trigger-data-event|trgr:trigger-add-permissions|trgr:remove-trigger|trgr:property-content|trgr:pre-commit|trgr:post-commit|trgr:get-trigger-by-id|trgr:get-trigger|trgr:document-scope|trgr:document-content|trgr:directory-scope|trgr:create-trigger|trgr:collection-scope|trgr:any-property-content|thsr:set-entry|thsr:remove-term|thsr:remove-synonym|thsr:remove-entry|thsr:query-lookup|thsr:lookup|thsr:load|thsr:insert|thsr:expand|thsr:add-synonym|spell:suggest-detailed|spell:suggest|spell:remove-word|spell:make-dictionary|spell:load|spell:levenshtein-distance|spell:is-correct|spell:insert|spell:double-metaphone|spell:add-word|sec:users-collection|sec:user-set-roles|sec:user-set-password|sec:user-set-name|sec:user-set-description|sec:user-set-default-permissions|sec:user-set-default-collections|sec:user-remove-roles|sec:user-privileges|sec:user-get-roles|sec:user-get-description|sec:user-get-default-permissions|sec:user-get-default-collections|sec:user-doc-permissions|sec:user-doc-collections|sec:user-add-roles|sec:unprotect-collection|sec:uid-for-name|sec:set-realm|sec:security-version|sec:security-namespace|sec:security-installed|sec:security-collection|sec:roles-collection|sec:role-set-roles|sec:role-set-name|sec:role-set-description|sec:role-set-default-permissions|sec:role-set-default-collections|sec:role-remove-roles|sec:role-privileges|sec:role-get-roles|sec:role-get-description|sec:role-get-default-permissions|sec:role-get-default-collections|sec:role-doc-permissions|sec:role-doc-collections|sec:role-add-roles|sec:remove-user|sec:remove-role-from-users|sec:remove-role-from-role|sec:remove-role-from-privileges|sec:remove-role-from-amps|sec:remove-role|sec:remove-privilege|sec:remove-amp|sec:protect-collection|sec:privileges-collection|sec:privilege-set-roles|sec:privilege-set-name|sec:privilege-remove-roles|sec:privilege-get-roles|sec:privilege-add-roles|sec:priv-doc-permissions|sec:priv-doc-collections|sec:get-user-names|sec:get-unique-elem-id|sec:get-role-names|sec:get-role-ids|sec:get-privilege|sec:get-distinct-permissions|sec:get-collection|sec:get-amp|sec:create-user-with-role|sec:create-user|sec:create-role|sec:create-privilege|sec:create-amp|sec:collections-collection|sec:collection-set-permissions|sec:collection-remove-permissions|sec:collection-get-permissions|sec:collection-add-permissions|sec:check-admin|sec:amps-collection|sec:amp-set-roles|sec:amp-remove-roles|sec:amp-get-roles|sec:amp-doc-permissions|sec:amp-doc-collections|sec:amp-add-roles|search:unparse|search:suggest|search:snippet|search:search|search:resolve-nodes|search:resolve|search:remove-constraint|search:parse|search:get-default-options|search:estimate|search:check-options|prof:value|prof:reset|prof:report|prof:invoke|prof:eval|prof:enable|prof:disable|prof:allowed|ppt:clean|pki:template-set-request|pki:template-set-name|pki:template-set-key-type|pki:template-set-key-options|pki:template-set-description|pki:template-in-use|pki:template-get-version|pki:template-get-request|pki:template-get-name|pki:template-get-key-type|pki:template-get-key-options|pki:template-get-id|pki:template-get-description|pki:need-certificate|pki:is-temporary|pki:insert-trusted-certificates|pki:insert-template|pki:insert-signed-certificates|pki:insert-certificate-revocation-list|pki:get-trusted-certificate-ids|pki:get-template-ids|pki:get-template-certificate-authority|pki:get-template-by-name|pki:get-template|pki:get-pending-certificate-requests-xml|pki:get-pending-certificate-requests-pem|pki:get-pending-certificate-request|pki:get-certificates-for-template-xml|pki:get-certificates-for-template|pki:get-certificates|pki:get-certificate-xml|pki:get-certificate-pem|pki:get-certificate|pki:generate-temporary-certificate-if-necessary|pki:generate-temporary-certificate|pki:generate-template-certificate-authority|pki:generate-certificate-request|pki:delete-template|pki:delete-certificate|pki:create-template|pdf:make-toc|pdf:insert-toc-headers|pdf:get-toc|pdf:clean|p:status-transition|p:state-transition|p:remove|p:pipelines|p:insert|p:get-by-id|p:get|p:execute|p:create|p:condition|p:collection|p:action|ooxml:runs-merge|ooxml:package-uris|ooxml:package-parts-insert|ooxml:package-parts|msword:clean|mcgm:polygon|mcgm:point|mcgm:geospatial-query-from-elements|mcgm:geospatial-query|mcgm:circle|math:tanh|math:tan|math:sqrt|math:sinh|math:sin|math:pow|math:modf|math:log10|math:log|math:ldexp|math:frexp|math:fmod|math:floor|math:fabs|math:exp|math:cosh|math:cos|math:ceil|math:atan2|math:atan|math:asin|math:acos|map:put|map:map|map:keys|map:get|map:delete|map:count|map:clear|lnk:to|lnk:remove|lnk:insert|lnk:get|lnk:from|lnk:create|kml:polygon|kml:point|kml:interior-polygon|kml:geospatial-query-from-elements|kml:geospatial-query|kml:circle|kml:box|gml:polygon|gml:point|gml:interior-polygon|gml:geospatial-query-from-elements|gml:geospatial-query|gml:circle|gml:box|georss:point|georss:geospatial-query|georss:circle|geo:polygon|geo:point|geo:interior-polygon|geo:geospatial-query-from-elements|geo:geospatial-query|geo:circle|geo:box|fn:zero-or-one|fn:years-from-duration|fn:year-from-dateTime|fn:year-from-date|fn:upper-case|fn:unordered|fn:true|fn:translate|fn:trace|fn:tokenize|fn:timezone-from-time|fn:timezone-from-dateTime|fn:timezone-from-date|fn:sum|fn:subtract-dateTimes-yielding-yearMonthDuration|fn:subtract-dateTimes-yielding-dayTimeDuration|fn:substring-before|fn:substring-after|fn:substring|fn:subsequence|fn:string-to-codepoints|fn:string-pad|fn:string-length|fn:string-join|fn:string|fn:static-base-uri|fn:starts-with|fn:seconds-from-time|fn:seconds-from-duration|fn:seconds-from-dateTime|fn:round-half-to-even|fn:round|fn:root|fn:reverse|fn:resolve-uri|fn:resolve-QName|fn:replace|fn:remove|fn:QName|fn:prefix-from-QName|fn:position|fn:one-or-more|fn:number|fn:not|fn:normalize-unicode|fn:normalize-space|fn:node-name|fn:node-kind|fn:nilled|fn:namespace-uri-from-QName|fn:namespace-uri-for-prefix|fn:namespace-uri|fn:name|fn:months-from-duration|fn:month-from-dateTime|fn:month-from-date|fn:minutes-from-time|fn:minutes-from-duration|fn:minutes-from-dateTime|fn:min|fn:max|fn:matches|fn:lower-case|fn:local-name-from-QName|fn:local-name|fn:last|fn:lang|fn:iri-to-uri|fn:insert-before|fn:index-of|fn:in-scope-prefixes|fn:implicit-timezone|fn:idref|fn:id|fn:hours-from-time|fn:hours-from-duration|fn:hours-from-dateTime|fn:floor|fn:false|fn:expanded-QName|fn:exists|fn:exactly-one|fn:escape-uri|fn:escape-html-uri|fn:error|fn:ends-with|fn:encode-for-uri|fn:empty|fn:document-uri|fn:doc-available|fn:doc|fn:distinct-values|fn:distinct-nodes|fn:default-collation|fn:deep-equal|fn:days-from-duration|fn:day-from-dateTime|fn:day-from-date|fn:data|fn:current-time|fn:current-dateTime|fn:current-date|fn:count|fn:contains|fn:concat|fn:compare|fn:collection|fn:codepoints-to-string|fn:codepoint-equal|fn:ceiling|fn:boolean|fn:base-uri|fn:avg|fn:adjust-time-to-timezone|fn:adjust-dateTime-to-timezone|fn:adjust-date-to-timezone|fn:abs|feed:unsubscribe|feed:subscription|feed:subscribe|feed:request|feed:item|feed:description|excel:clean|entity:enrich|dom:set-pipelines|dom:set-permissions|dom:set-name|dom:set-evaluation-context|dom:set-domain-scope|dom:set-description|dom:remove-pipeline|dom:remove-permissions|dom:remove|dom:get|dom:evaluation-context|dom:domains|dom:domain-scope|dom:create|dom:configuration-set-restart-user|dom:configuration-set-permissions|dom:configuration-set-evaluation-context|dom:configuration-set-default-domain|dom:configuration-get|dom:configuration-create|dom:collection|dom:add-pipeline|dom:add-permissions|dls:retention-rules|dls:retention-rule-remove|dls:retention-rule-insert|dls:retention-rule|dls:purge|dls:node-expand|dls:link-references|dls:link-expand|dls:documents-query|dls:document-versions-query|dls:document-version-uri|dls:document-version-query|dls:document-version-delete|dls:document-version-as-of|dls:document-version|dls:document-update|dls:document-unmanage|dls:document-set-quality|dls:document-set-property|dls:document-set-properties|dls:document-set-permissions|dls:document-set-collections|dls:document-retention-rules|dls:document-remove-properties|dls:document-remove-permissions|dls:document-remove-collections|dls:document-purge|dls:document-manage|dls:document-is-managed|dls:document-insert-and-manage|dls:document-include-query|dls:document-history|dls:document-get-permissions|dls:document-extract-part|dls:document-delete|dls:document-checkout-status|dls:document-checkout|dls:document-checkin|dls:document-add-properties|dls:document-add-permissions|dls:document-add-collections|dls:break-checkout|dls:author-query|dls:as-of-query|dbk:convert|dbg:wait|dbg:value|dbg:stopped|dbg:stop|dbg:step|dbg:status|dbg:stack|dbg:out|dbg:next|dbg:line|dbg:invoke|dbg:function|dbg:finish|dbg:expr|dbg:eval|dbg:disconnect|dbg:detach|dbg:continue|dbg:connect|dbg:clear|dbg:breakpoints|dbg:break|dbg:attached|dbg:attach|cvt:save-converted-documents|cvt:part-uri|cvt:destination-uri|cvt:basepath|cvt:basename|cts:words|cts:word-query-weight|cts:word-query-text|cts:word-query-options|cts:word-query|cts:word-match|cts:walk|cts:uris|cts:uri-match|cts:train|cts:tokenize|cts:thresholds|cts:stem|cts:similar-query-weight|cts:similar-query-nodes|cts:similar-query|cts:shortest-distance|cts:search|cts:score|cts:reverse-query-weight|cts:reverse-query-nodes|cts:reverse-query|cts:remainder|cts:registered-query-weight|cts:registered-query-options|cts:registered-query-ids|cts:registered-query|cts:register|cts:query|cts:quality|cts:properties-query-query|cts:properties-query|cts:polygon-vertices|cts:polygon|cts:point-longitude|cts:point-latitude|cts:point|cts:or-query-queries|cts:or-query|cts:not-query-weight|cts:not-query-query|cts:not-query|cts:near-query-weight|cts:near-query-queries|cts:near-query-options|cts:near-query-distance|cts:near-query|cts:highlight|cts:geospatial-co-occurrences|cts:frequency|cts:fitness|cts:field-words|cts:field-word-query-weight|cts:field-word-query-text|cts:field-word-query-options|cts:field-word-query-field-name|cts:field-word-query|cts:field-word-match|cts:entity-highlight|cts:element-words|cts:element-word-query-weight|cts:element-word-query-text|cts:element-word-query-options|cts:element-word-query-element-name|cts:element-word-query|cts:element-word-match|cts:element-values|cts:element-value-ranges|cts:element-value-query-weight|cts:element-value-query-text|cts:element-value-query-options|cts:element-value-query-element-name|cts:element-value-query|cts:element-value-match|cts:element-value-geospatial-co-occurrences|cts:element-value-co-occurrences|cts:element-range-query-weight|cts:element-range-query-value|cts:element-range-query-options|cts:element-range-query-operator|cts:element-range-query-element-name|cts:element-range-query|cts:element-query-query|cts:element-query-element-name|cts:element-query|cts:element-pair-geospatial-values|cts:element-pair-geospatial-value-match|cts:element-pair-geospatial-query-weight|cts:element-pair-geospatial-query-region|cts:element-pair-geospatial-query-options|cts:element-pair-geospatial-query-longitude-name|cts:element-pair-geospatial-query-latitude-name|cts:element-pair-geospatial-query-element-name|cts:element-pair-geospatial-query|cts:element-pair-geospatial-boxes|cts:element-geospatial-values|cts:element-geospatial-value-match|cts:element-geospatial-query-weight|cts:element-geospatial-query-region|cts:element-geospatial-query-options|cts:element-geospatial-query-element-name|cts:element-geospatial-query|cts:element-geospatial-boxes|cts:element-child-geospatial-values|cts:element-child-geospatial-value-match|cts:element-child-geospatial-query-weight|cts:element-child-geospatial-query-region|cts:element-child-geospatial-query-options|cts:element-child-geospatial-query-element-name|cts:element-child-geospatial-query-child-name|cts:element-child-geospatial-query|cts:element-child-geospatial-boxes|cts:element-attribute-words|cts:element-attribute-word-query-weight|cts:element-attribute-word-query-text|cts:element-attribute-word-query-options|cts:element-attribute-word-query-element-name|cts:element-attribute-word-query-attribute-name|cts:element-attribute-word-query|cts:element-attribute-word-match|cts:element-attribute-values|cts:element-attribute-value-ranges|cts:element-attribute-value-query-weight|cts:element-attribute-value-query-text|cts:element-attribute-value-query-options|cts:element-attribute-value-query-element-name|cts:element-attribute-value-query-attribute-name|cts:element-attribute-value-query|cts:element-attribute-value-match|cts:element-attribute-value-geospatial-co-occurrences|cts:element-attribute-value-co-occurrences|cts:element-attribute-range-query-weight|cts:element-attribute-range-query-value|cts:element-attribute-range-query-options|cts:element-attribute-range-query-operator|cts:element-attribute-range-query-element-name|cts:element-attribute-range-query-attribute-name|cts:element-attribute-range-query|cts:element-attribute-pair-geospatial-values|cts:element-attribute-pair-geospatial-value-match|cts:element-attribute-pair-geospatial-query-weight|cts:element-attribute-pair-geospatial-query-region|cts:element-attribute-pair-geospatial-query-options|cts:element-attribute-pair-geospatial-query-longitude-name|cts:element-attribute-pair-geospatial-query-latitude-name|cts:element-attribute-pair-geospatial-query-element-name|cts:element-attribute-pair-geospatial-query|cts:element-attribute-pair-geospatial-boxes|cts:document-query-uris|cts:document-query|cts:distance|cts:directory-query-uris|cts:directory-query-depth|cts:directory-query|cts:destination|cts:deregister|cts:contains|cts:confidence|cts:collections|cts:collection-query-uris|cts:collection-query|cts:collection-match|cts:classify|cts:circle-radius|cts:circle-center|cts:circle|cts:box-west|cts:box-south|cts:box-north|cts:box-east|cts:box|cts:bearing|cts:arc-intersection|cts:and-query-queries|cts:and-query-options|cts:and-query|cts:and-not-query-positive-query|cts:and-not-query-negative-query|cts:and-not-query|css:get|css:convert|cpf:success|cpf:failure|cpf:document-set-state|cpf:document-set-processing-status|cpf:document-set-last-updated|cpf:document-set-error|cpf:document-get-state|cpf:document-get-processing-status|cpf:document-get-last-updated|cpf:document-get-error|cpf:check-transition|alert:spawn-matching-actions|alert:rule-user-id-query|alert:rule-set-user-id|alert:rule-set-query|alert:rule-set-options|alert:rule-set-name|alert:rule-set-description|alert:rule-set-action|alert:rule-remove|alert:rule-name-query|alert:rule-insert|alert:rule-id-query|alert:rule-get-user-id|alert:rule-get-query|alert:rule-get-options|alert:rule-get-name|alert:rule-get-id|alert:rule-get-description|alert:rule-get-action|alert:rule-action-query|alert:remove-triggers|alert:make-rule|alert:make-log-action|alert:make-config|alert:make-action|alert:invoke-matching-actions|alert:get-my-rules|alert:get-all-rules|alert:get-actions|alert:find-matching-rules|alert:create-triggers|alert:config-set-uri|alert:config-set-trigger-ids|alert:config-set-options|alert:config-set-name|alert:config-set-description|alert:config-set-cpf-domain-names|alert:config-set-cpf-domain-ids|alert:config-insert|alert:config-get-uri|alert:config-get-trigger-ids|alert:config-get-options|alert:config-get-name|alert:config-get-id|alert:config-get-description|alert:config-get-cpf-domain-names|alert:config-get-cpf-domain-ids|alert:config-get|alert:config-delete|alert:action-set-options|alert:action-set-name|alert:action-set-module-root|alert:action-set-module-db|alert:action-set-module|alert:action-set-description|alert:action-remove|alert:action-insert|alert:action-get-options|alert:action-get-name|alert:action-get-module-root|alert:action-get-module-db|alert:action-get-module|alert:action-get-description|zero-or-one|years-from-duration|year-from-dateTime|year-from-date|upper-case|unordered|true|translate|trace|tokenize|timezone-from-time|timezone-from-dateTime|timezone-from-date|sum|subtract-dateTimes-yielding-yearMonthDuration|subtract-dateTimes-yielding-dayTimeDuration|substring-before|substring-after|substring|subsequence|string-to-codepoints|string-pad|string-length|string-join|string|static-base-uri|starts-with|seconds-from-time|seconds-from-duration|seconds-from-dateTime|round-half-to-even|round|root|reverse|resolve-uri|resolve-QName|replace|remove|QName|prefix-from-QName|position|one-or-more|number|not|normalize-unicode|normalize-space|node-name|node-kind|nilled|namespace-uri-from-QName|namespace-uri-for-prefix|namespace-uri|name|months-from-duration|month-from-dateTime|month-from-date|minutes-from-time|minutes-from-duration|minutes-from-dateTime|min|max|matches|lower-case|local-name-from-QName|local-name|last|lang|iri-to-uri|insert-before|index-of|in-scope-prefixes|implicit-timezone|idref|id|hours-from-time|hours-from-duration|hours-from-dateTime|floor|false|expanded-QName|exists|exactly-one|escape-uri|escape-html-uri|error|ends-with|encode-for-uri|empty|document-uri|doc-available|doc|distinct-values|distinct-nodes|default-collation|deep-equal|days-from-duration|day-from-dateTime|day-from-date|data|current-time|current-dateTime|current-date|count|contains|concat|compare|collection|codepoints-to-string|codepoint-equal|ceiling|boolean|base-uri|avg|adjust-time-to-timezone|adjust-dateTime-to-timezone|adjust-date-to-timezone|abs)\\b/],\n         // Matching normal words if none of the previous regular expressions matched\n         [PR['PR_PLAIN'], /^[A-Za-z0-9_\\-\\:]+/],\n         // Matching whitespaces\n         [PR['PR_PLAIN'], /^[\\t\\n\\r \\xA0]+/]\n         ]),\n    ['xq', 'xquery']);\n})();\n</text></\\>"},{"_content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n","source":"plugins/prettify/prettify.css","raw":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n","date":"2018-04-24T14:27:38.071Z","updated":"2018-04-24T14:27:38.071Z","path":"plugins/prettify/prettify.css","layout":"false","title":"","comments":1,"_id":"cjgfb6092001sa4vb0h82ybtv","content":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* Pretty printing styles. Used with prettify.js. */\n\n\n/* SPAN elements with the classes below are added by prettyprint. */\n.pln { color: #000 }  /* plain text */\n\n@media screen {\n  .str { color: #080 }  /* string content */\n  .kwd { color: #008 }  /* a keyword */\n  .com { color: #800 }  /* a comment */\n  .typ { color: #606 }  /* a type name */\n  .lit { color: #066 }  /* a literal value */\n  /* punctuation, lisp open bracket, lisp close bracket */\n  .pun, .opn, .clo { color: #660 }\n  .tag { color: #008 }  /* a markup tag name */\n  .atn { color: #606 }  /* a markup attribute name */\n  .atv { color: #080 }  /* a markup attribute value */\n  .dec, .var { color: #606 }  /* a declaration; a variable name */\n  .fun { color: red }  /* a function name */\n}\n\n/* Use higher contrast and text-weight for printable form. */\n@media print, projection {\n  .str { color: #060 }\n  .kwd { color: #006; font-weight: bold }\n  .com { color: #600; font-style: italic }\n  .typ { color: #404; font-weight: bold }\n  .lit { color: #044 }\n  .pun, .opn, .clo { color: #440 }\n  .tag { color: #006; font-weight: bold }\n  .atn { color: #404 }\n  .atv { color: #060 }\n}\n\n/* Put a border around prettyprinted code snippets. */\npre.prettyprint { padding: 2px; border: 1px solid #888 }\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums { margin-top: 0; margin-bottom: 0 } /* IE indents via margin-left */\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L5,\nli.L6,\nli.L7,\nli.L8 { list-style-type: none }\n/* Alternate shading for lines */\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 { background: #eee }\n"},{"_content":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n","source":"plugins/prettify/lang-yaml.js","raw":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n","date":"2018-04-24T14:27:38.069Z","updated":"2018-04-24T14:27:38.069Z","path":"plugins/prettify/lang-yaml.js","layout":"false","title":"","comments":1,"_id":"cjgfb6093001ta4vbwwhwfhzt","content":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2015 ribrdb @ code.google.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Contributed by ribrdb @ code.google.com\n\n/**\n * @fileoverview\n * Registers a language handler for YAML.\n *\n * @author ribrdb\n */\n\nPR['registerLangHandler'](\n  PR['createSimpleLexer'](\n    [\n      [PR['PR_PUNCTUATION'], /^[:|>?]+/, null, ':|>?'],\n      [PR['PR_DECLARATION'],  /^%(?:YAML|TAG)[^#\\r\\n]+/, null, '%'],\n      [PR['PR_TYPE'], /^[&]\\S+/, null, '&'],\n      [PR['PR_TYPE'], /^!\\S*/, null, '!'],\n      [PR['PR_STRING'], /^\"(?:[^\\\\\"]|\\\\.)*(?:\"|$)/, null, '\"'],\n      [PR['PR_STRING'], /^'(?:[^']|'')*(?:'|$)/, null, \"'\"],\n      [PR['PR_COMMENT'], /^#[^\\r\\n]*/, null, '#'],\n      [PR['PR_PLAIN'], /^\\s+/, null, ' \\t\\r\\n']\n    ],\n    [\n      [PR['PR_DECLARATION'], /^(?:---|\\.\\.\\.)(?:[\\r\\n]|$)/],\n      [PR['PR_PUNCTUATION'], /^-/],\n      [PR['PR_KEYWORD'], /^[\\w-]+:[ \\r\\n]/],\n      [PR['PR_PLAIN'], /^\\w+/]\n    ]), ['yaml', 'yml']);\n"},{"_content":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n","source":"plugins/prettify/node_prettify.js","raw":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n","date":"2018-04-24T14:27:38.071Z","updated":"2018-04-24T14:27:38.071Z","path":"plugins/prettify/node_prettify.js","layout":"false","title":"","comments":1,"_id":"cjgfb6096001ua4vbdrimo9pv","content":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1=\"\" 2=\"\" 65=\"\" c1=\"\" &&=\"\" <=\"7\" )=\"\" {=\"\" return=\"\" parseint(charsetpart.substring(1),=\"\" 8);=\"\" }=\"\" else=\"\" if=\"\" (c1=\"==\" 'u'=\"\" ||=\"\" 'x')=\"\" parseint(charsetpart.substring(2),=\"\" 16);=\"\" charsetpart.charcodeat(1);=\"\" function=\"\" encodeescape(charcode)=\"\" (charcode=\"\" 0x20)=\"\" 0x10=\"\" ?=\"\" '\\\\x0'=\"\" :=\"\" '\\\\x')=\"\" +=\"\" charcode.tostring(16);=\"\" var=\"\" ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\'=\"\" '-'=\"\" ']'=\"\" '^')=\"\" \"\\\\\"=\"\" ch;=\"\" casefoldcharset(charset)=\"\" charsetparts=\"charSet.substring(1,\" charset.length=\"\" -=\"\" 1).match(=\"\" new=\"\" regexp(=\"\" '\\\\\\\\u[0-9a-fa-f]{4}'=\"\" '|\\\\\\\\x[0-9a-fa-f]{2}'=\"\" '|\\\\\\\\[0-3][0-7]{0,2}'=\"\" '|\\\\\\\\[0-7]{1,2}'=\"\" '|\\\\\\\\[\\\\s\\\\s]'=\"\" '|-'=\"\" '|[^-\\\\\\\\]',=\"\" 'g'));=\"\" ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^';=\"\" out=\"['['];\" (inverse)=\"\" out.push('^');=\"\" for=\"\" (var=\"\" i=\"inverse\" 0,=\"\" n=\"charsetParts.length;\" n;=\"\" ++i)=\"\" p=\"charsetParts[i];\" (=\"\" \\\\[bdsw]=\"\" i.test(p))=\"\" don't=\"\" muck=\"\" with=\"\" named=\"\" groups.=\"\" out.push(p);=\"\" start=\"decodeEscape(p);\" end;=\"\" (i=\"\" charsetparts[i=\"\" 1])=\"\" end=\"decodeEscape(charsetParts[i\" 2]);=\"\" ranges.push([start,=\"\" end]);=\"\" the=\"\" range=\"\" might=\"\" intersect=\"\" letters,=\"\" then=\"\" expand=\"\" it.=\"\" this=\"\" case=\"\" handling=\"\" is=\"\" too=\"\" simplistic.=\"\" it=\"\" does=\"\" not=\"\" deal=\"\" non-latin=\"\" folding.=\"\" works=\"\" latin=\"\" source=\"\" code=\"\" identifiers=\"\" though.=\"\" (!(end=\"\"> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1]=\"\" +=\"\" 1)=\"\" {=\"\" range[1]);=\"\" }=\"\" else=\"\" consolidatedranges.push(lastrange=\"range);\" for=\"\" (var=\"\" i=\"0;\" <=\"\" consolidatedranges.length;=\"\" ++i)=\"\" var=\"\" range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0]));=\"\" if=\"\" (range[1]=\"\"> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex)=\"\" {=\"\" capturedgroups[decimalvalue]=\"-1;\" }=\"\" else=\"\" replace=\"\" with=\"\" an=\"\" unambiguous=\"\" escape=\"\" sequence=\"\" so=\"\" that=\"\" octal=\"\" does=\"\" not=\"\" turn=\"\" into=\"\" a=\"\" backreference=\"\" to=\"\" capturing=\"\" group=\"\" from=\"\" earlier=\"\" regex.=\"\" parts[i]=\"encodeEscape(decimalValue);\" renumber=\"\" groups=\"\" and=\"\" reduce=\"\" non-capturing=\"\" where=\"\" possible.=\"\" for=\"\" (var=\"\" i=\"1;\" <=\"\" capturedgroups.length;=\"\" ++i)=\"\" if=\"\" (-1=\"==\" capturedgroups[i])=\"\" capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n;=\"\" var=\"\" p=\"parts[i];\" (p=\"==\" '(')=\"\" ++groupindex;=\"\" (!capturedgroups[groupindex])=\"\" ;=\"\" ('\\\\'=\"==\" p.charat(0))=\"\" decimalvalue=\"+p.substring(1);\" (decimalvalue=\"\" &&=\"\" +=\"\" capturedgroups[decimalvalue];=\"\" remove=\"\" any=\"\" prefix=\"\" anchors=\"\" the=\"\" output=\"\" will=\"\" match=\"\" anywhere.=\"\" ^^=\"\" really=\"\" mean=\"\" anchored=\"\" though.=\"\" ('^'=\"==\" '^'=\"\" !=\"=\" parts[i=\"\" 1])=\"\" expand=\"\" letters=\"\" handle=\"\" mixing=\"\" of=\"\" case-sensitive=\"\" case-insensitive=\"\" patterns=\"\" necessary.=\"\" (regex.ignorecase=\"\" needtofoldcase)=\"\" ch0=\"p.charAt(0);\" (p.length=\"\">= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...=\"\">} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1=\"\" index_n,=\"\" and=\"\" style_n-1=\"\" applies=\"\" to=\"\" *=\"\" all=\"\" characters=\"\" in=\"\" sourcecode[index_n-1:index_n].=\"\" the=\"\" stylepatterns=\"\" is=\"\" a=\"\" list=\"\" whose=\"\" elements=\"\" have=\"\" form=\"\" [style=\"\" :=\"\" string,=\"\" pattern=\"\" regexp,=\"\" deprecated,=\"\" shortcut=\"\" string].=\"\" style=\"\" constant=\"\" like=\"\" pr_plain,=\"\" or=\"\" can=\"\" be=\"\" string=\"\" of=\"\" 'lang-foo',=\"\" where=\"\" foo=\"\" language=\"\" extension=\"\" describing=\"\" portion=\"\" token=\"\" $1=\"\" after=\"\" executes.=\"\" e.g.,=\"\" if=\"\" 'lang-lisp',=\"\" group=\"\" contains=\"\" text=\"\" '(hello=\"\" (world))',=\"\" then=\"\" that=\"\" will=\"\" passed=\"\" registered=\"\" lisp=\"\" handler=\"\" for=\"\" formatting.=\"\" before=\"\" restyled=\"\" using=\"\" this=\"\" decorator=\"\" so=\"\" decorators=\"\" should=\"\" take=\"\" care=\"\" doesn't=\"\" result=\"\" infinite=\"\" recursion.=\"\" example,=\"\" html=\"\" lexer=\"\" rule=\"\" script=\"\" looks=\"\" something=\"\" ['lang-js',=\"\" <[s]cript=\"\">(.+?)<\\ script=\"\">/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n</script></\\></=></code></pre></p></pre></code></pre></p>","site":{"data":{}},"excerpt":"","more":"\nvar IN_GLOBAL_SCOPE = false;\n\n/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1=\"\" 2=\"\" 65=\"\" c1=\"\" &&=\"\" <=\"7\" )=\"\" {=\"\" return=\"\" parseint(charsetpart.substring(1),=\"\" 8);=\"\" }=\"\" else=\"\" if=\"\" (c1=\"==\" 'u'=\"\" ||=\"\" 'x')=\"\" parseint(charsetpart.substring(2),=\"\" 16);=\"\" charsetpart.charcodeat(1);=\"\" function=\"\" encodeescape(charcode)=\"\" (charcode=\"\" 0x20)=\"\" 0x10=\"\" ?=\"\" '\\\\x0'=\"\" :=\"\" '\\\\x')=\"\" +=\"\" charcode.tostring(16);=\"\" var=\"\" ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\'=\"\" '-'=\"\" ']'=\"\" '^')=\"\" \"\\\\\"=\"\" ch;=\"\" casefoldcharset(charset)=\"\" charsetparts=\"charSet.substring(1,\" charset.length=\"\" -=\"\" 1).match(=\"\" new=\"\" regexp(=\"\" '\\\\\\\\u[0-9a-fa-f]{4}'=\"\" '|\\\\\\\\x[0-9a-fa-f]{2}'=\"\" '|\\\\\\\\[0-3][0-7]{0,2}'=\"\" '|\\\\\\\\[0-7]{1,2}'=\"\" '|\\\\\\\\[\\\\s\\\\s]'=\"\" '|-'=\"\" '|[^-\\\\\\\\]',=\"\" 'g'));=\"\" ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^';=\"\" out=\"['['];\" (inverse)=\"\" out.push('^');=\"\" for=\"\" (var=\"\" i=\"inverse\" 0,=\"\" n=\"charsetParts.length;\" n;=\"\" ++i)=\"\" p=\"charsetParts[i];\" (=\"\" \\\\[bdsw]=\"\" i.test(p))=\"\" don't=\"\" muck=\"\" with=\"\" named=\"\" groups.=\"\" out.push(p);=\"\" start=\"decodeEscape(p);\" end;=\"\" (i=\"\" charsetparts[i=\"\" 1])=\"\" end=\"decodeEscape(charsetParts[i\" 2]);=\"\" ranges.push([start,=\"\" end]);=\"\" the=\"\" range=\"\" might=\"\" intersect=\"\" letters,=\"\" then=\"\" expand=\"\" it.=\"\" this=\"\" case=\"\" handling=\"\" is=\"\" too=\"\" simplistic.=\"\" it=\"\" does=\"\" not=\"\" deal=\"\" non-latin=\"\" folding.=\"\" works=\"\" latin=\"\" source=\"\" code=\"\" identifiers=\"\" though.=\"\" (!(end=\"\"> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1]=\"\" +=\"\" 1)=\"\" {=\"\" range[1]);=\"\" }=\"\" else=\"\" consolidatedranges.push(lastrange=\"range);\" for=\"\" (var=\"\" i=\"0;\" <=\"\" consolidatedranges.length;=\"\" ++i)=\"\" var=\"\" range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0]));=\"\" if=\"\" (range[1]=\"\"> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex)=\"\" {=\"\" capturedgroups[decimalvalue]=\"-1;\" }=\"\" else=\"\" replace=\"\" with=\"\" an=\"\" unambiguous=\"\" escape=\"\" sequence=\"\" so=\"\" that=\"\" octal=\"\" does=\"\" not=\"\" turn=\"\" into=\"\" a=\"\" backreference=\"\" to=\"\" capturing=\"\" group=\"\" from=\"\" earlier=\"\" regex.=\"\" parts[i]=\"encodeEscape(decimalValue);\" renumber=\"\" groups=\"\" and=\"\" reduce=\"\" non-capturing=\"\" where=\"\" possible.=\"\" for=\"\" (var=\"\" i=\"1;\" <=\"\" capturedgroups.length;=\"\" ++i)=\"\" if=\"\" (-1=\"==\" capturedgroups[i])=\"\" capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n;=\"\" var=\"\" p=\"parts[i];\" (p=\"==\" '(')=\"\" ++groupindex;=\"\" (!capturedgroups[groupindex])=\"\" ;=\"\" ('\\\\'=\"==\" p.charat(0))=\"\" decimalvalue=\"+p.substring(1);\" (decimalvalue=\"\" &&=\"\" +=\"\" capturedgroups[decimalvalue];=\"\" remove=\"\" any=\"\" prefix=\"\" anchors=\"\" the=\"\" output=\"\" will=\"\" match=\"\" anywhere.=\"\" ^^=\"\" really=\"\" mean=\"\" anchored=\"\" though.=\"\" ('^'=\"==\" '^'=\"\" !=\"=\" parts[i=\"\" 1])=\"\" expand=\"\" letters=\"\" handle=\"\" mixing=\"\" of=\"\" case-sensitive=\"\" case-insensitive=\"\" patterns=\"\" necessary.=\"\" (regex.ignorecase=\"\" needtofoldcase)=\"\" ch0=\"p.charAt(0);\" (p.length=\"\">= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...=\"\">} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1=\"\" index_n,=\"\" and=\"\" style_n-1=\"\" applies=\"\" to=\"\" *=\"\" all=\"\" characters=\"\" in=\"\" sourcecode[index_n-1:index_n].=\"\" the=\"\" stylepatterns=\"\" is=\"\" a=\"\" list=\"\" whose=\"\" elements=\"\" have=\"\" form=\"\" [style=\"\" :=\"\" string,=\"\" pattern=\"\" regexp,=\"\" deprecated,=\"\" shortcut=\"\" string].=\"\" style=\"\" constant=\"\" like=\"\" pr_plain,=\"\" or=\"\" can=\"\" be=\"\" string=\"\" of=\"\" 'lang-foo',=\"\" where=\"\" foo=\"\" language=\"\" extension=\"\" describing=\"\" portion=\"\" token=\"\" $1=\"\" after=\"\" executes.=\"\" e.g.,=\"\" if=\"\" 'lang-lisp',=\"\" group=\"\" contains=\"\" text=\"\" '(hello=\"\" (world))',=\"\" then=\"\" that=\"\" will=\"\" passed=\"\" registered=\"\" lisp=\"\" handler=\"\" for=\"\" formatting.=\"\" before=\"\" restyled=\"\" using=\"\" this=\"\" decorator=\"\" so=\"\" decorators=\"\" should=\"\" take=\"\" care=\"\" doesn't=\"\" result=\"\" infinite=\"\" recursion.=\"\" example,=\"\" html=\"\" lexer=\"\" rule=\"\" script=\"\" looks=\"\" something=\"\" ['lang-js',=\"\" <[s]cript=\"\">(.+?)<\\ script=\"\">/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n\n\nvar path = require('path');\n\nmodule.exports = {\n  prettyPrint: prettyPrint,\n  prettyPrintOne: prettyPrintOne,\n  // include paths for css preprocessor support\n  includePaths: [\n    __dirname,\n    path.resolve(__dirname, '../styles')\n  ]\n};\n</script></\\></=></code></pre></p></pre></code></pre></p>"},{"_content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","source":"plugins/prettify/prettify.js","raw":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n\n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n\n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n\n      var out = ['['];\n      if (inverse) { out.push('^'); }\n\n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n\n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n\n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n\n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n\n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","date":"2018-04-24T14:27:38.073Z","updated":"2018-04-24T14:27:38.073Z","path":"plugins/prettify/prettify.js","layout":"false","title":"","comments":1,"_id":"cjgfb6097001va4vbht7ckz9z","content":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n * </dd></dt></dd></dt></dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1=\"\" 2=\"\" 65=\"\" c1=\"\" &&=\"\" <=\"7\" )=\"\" {=\"\" return=\"\" parseint(charsetpart.substring(1),=\"\" 8);=\"\" }=\"\" else=\"\" if=\"\" (c1=\"==\" 'u'=\"\" ||=\"\" 'x')=\"\" parseint(charsetpart.substring(2),=\"\" 16);=\"\" charsetpart.charcodeat(1);=\"\" function=\"\" encodeescape(charcode)=\"\" (charcode=\"\" 0x20)=\"\" 0x10=\"\" ?=\"\" '\\\\x0'=\"\" :=\"\" '\\\\x')=\"\" +=\"\" charcode.tostring(16);=\"\" var=\"\" ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\'=\"\" '-'=\"\" ']'=\"\" '^')=\"\" \"\\\\\"=\"\" ch;=\"\" casefoldcharset(charset)=\"\" charsetparts=\"charSet.substring(1,\" charset.length=\"\" -=\"\" 1).match(=\"\" new=\"\" regexp(=\"\" '\\\\\\\\u[0-9a-fa-f]{4}'=\"\" '|\\\\\\\\x[0-9a-fa-f]{2}'=\"\" '|\\\\\\\\[0-3][0-7]{0,2}'=\"\" '|\\\\\\\\[0-7]{1,2}'=\"\" '|\\\\\\\\[\\\\s\\\\s]'=\"\" '|-'=\"\" '|[^-\\\\\\\\]',=\"\" 'g'));=\"\" ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^';=\"\" out=\"['['];\" (inverse)=\"\" out.push('^');=\"\" for=\"\" (var=\"\" i=\"inverse\" 0,=\"\" n=\"charsetParts.length;\" n;=\"\" ++i)=\"\" p=\"charsetParts[i];\" (=\"\" \\\\[bdsw]=\"\" i.test(p))=\"\" don't=\"\" muck=\"\" with=\"\" named=\"\" groups.=\"\" out.push(p);=\"\" start=\"decodeEscape(p);\" end;=\"\" (i=\"\" charsetparts[i=\"\" 1])=\"\" end=\"decodeEscape(charsetParts[i\" 2]);=\"\" ranges.push([start,=\"\" end]);=\"\" the=\"\" range=\"\" might=\"\" intersect=\"\" letters,=\"\" then=\"\" expand=\"\" it.=\"\" this=\"\" case=\"\" handling=\"\" is=\"\" too=\"\" simplistic.=\"\" it=\"\" does=\"\" not=\"\" deal=\"\" non-latin=\"\" folding.=\"\" works=\"\" latin=\"\" source=\"\" code=\"\" identifiers=\"\" though.=\"\" (!(end=\"\"> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1]=\"\" +=\"\" 1)=\"\" {=\"\" range[1]);=\"\" }=\"\" else=\"\" consolidatedranges.push(lastrange=\"range);\" for=\"\" (var=\"\" i=\"0;\" <=\"\" consolidatedranges.length;=\"\" ++i)=\"\" var=\"\" range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0]));=\"\" if=\"\" (range[1]=\"\"> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex)=\"\" {=\"\" capturedgroups[decimalvalue]=\"-1;\" }=\"\" else=\"\" replace=\"\" with=\"\" an=\"\" unambiguous=\"\" escape=\"\" sequence=\"\" so=\"\" that=\"\" octal=\"\" does=\"\" not=\"\" turn=\"\" into=\"\" a=\"\" backreference=\"\" to=\"\" capturing=\"\" group=\"\" from=\"\" earlier=\"\" regex.=\"\" parts[i]=\"encodeEscape(decimalValue);\" renumber=\"\" groups=\"\" and=\"\" reduce=\"\" non-capturing=\"\" where=\"\" possible.=\"\" for=\"\" (var=\"\" i=\"1;\" <=\"\" capturedgroups.length;=\"\" ++i)=\"\" if=\"\" (-1=\"==\" capturedgroups[i])=\"\" capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n;=\"\" var=\"\" p=\"parts[i];\" (p=\"==\" '(')=\"\" ++groupindex;=\"\" (!capturedgroups[groupindex])=\"\" ;=\"\" ('\\\\'=\"==\" p.charat(0))=\"\" decimalvalue=\"+p.substring(1);\" (decimalvalue=\"\" &&=\"\" +=\"\" capturedgroups[decimalvalue];=\"\" remove=\"\" any=\"\" prefix=\"\" anchors=\"\" the=\"\" output=\"\" will=\"\" match=\"\" anywhere.=\"\" ^^=\"\" really=\"\" mean=\"\" anchored=\"\" though.=\"\" ('^'=\"==\" '^'=\"\" !=\"=\" parts[i=\"\" 1])=\"\" expand=\"\" letters=\"\" handle=\"\" mixing=\"\" of=\"\" case-sensitive=\"\" case-insensitive=\"\" patterns=\"\" necessary.=\"\" (regex.ignorecase=\"\" needtofoldcase)=\"\" ch0=\"p.charAt(0);\" (p.length=\"\">= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></number|node></number|node></number|string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...=\"\">} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1=\"\" index_n,=\"\" and=\"\" style_n-1=\"\" applies=\"\" to=\"\" *=\"\" all=\"\" characters=\"\" in=\"\" sourcecode[index_n-1:index_n].=\"\" the=\"\" stylepatterns=\"\" is=\"\" a=\"\" list=\"\" whose=\"\" elements=\"\" have=\"\" form=\"\" [style=\"\" :=\"\" string,=\"\" pattern=\"\" regexp,=\"\" deprecated,=\"\" shortcut=\"\" string].=\"\" style=\"\" constant=\"\" like=\"\" pr_plain,=\"\" or=\"\" can=\"\" be=\"\" string=\"\" of=\"\" 'lang-foo',=\"\" where=\"\" foo=\"\" language=\"\" extension=\"\" describing=\"\" portion=\"\" token=\"\" $1=\"\" after=\"\" executes.=\"\" e.g.,=\"\" if=\"\" 'lang-lisp',=\"\" group=\"\" contains=\"\" text=\"\" '(hello=\"\" (world))',=\"\" then=\"\" that=\"\" will=\"\" passed=\"\" registered=\"\" lisp=\"\" handler=\"\" for=\"\" formatting.=\"\" before=\"\" restyled=\"\" using=\"\" this=\"\" decorator=\"\" so=\"\" decorators=\"\" should=\"\" take=\"\" care=\"\" doesn't=\"\" result=\"\" infinite=\"\" recursion.=\"\" example,=\"\" html=\"\" lexer=\"\" rule=\"\" script=\"\" looks=\"\" something=\"\" ['lang-js',=\"\" <[s]cript=\"\">(.+?)<\\ script=\"\">/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n</script></\\></=></code></pre></p></pre></code></pre></p>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\" target=\"_blank\" rel=\"noopener\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * </p><p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * </li><li> define style rules.  See the example page for examples.\n * </li><li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </xmp></code></pre></li></ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dd></dt></dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <br>}) corresponding to that\n *     span.\n * </dd></dt></dd></dt></dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = true;\n\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nvar PR_SHOULD_USE_CONTINUATION = true\nif (typeof window !== 'undefined') {\n  window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n}\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = (typeof window !== 'undefined') ? window : {};\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n\n  // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n  // Do not modify, your changes will be erased.\n\n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<regexp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n\n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n\n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n\n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= 1=\"\" 2=\"\" 65=\"\" c1=\"\" &&=\"\" <=\"7\" )=\"\" {=\"\" return=\"\" parseint(charsetpart.substring(1),=\"\" 8);=\"\" }=\"\" else=\"\" if=\"\" (c1=\"==\" 'u'=\"\" ||=\"\" 'x')=\"\" parseint(charsetpart.substring(2),=\"\" 16);=\"\" charsetpart.charcodeat(1);=\"\" function=\"\" encodeescape(charcode)=\"\" (charcode=\"\" 0x20)=\"\" 0x10=\"\" ?=\"\" '\\\\x0'=\"\" :=\"\" '\\\\x')=\"\" +=\"\" charcode.tostring(16);=\"\" var=\"\" ch=\"String.fromCharCode(charCode);\" (ch=\"==\" '\\\\'=\"\" '-'=\"\" ']'=\"\" '^')=\"\" \"\\\\\"=\"\" ch;=\"\" casefoldcharset(charset)=\"\" charsetparts=\"charSet.substring(1,\" charset.length=\"\" -=\"\" 1).match(=\"\" new=\"\" regexp(=\"\" '\\\\\\\\u[0-9a-fa-f]{4}'=\"\" '|\\\\\\\\x[0-9a-fa-f]{2}'=\"\" '|\\\\\\\\[0-3][0-7]{0,2}'=\"\" '|\\\\\\\\[0-7]{1,2}'=\"\" '|\\\\\\\\[\\\\s\\\\s]'=\"\" '|-'=\"\" '|[^-\\\\\\\\]',=\"\" 'g'));=\"\" ranges=\"[];\" inverse=\"charsetParts[0]\" ==\"=\" '^';=\"\" out=\"['['];\" (inverse)=\"\" out.push('^');=\"\" for=\"\" (var=\"\" i=\"inverse\" 0,=\"\" n=\"charsetParts.length;\" n;=\"\" ++i)=\"\" p=\"charsetParts[i];\" (=\"\" \\\\[bdsw]=\"\" i.test(p))=\"\" don't=\"\" muck=\"\" with=\"\" named=\"\" groups.=\"\" out.push(p);=\"\" start=\"decodeEscape(p);\" end;=\"\" (i=\"\" charsetparts[i=\"\" 1])=\"\" end=\"decodeEscape(charsetParts[i\" 2]);=\"\" ranges.push([start,=\"\" end]);=\"\" the=\"\" range=\"\" might=\"\" intersect=\"\" letters,=\"\" then=\"\" expand=\"\" it.=\"\" this=\"\" case=\"\" handling=\"\" is=\"\" too=\"\" simplistic.=\"\" it=\"\" does=\"\" not=\"\" deal=\"\" non-latin=\"\" folding.=\"\" works=\"\" latin=\"\" source=\"\" code=\"\" identifiers=\"\" though.=\"\" (!(end=\"\"> 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n\n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastrange[1]=\"\" +=\"\" 1)=\"\" {=\"\" range[1]);=\"\" }=\"\" else=\"\" consolidatedranges.push(lastrange=\"range);\" for=\"\" (var=\"\" i=\"0;\" <=\"\" consolidatedranges.length;=\"\" ++i)=\"\" var=\"\" range=\"consolidatedRanges[i];\" out.push(encodeescape(range[0]));=\"\" if=\"\" (range[1]=\"\"> range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n\n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n\n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n\n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupindex)=\"\" {=\"\" capturedgroups[decimalvalue]=\"-1;\" }=\"\" else=\"\" replace=\"\" with=\"\" an=\"\" unambiguous=\"\" escape=\"\" sequence=\"\" so=\"\" that=\"\" octal=\"\" does=\"\" not=\"\" turn=\"\" into=\"\" a=\"\" backreference=\"\" to=\"\" capturing=\"\" group=\"\" from=\"\" earlier=\"\" regex.=\"\" parts[i]=\"encodeEscape(decimalValue);\" renumber=\"\" groups=\"\" and=\"\" reduce=\"\" non-capturing=\"\" where=\"\" possible.=\"\" for=\"\" (var=\"\" i=\"1;\" <=\"\" capturedgroups.length;=\"\" ++i)=\"\" if=\"\" (-1=\"==\" capturedgroups[i])=\"\" capturedgroups[i]=\"++capturedGroupIndex;\" groupindex=\"0;\" n;=\"\" var=\"\" p=\"parts[i];\" (p=\"==\" '(')=\"\" ++groupindex;=\"\" (!capturedgroups[groupindex])=\"\" ;=\"\" ('\\\\'=\"==\" p.charat(0))=\"\" decimalvalue=\"+p.substring(1);\" (decimalvalue=\"\" &&=\"\" +=\"\" capturedgroups[decimalvalue];=\"\" remove=\"\" any=\"\" prefix=\"\" anchors=\"\" the=\"\" output=\"\" will=\"\" match=\"\" anywhere.=\"\" ^^=\"\" really=\"\" mean=\"\" anchored=\"\" though.=\"\" ('^'=\"==\" '^'=\"\" !=\"=\" parts[i=\"\" 1])=\"\" expand=\"\" letters=\"\" handle=\"\" mixing=\"\" of=\"\" case-sensitive=\"\" case-insensitive=\"\" patterns=\"\" necessary.=\"\" (regex.ignorecase=\"\" needtofoldcase)=\"\" ch0=\"p.charAt(0);\" (p.length=\"\">= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n\n      return parts.join('');\n    }\n\n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n\n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code </p><p><b>print </b>'Hello '<br>  + 'World';</p>}.</=></=></=></regexp></code></pre></string></number|node></number|node></number|string></p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n\n    walk(node);\n\n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...=\"\">} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= 1=\"\" index_n,=\"\" and=\"\" style_n-1=\"\" applies=\"\" to=\"\" *=\"\" all=\"\" characters=\"\" in=\"\" sourcecode[index_n-1:index_n].=\"\" the=\"\" stylepatterns=\"\" is=\"\" a=\"\" list=\"\" whose=\"\" elements=\"\" have=\"\" form=\"\" [style=\"\" :=\"\" string,=\"\" pattern=\"\" regexp,=\"\" deprecated,=\"\" shortcut=\"\" string].=\"\" style=\"\" constant=\"\" like=\"\" pr_plain,=\"\" or=\"\" can=\"\" be=\"\" string=\"\" of=\"\" 'lang-foo',=\"\" where=\"\" foo=\"\" language=\"\" extension=\"\" describing=\"\" portion=\"\" token=\"\" $1=\"\" after=\"\" executes.=\"\" e.g.,=\"\" if=\"\" 'lang-lisp',=\"\" group=\"\" contains=\"\" text=\"\" '(hello=\"\" (world))',=\"\" then=\"\" that=\"\" will=\"\" passed=\"\" registered=\"\" lisp=\"\" handler=\"\" for=\"\" formatting.=\"\" before=\"\" restyled=\"\" using=\"\" this=\"\" decorator=\"\" so=\"\" decorators=\"\" should=\"\" take=\"\" care=\"\" doesn't=\"\" result=\"\" infinite=\"\" recursion.=\"\" example,=\"\" html=\"\" lexer=\"\" rule=\"\" script=\"\" looks=\"\" something=\"\" ['lang-js',=\"\" <[s]cript=\"\">(.+?)<\\ script=\"\">/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo \n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n\n    var document = node.ownerDocument;\n\n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n\n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName.toLowerCase()) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n\n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n\n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n\n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n\n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n\n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n\n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n\n    node.appendChild(ol);\n  }\n\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n\n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n\n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n\n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n\n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n\n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n\n    nDecorations = decorations.length = decPos;\n\n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n\n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n        var end = Math.min(spanEnd, decEnd);\n\n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n\n        sourceIndex = end;\n\n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n</script></\\></=></code></pre></p></pre></code></pre></p>"},{"_content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<NAME>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<NAME>.css\".          |        |\n * |                  |               | https://cdn.rawgit.com/      |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://cdn.rawgit.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.rawgit.com/google/code-prettify/master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n          \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n          \"yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo {#}\n          // {#}\n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n","source":"plugins/prettify/run_prettify.js","raw":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<NAME>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<NAME>.css\".          |        |\n * |                  |               | https://cdn.rawgit.com/      |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://cdn.rawgit.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.rawgit.com/google/code-prettify/master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n          \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n          \"yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo {#}\n          // {#}\n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n","date":"2018-04-24T14:27:38.074Z","updated":"2018-04-24T14:27:38.074Z","path":"plugins/prettify/run_prettify.js","layout":"false","title":"","comments":1,"_id":"cjgfb609o001wa4vbpc14y8dc","content":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<name>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<name>.css\".          |        |\n * |                  |               | https://cdn.rawgit.com/      |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://cdn.rawgit.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.rawgit.com/google/code-prettify/master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n          \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n          \"yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo \n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n</style></name></name></div>","site":{"data":{}},"excerpt":"","more":"/**\n * @license\n * Copyright (C) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * <div style=\"white-space: pre\">\n * Looks at query parameters to decide which language handlers and style-sheets\n * to load.\n *\n * Query Parameter     Format           Effect                        Default\n * +------------------+---------------+------------------------------+--------+\n * | autorun=         | true | false  | If true then prettyPrint()   | \"true\" |\n * |                  |               | is called on page load.      |        |\n * +------------------+---------------+------------------------------+--------+\n * | lang=            | language name | Loads the language handler   | Can    |\n * |                  |               | named \"lang-<name>.js\".      | appear |\n * |                  |               | See available handlers at    | many   |\n * |                  |               | https://github.com/google/   | times. |\n * |                  |               | code-prettify/tree/master/   |        |\n * |                  |               | src                          |        |\n * +------------------+---------------+------------------------------+--------+\n * | skin=            | skin name     | Loads the skin stylesheet    | none.  |\n * |                  |               | named \"<name>.css\".          |        |\n * |                  |               | https://cdn.rawgit.com/      |        |\n * |                  |               | google/code-prettify/master/ |        |\n * |                  |               | styles/index.html            |        |\n * +------------------+---------------+------------------------------+--------+\n * | callback=        | JS identifier | When \"prettyPrint\" finishes  | none   |\n * |                  |               | window.exports[js_ident] is  |        |\n * |                  |               | called.                      |        |\n * |                  |               | The callback must be under   |        |\n * |                  |               | exports to reduce the risk   |        |\n * |                  |               | of XSS via query parameter   |        |\n * |                  |               | injection.                   |        |\n * +------------------+---------------+------------------------------+--------+\n *\n * Examples\n * .../run_prettify.js?lang=css&skin=sunburst\n *   1. Loads the CSS language handler which can be used to prettify CSS\n *      stylesheets, HTML <style> element bodies and style=\"...\" attributes\n *      values.\n *   2. Loads the sunburst.css stylesheet instead of the default prettify.css\n *      stylesheet.\n *      A gallery of stylesheets is available at\n *      https://cdn.rawgit.com/google/code-prettify/master/styles/index.html\n *   3. Since autorun=false is not specified, calls prettyPrint() on page load.\n * </div>\n */\n\n/**\n * @typedef {!Array.<number|string>}\n * Alternating indices and the decorations that should be inserted there.\n * The indices are monotonically increasing.\n */\nvar DecorationsT;\n\n/**\n * @typedef {!{\n *   sourceNode: !Element,\n *   pre: !(number|boolean),\n *   langExtension: ?string,\n *   numberLines: ?(number|boolean),\n *   sourceCode: ?string,\n *   spans: ?(Array.<number|Node>),\n *   basePos: ?number,\n *   decorations: ?DecorationsT\n * }}\n * <dl>\n *  <dt>sourceNode<dd>the element containing the source\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>pre<dd>truthy if white-space in text nodes\n *     should be considered significant.\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n *  <dt>decorations<dd>an array of style classes preceded\n *     by the position at which they start in job.sourceCode in order\n *  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n *     source.\n * </dl>\n */\nvar JobT;\n\n/**\n * @typedef {!{\n *   sourceCode: string,\n *   spans: !(Array.<number|Node>)\n * }}\n * <dl>\n *  <dt>sourceCode<dd>source as plain text\n *  <dt>spans<dd> alternating span start indices into source\n *     and the text node or element (e.g. {@code <BR>}) corresponding to that\n *     span.\n * </dl>\n */\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\n\n(function () {\n  \"use strict\";\n\n  var win = window;\n  var doc = document;\n  var root = doc.documentElement;\n  var head = doc['head'] || doc.getElementsByTagName(\"head\")[0] || root;\n\n  // From http://javascript.nwbox.com/ContentLoaded/contentloaded.js\n  // Author: Diego Perini (diego.perini at gmail.com)\n  // Summary: cross-browser wrapper for DOMContentLoaded\n  // Updated: 20101020\n  // License: MIT\n  // Version: 1.2\n  function contentLoaded(callback) {\n    var addEventListener = doc['addEventListener'];\n    var done = false, top = true,\n        add = addEventListener ? 'addEventListener' : 'attachEvent',\n        rem = addEventListener ? 'removeEventListener' : 'detachEvent',\n        pre = addEventListener ? '' : 'on',\n\n        init = function(e) {\n          if (e.type == 'readystatechange' && doc.readyState != 'complete') {\n            return;\n          }\n          (e.type == 'load' ? win : doc)[rem](pre + e.type, init, false);\n          if (!done && (done = true)) { callback.call(win, e.type || e); }\n        },\n\n        poll = function() {\n          try {\n            root.doScroll('left');\n          } catch(e) {\n            win.setTimeout(poll, 50);\n            return;\n          }\n          init('poll');\n        };\n\n    if (doc.readyState == 'complete') {\n      callback.call(win, 'lazy');\n    } else {\n      if (doc.createEventObject && root.doScroll) {\n        try { top = !win.frameElement; } catch(e) { }\n        if (top) { poll(); }\n      }\n      doc[add](pre + 'DOMContentLoaded', init, false);\n      doc[add](pre + 'readystatechange', init, false);\n      win[add](pre + 'load', init, false);\n    }\n  }\n\n  // Given a list of URLs to stylesheets, loads the first that loads without\n  // triggering an error event.\n  function loadStylesheetsFallingBack(stylesheets) {\n    var n = stylesheets.length;\n    function load(i) {\n      if (i === n) { return; }\n      var link = doc.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      if (i + 1 < n) {\n        // http://pieisgood.org/test/script-link-events/ indicates that many\n        // versions of IE do not support onerror on <link>s, though\n        // http://msdn.microsoft.com/en-us/library/ie/ms535848(v=vs.85).aspx\n        // indicates that recent IEs do support error.\n        link.error = link.onerror = function () { load(i + 1); };\n      }\n      link.href = stylesheets[i];\n      head.appendChild(link);\n    }\n    load(0);\n  }\n\n  var scriptQuery = '';\n  // Look for the <script> node that loads this script to get its parameters.\n  // This starts looking at the end instead of just considering the last\n  // because deferred and async scripts run out of order.\n  // If the script is loaded twice, then this will run in reverse order.\n  var scripts = doc.getElementsByTagName('script');\n  for (var i = scripts.length; --i >= 0;) {\n    var script = scripts[i];\n    var match = script.src.match(\n        /^[^?#]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);\n    if (match) {\n      scriptQuery = match[1] || '';\n      // Remove the script from the DOM so that multiple runs at least run\n      // multiple times even if parameter sets are interpreted in reverse\n      // order.\n      script.parentNode.removeChild(script);\n      break;\n    }\n  }\n\n  // Pull parameters into local variables.\n  var autorun = true;\n  var langs = [];\n  var skins = [];\n  var callbacks = [];\n  scriptQuery.replace(\n      /[?&]([^&=]+)=([^&]+)/g,\n      function (_, name, value) {\n        value = decodeURIComponent(value);\n        name = decodeURIComponent(name);\n        if (name == 'autorun')   { autorun = !/^[0fn]/i.test(value); } else\n        if (name == 'lang')      { langs.push(value);                } else\n        if (name == 'skin')      { skins.push(value);                } else\n        if (name == 'callback')  { callbacks.push(value);            }\n      });\n\n  // Use https to avoid mixed content warnings in client pages and to\n  // prevent a MITM from rewrite prettify mid-flight.\n  // This only works if this script is loaded via https : something\n  // over which we exercise no control.\n  var LOADER_BASE_URL =\n     'https://cdn.rawgit.com/google/code-prettify/master/loader';\n\n  for (var i = 0, n = langs.length; i < n; ++i) (function (lang) {\n    var script = doc.createElement(\"script\");\n\n    // Excerpted from jQuery.ajaxTransport(\"script\") to fire events when\n    // a script is finished loading.\n    // Attach handlers for each script\n    script.onload = script.onerror = script.onreadystatechange = function () {\n      if (script && (\n            !script.readyState || /loaded|complete/.test(script.readyState))) {\n        // Handle memory leak in IE\n        script.onerror = script.onload = script.onreadystatechange = null;\n\n        --pendingLanguages;\n        checkPendingLanguages();\n\n        // Remove the script\n        if (script.parentNode) {\n          script.parentNode.removeChild(script);\n        }\n\n        script = null;\n      }\n    };\n\n    script.type = 'text/javascript';\n    script.src = LOADER_BASE_URL\n      + '/lang-' + encodeURIComponent(langs[i]) + '.js';\n\n    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n    head.insertBefore(script, head.firstChild);\n  })(langs[i]);\n\n  var pendingLanguages = langs.length;\n  function checkPendingLanguages() {\n    if (!pendingLanguages) {\n      win.setTimeout(onLangsLoaded, 0);\n    }\n  }\n\n  var skinUrls = [];\n  for (var i = 0, n = skins.length; i < n; ++i) {\n    skinUrls.push(LOADER_BASE_URL\n        + '/skins/' + encodeURIComponent(skins[i]) + '.css');\n  }\n  skinUrls.push(LOADER_BASE_URL + '/prettify.css');\n  loadStylesheetsFallingBack(skinUrls);\n\n  var prettyPrint = (function () {\n    /**\n     * @license\n     * Copyright (C) 2006 Google Inc.\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *      http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    /**\n     * @fileoverview\n     * some functions for browser-side pretty printing of code contained in html.\n     *\n     * <p>\n     * For a fairly comprehensive set of languages see the\n     * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n     * file that came with this source.  At a minimum, the lexer should work on a\n     * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n     * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n     * and a subset of Perl, but, because of commenting conventions, doesn't work on\n     * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n     * <p>\n     * Usage: <ol>\n     * <li> include this source file in an html page via\n     *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n     * <li> define style rules.  See the example page for examples.\n     * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n     *    {@code class=prettyprint.}\n     *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n     *    printer needs to do more substantial DOM manipulations to support that, so\n     *    some css styles may not be preserved.\n     * </ol>\n     * That's it.  I wanted to keep the API as simple as possible, so there's no\n     * need to specify which language the code is in, but if you wish, you can add\n     * another class to the {@code <pre>} or {@code <code>} element to specify the\n     * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n     * starts with \"lang-\" followed by a file extension, specifies the file type.\n     * See the \"lang-*.js\" files in this directory for code that implements\n     * per-language file handlers.\n     * <p>\n     * Change log:<br>\n     * cbeust, 2006/08/22\n     * <blockquote>\n     *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n     * </blockquote>\n     * @requires console\n     */\n\n    // JSLint declarations\n    /*global console, document, navigator, setTimeout, window, define */\n\n\n    /**\n     * {@type !{\n     *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n     *   'registerLangHandler': function (function (JobT), Array.<string>),\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_NAME': string,\n     *   'PR_ATTRIB_VALUE': string,\n     *   'PR_COMMENT': string,\n     *   'PR_DECLARATION': string,\n     *   'PR_KEYWORD': string,\n     *   'PR_LITERAL': string,\n     *   'PR_NOCODE': string,\n     *   'PR_PLAIN': string,\n     *   'PR_PUNCTUATION': string,\n     *   'PR_SOURCE': string,\n     *   'PR_STRING': string,\n     *   'PR_TAG': string,\n     *   'PR_TYPE': string,\n     *   'prettyPrintOne': function (string, string, number|boolean),\n     *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n     * }}\n     * @const\n     */\n    var PR;\n\n    /**\n     * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n     * UI events.\n     * If set to {@code false}, {@code prettyPrint()} is synchronous.\n     */\n    var PR_SHOULD_USE_CONTINUATION = true\n    if (typeof window !== 'undefined') {\n      window['PR_SHOULD_USE_CONTINUATION'] = PR_SHOULD_USE_CONTINUATION;\n    }\n\n    /**\n     * Pretty print a chunk of code.\n     * @param {string} sourceCodeHtml The HTML to pretty print.\n     * @param {string} opt_langExtension The language name to use.\n     *     Typically, a filename extension like 'cpp' or 'java'.\n     * @param {number|boolean} opt_numberLines True to number lines,\n     *     or the 1-indexed number of the first line in sourceCodeHtml.\n     * @return {string} code as html, but prettier\n     */\n    var prettyPrintOne;\n    /**\n     * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n     * {@code class=prettyprint} and prettify them.\n     *\n     * @param {Function} opt_whenDone called when prettifying is done.\n     * @param {HTMLElement|HTMLDocument} opt_root an element or document\n     *   containing all the elements to pretty print.\n     *   Defaults to {@code document.body}.\n     */\n    var prettyPrint;\n\n\n    (function () {\n      var win = (typeof window !== 'undefined') ? window : {};\n      // Keyword lists for various languages.\n      // We use things that coerce to strings to make them compact when minified\n      // and to defeat aggressive optimizers that fold large string constants.\n      var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n      var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n          \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n          \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n      var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n          \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n      var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n          \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n          \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n          \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n          \"static_cast,template,typeid,typename,using,virtual,where\"];\n      var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n          \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n          \"throws,transient\"];\n      var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n          \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n          \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n          \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n          \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n      var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n          \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n          \"throw,true,try,unless,until,when,while,yes\";\n      var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n          \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n          \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n          \"yield,Infinity,NaN\"];\n      var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n          \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n          \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n      var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n          \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n          \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n          \"False,True,None\"];\n      var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n          \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n          \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n          \"BEGIN,END\"];\n      var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n          \"function,in,local,set,then,until\"];\n      var ALL_KEYWORDS = [\n          CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n          PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n      var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n      // token style names.  correspond to css classes\n      /**\n       * token style for a string literal\n       * @const\n       */\n      var PR_STRING = 'str';\n      /**\n       * token style for a keyword\n       * @const\n       */\n      var PR_KEYWORD = 'kwd';\n      /**\n       * token style for a comment\n       * @const\n       */\n      var PR_COMMENT = 'com';\n      /**\n       * token style for a type\n       * @const\n       */\n      var PR_TYPE = 'typ';\n      /**\n       * token style for a literal value.  e.g. 1, null, true.\n       * @const\n       */\n      var PR_LITERAL = 'lit';\n      /**\n       * token style for a punctuation string.\n       * @const\n       */\n      var PR_PUNCTUATION = 'pun';\n      /**\n       * token style for plain text.\n       * @const\n       */\n      var PR_PLAIN = 'pln';\n\n      /**\n       * token style for an sgml tag.\n       * @const\n       */\n      var PR_TAG = 'tag';\n      /**\n       * token style for a markup declaration such as a DOCTYPE.\n       * @const\n       */\n      var PR_DECLARATION = 'dec';\n      /**\n       * token style for embedded source.\n       * @const\n       */\n      var PR_SOURCE = 'src';\n      /**\n       * token style for an sgml attribute name.\n       * @const\n       */\n      var PR_ATTRIB_NAME = 'atn';\n      /**\n       * token style for an sgml attribute value.\n       * @const\n       */\n      var PR_ATTRIB_VALUE = 'atv';\n\n      /**\n       * A class that indicates a section of markup that is not code, e.g. to allow\n       * embedding of line numbers within code listings.\n       * @const\n       */\n      var PR_NOCODE = 'nocode';\n\n\n      // Regex pattern below is automatically generated by regexpPrecederPatterns.pl\n      // Do not modify, your changes will be erased.\n\n      // CAVEAT: this does not properly handle the case where a regular\n      // expression immediately follows another since a regular expression may\n      // have flags for case-sensitivity and the like.  Having regexp tokens\n      // adjacent is not valid in any language I'm aware of, so I'm punting.\n      // TODO: maybe style special characters inside a regexp as punctuation.\n\n      /**\n       * A set of tokens that can precede a regular expression literal in\n       * javascript\n       * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n       * has the full list, but I've removed ones that might be problematic when\n       * seen in languages that don't support regular expression literals.\n       *\n       * Specifically, I've removed any keywords that can't precede a regexp\n       * literal in a syntactically legal javascript program, and I've removed the\n       * \"in\" keyword since it's not a keyword in many languages, and might be used\n       * as a count of inches.\n       *\n       * The link above does not accurately describe EcmaScript rules since\n       * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n       * very well in practice.\n       *\n       * @private\n       * @const\n       */\n      var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n\n\n      /**\n       * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n       * matches the union of the sets of strings matched by the input RegExp.\n       * Since it matches globally, if the input strings have a start-of-input\n       * anchor (/^.../), it is ignored for the purposes of unioning.\n       * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n       * @return {RegExp} a global regex.\n       */\n      function combinePrefixPatterns(regexs) {\n        var capturedGroupIndex = 0;\n\n        var needToFoldCase = false;\n        var ignoreCase = false;\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.ignoreCase) {\n            ignoreCase = true;\n          } else if (/[a-z]/i.test(regex.source.replace(\n                         /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n            needToFoldCase = true;\n            ignoreCase = false;\n            break;\n          }\n        }\n\n        var escapeCharToCodeUnit = {\n          'b': 8,\n          't': 9,\n          'n': 0xa,\n          'v': 0xb,\n          'f': 0xc,\n          'r': 0xd\n        };\n\n        function decodeEscape(charsetPart) {\n          var cc0 = charsetPart.charCodeAt(0);\n          if (cc0 !== 92 /* \\\\ */) {\n            return cc0;\n          }\n          var c1 = charsetPart.charAt(1);\n          cc0 = escapeCharToCodeUnit[c1];\n          if (cc0) {\n            return cc0;\n          } else if ('0' <= c1 && c1 <= '7') {\n            return parseInt(charsetPart.substring(1), 8);\n          } else if (c1 === 'u' || c1 === 'x') {\n            return parseInt(charsetPart.substring(2), 16);\n          } else {\n            return charsetPart.charCodeAt(1);\n          }\n        }\n\n        function encodeEscape(charCode) {\n          if (charCode < 0x20) {\n            return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n          }\n          var ch = String.fromCharCode(charCode);\n          return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n              ? \"\\\\\" + ch : ch;\n        }\n\n        function caseFoldCharset(charSet) {\n          var charsetParts = charSet.substring(1, charSet.length - 1).match(\n              new RegExp(\n                  '\\\\\\\\u[0-9A-Fa-f]{4}'\n                  + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n                  + '|\\\\\\\\[0-3][0-7]{0,2}'\n                  + '|\\\\\\\\[0-7]{1,2}'\n                  + '|\\\\\\\\[\\\\s\\\\S]'\n                  + '|-'\n                  + '|[^-\\\\\\\\]',\n                  'g'));\n          var ranges = [];\n          var inverse = charsetParts[0] === '^';\n\n          var out = ['['];\n          if (inverse) { out.push('^'); }\n\n          for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n            var p = charsetParts[i];\n            if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n              out.push(p);\n            } else {\n              var start = decodeEscape(p);\n              var end;\n              if (i + 2 < n && '-' === charsetParts[i + 1]) {\n                end = decodeEscape(charsetParts[i + 2]);\n                i += 2;\n              } else {\n                end = start;\n              }\n              ranges.push([start, end]);\n              // If the range might intersect letters, then expand it.\n              // This case handling is too simplistic.\n              // It does not deal with non-latin case folding.\n              // It works for latin source code identifiers though.\n              if (!(end < 65 || start > 122)) {\n                if (!(end < 65 || start > 90)) {\n                  ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n                }\n                if (!(end < 97 || start > 122)) {\n                  ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n                }\n              }\n            }\n          }\n\n          // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n          // -> [[1, 12], [14, 14], [16, 17]]\n          ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n          var consolidatedRanges = [];\n          var lastRange = [];\n          for (var i = 0; i < ranges.length; ++i) {\n            var range = ranges[i];\n            if (range[0] <= lastRange[1] + 1) {\n              lastRange[1] = Math.max(lastRange[1], range[1]);\n            } else {\n              consolidatedRanges.push(lastRange = range);\n            }\n          }\n\n          for (var i = 0; i < consolidatedRanges.length; ++i) {\n            var range = consolidatedRanges[i];\n            out.push(encodeEscape(range[0]));\n            if (range[1] > range[0]) {\n              if (range[1] + 1 > range[0]) { out.push('-'); }\n              out.push(encodeEscape(range[1]));\n            }\n          }\n          out.push(']');\n          return out.join('');\n        }\n\n        function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n          // Split into character sets, escape sequences, punctuation strings\n          // like ('(', '(?:', ')', '^'), and runs of characters that do not\n          // include any of the above.\n          var parts = regex.source.match(\n              new RegExp(\n                  '(?:'\n                  + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n                  + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n                  + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n                  + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n                  + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n                  + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n                  + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n                  + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n                  + ')',\n                  'g'));\n          var n = parts.length;\n\n          // Maps captured group numbers to the number they will occupy in\n          // the output or to -1 if that has not been determined, or to\n          // undefined if they need not be capturing in the output.\n          var capturedGroups = [];\n\n          // Walk over and identify back references to build the capturedGroups\n          // mapping.\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              // groups are 1-indexed, so max group index is count of '('\n              ++groupIndex;\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue) {\n                if (decimalValue <= groupIndex) {\n                  capturedGroups[decimalValue] = -1;\n                } else {\n                  // Replace with an unambiguous escape sequence so that\n                  // an octal escape sequence does not turn into a backreference\n                  // to a capturing group from an earlier regex.\n                  parts[i] = encodeEscape(decimalValue);\n                }\n              }\n            }\n          }\n\n          // Renumber groups and reduce capturing groups to non-capturing groups\n          // where possible.\n          for (var i = 1; i < capturedGroups.length; ++i) {\n            if (-1 === capturedGroups[i]) {\n              capturedGroups[i] = ++capturedGroupIndex;\n            }\n          }\n          for (var i = 0, groupIndex = 0; i < n; ++i) {\n            var p = parts[i];\n            if (p === '(') {\n              ++groupIndex;\n              if (!capturedGroups[groupIndex]) {\n                parts[i] = '(?:';\n              }\n            } else if ('\\\\' === p.charAt(0)) {\n              var decimalValue = +p.substring(1);\n              if (decimalValue && decimalValue <= groupIndex) {\n                parts[i] = '\\\\' + capturedGroups[decimalValue];\n              }\n            }\n          }\n\n          // Remove any prefix anchors so that the output will match anywhere.\n          // ^^ really does mean an anchored match though.\n          for (var i = 0; i < n; ++i) {\n            if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n          }\n\n          // Expand letters to groups to handle mixing of case-sensitive and\n          // case-insensitive patterns if necessary.\n          if (regex.ignoreCase && needToFoldCase) {\n            for (var i = 0; i < n; ++i) {\n              var p = parts[i];\n              var ch0 = p.charAt(0);\n              if (p.length >= 2 && ch0 === '[') {\n                parts[i] = caseFoldCharset(p);\n              } else if (ch0 !== '\\\\') {\n                // TODO: handle letters in numeric escapes.\n                parts[i] = p.replace(\n                    /[a-zA-Z]/g,\n                    function (ch) {\n                      var cc = ch.charCodeAt(0);\n                      return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                    });\n              }\n            }\n          }\n\n          return parts.join('');\n        }\n\n        var rewritten = [];\n        for (var i = 0, n = regexs.length; i < n; ++i) {\n          var regex = regexs[i];\n          if (regex.global || regex.multiline) { throw new Error('' + regex); }\n          rewritten.push(\n              '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n        }\n\n        return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n      }\n\n\n      /**\n       * Split markup into a string of source code and an array mapping ranges in\n       * that string to the text nodes in which they appear.\n       *\n       * <p>\n       * The HTML DOM structure:</p>\n       * <pre>\n       * (Element   \"p\"\n       *   (Element \"b\"\n       *     (Text  \"print \"))       ; #1\n       *   (Text    \"'Hello '\")      ; #2\n       *   (Element \"br\")            ; #3\n       *   (Text    \"  + 'World';\")) ; #4\n       * </pre>\n       * <p>\n       * corresponds to the HTML\n       * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n       *\n       * <p>\n       * It will produce the output:</p>\n       * <pre>\n       * {\n       *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n       *   //                     1          2\n       *   //           012345678901234 5678901234567\n       *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n       * }\n       * </pre>\n       * <p>\n       * where #1 is a reference to the {@code \"print \"} text node above, and so\n       * on for the other text nodes.\n       * </p>\n       *\n       * <p>\n       * The {@code} spans array is an array of pairs.  Even elements are the start\n       * indices of substrings, and odd elements are the text nodes (or BR elements)\n       * that contain the text for those substrings.\n       * Substrings continue until the next index or the end of the source.\n       * </p>\n       *\n       * @param {Node} node an HTML DOM subtree containing source-code.\n       * @param {boolean|number} isPreformatted truthy if white-space in\n       *    text nodes should be considered significant.\n       * @return {SourceSpansT} source code and the nodes in which they occur.\n       */\n      function extractSourceSpans(node, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n\n        var chunks = [];\n        var length = 0;\n        var spans = [];\n        var k = 0;\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1) {  // Element\n            if (nocode.test(node.className)) { return; }\n            for (var child = node.firstChild; child; child = child.nextSibling) {\n              walk(child);\n            }\n            var nodeName = node.nodeName.toLowerCase();\n            if ('br' === nodeName || 'li' === nodeName) {\n              chunks[k] = '\\n';\n              spans[k << 1] = length++;\n              spans[(k++ << 1) | 1] = node;\n            }\n          } else if (type == 3 || type == 4) {  // Text\n            var text = node.nodeValue;\n            if (text.length) {\n              if (!isPreformatted) {\n                text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n              } else {\n                text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n              }\n              // TODO: handle tabs here?\n              chunks[k] = text;\n              spans[k << 1] = length;\n              length += text.length;\n              spans[(k++ << 1) | 1] = node;\n            }\n          }\n        }\n\n        walk(node);\n\n        return {\n          sourceCode: chunks.join('').replace(/\\n$/, ''),\n          spans: spans\n        };\n      }\n\n\n      /**\n       * Apply the given language handler to sourceCode and add the resulting\n       * decorations to out.\n       * @param {!Element} sourceNode\n       * @param {number} basePos the index of sourceCode within the chunk of source\n       *    whose decorations are already present on out.\n       * @param {string} sourceCode\n       * @param {function(JobT)} langHandler\n       * @param {DecorationsT} out\n       */\n      function appendDecorations(\n          sourceNode, basePos, sourceCode, langHandler, out) {\n        if (!sourceCode) { return; }\n        /** @type {JobT} */\n        var job = {\n          sourceNode: sourceNode,\n          pre: 1,\n          langExtension: null,\n          numberLines: null,\n          sourceCode: sourceCode,\n          spans: null,\n          basePos: basePos,\n          decorations: null\n        };\n        langHandler(job);\n        out.push.apply(out, job.decorations);\n      }\n\n      var notWs = /\\S/;\n\n      /**\n       * Given an element, if it contains only one child element and any text nodes\n       * it contains contain only space characters, return the sole child element.\n       * Otherwise returns undefined.\n       * <p>\n       * This is meant to return the CODE element in {@code <pre><code ...>} when\n       * there is a single child element that contains all the non-space textual\n       * content, but not to return anything where there are multiple child elements\n       * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n       * is textual content.\n       */\n      function childContentWrapper(element) {\n        var wrapper = undefined;\n        for (var c = element.firstChild; c; c = c.nextSibling) {\n          var type = c.nodeType;\n          wrapper = (type === 1)  // Element Node\n              ? (wrapper ? element : c)\n              : (type === 3)  // Text Node\n              ? (notWs.test(c.nodeValue) ? element : wrapper)\n              : wrapper;\n        }\n        return wrapper === element ? undefined : wrapper;\n      }\n\n      /** Given triples of [style, pattern, context] returns a lexing function,\n        * The lexing function interprets the patterns to find token boundaries and\n        * returns a decoration list of the form\n        * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n        * where index_n is an index into the sourceCode, and style_n is a style\n        * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n        * all characters in sourceCode[index_n-1:index_n].\n        *\n        * The stylePatterns is a list whose elements have the form\n        * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n        *\n        * Style is a style constant like PR_PLAIN, or can be a string of the\n        * form 'lang-FOO', where FOO is a language extension describing the\n        * language of the portion of the token in $1 after pattern executes.\n        * E.g., if style is 'lang-lisp', and group 1 contains the text\n        * '(hello (world))', then that portion of the token will be passed to the\n        * registered lisp handler for formatting.\n        * The text before and after group 1 will be restyled using this decorator\n        * so decorators should take care that this doesn't result in infinite\n        * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n        * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n        * '<script>foo()<\\/script>', which would cause the current decorator to\n        * be called with '<script>' which would not match the same rule since\n        * group 1 must not be empty, so it would be instead styled as PR_TAG by\n        * the generic tag rule.  The handler registered for the 'js' extension would\n        * then be called with 'foo()', and finally, the current decorator would\n        * be called with '<\\/script>' which would not match the original rule and\n        * so the generic tag rule would identify it as a tag.\n        *\n        * Pattern must only match prefixes, and if it matches a prefix, then that\n        * match is considered a token with the same style.\n        *\n        * Context is applied to the last non-whitespace, non-comment token\n        * recognized.\n        *\n        * Shortcut is an optional string of characters, any of which, if the first\n        * character, gurantee that this pattern and only this pattern matches.\n        *\n        * @param {Array} shortcutStylePatterns patterns that always start with\n        *   a known character.  Must have a shortcut string.\n        * @param {Array} fallthroughStylePatterns patterns that will be tried in\n        *   order if the shortcut ones fail.  May have shortcuts.\n        *\n        * @return {function (JobT)} a function that takes an undecorated job and\n        *   attaches a list of decorations.\n        */\n      function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n        var shortcuts = {};\n        var tokenizer;\n        (function () {\n          var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n          var allRegexs = [];\n          var regexKeys = {};\n          for (var i = 0, n = allPatterns.length; i < n; ++i) {\n            var patternParts = allPatterns[i];\n            var shortcutChars = patternParts[3];\n            if (shortcutChars) {\n              for (var c = shortcutChars.length; --c >= 0;) {\n                shortcuts[shortcutChars.charAt(c)] = patternParts;\n              }\n            }\n            var regex = patternParts[1];\n            var k = '' + regex;\n            if (!regexKeys.hasOwnProperty(k)) {\n              allRegexs.push(regex);\n              regexKeys[k] = null;\n            }\n          }\n          allRegexs.push(/[\\0-\\uffff]/);\n          tokenizer = combinePrefixPatterns(allRegexs);\n        })();\n\n        var nPatterns = fallthroughStylePatterns.length;\n\n        /**\n         * Lexes job.sourceCode and attaches an output array job.decorations of\n         * style classes preceded by the position at which they start in\n         * job.sourceCode in order.\n         *\n         * @type{function (JobT)}\n         */\n        var decorate = function (job) {\n          var sourceCode = job.sourceCode, basePos = job.basePos;\n          var sourceNode = job.sourceNode;\n          /** Even entries are positions in source in ascending order.  Odd enties\n            * are style markers (e.g., PR_COMMENT) that run from that position until\n            * the end.\n            * @type {DecorationsT}\n            */\n          var decorations = [basePos, PR_PLAIN];\n          var pos = 0;  // index into sourceCode\n          var tokens = sourceCode.match(tokenizer) || [];\n          var styleCache = {};\n\n          for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n            var token = tokens[ti];\n            var style = styleCache[token];\n            var match = void 0;\n\n            var isEmbedded;\n            if (typeof style === 'string') {\n              isEmbedded = false;\n            } else {\n              var patternParts = shortcuts[token.charAt(0)];\n              if (patternParts) {\n                match = token.match(patternParts[1]);\n                style = patternParts[0];\n              } else {\n                for (var i = 0; i < nPatterns; ++i) {\n                  patternParts = fallthroughStylePatterns[i];\n                  match = token.match(patternParts[1]);\n                  if (match) {\n                    style = patternParts[0];\n                    break;\n                  }\n                }\n\n                if (!match) {  // make sure that we make progress\n                  style = PR_PLAIN;\n                }\n              }\n\n              isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n              if (isEmbedded && !(match && typeof match[1] === 'string')) {\n                isEmbedded = false;\n                style = PR_SOURCE;\n              }\n\n              if (!isEmbedded) { styleCache[token] = style; }\n            }\n\n            var tokenStart = pos;\n            pos += token.length;\n\n            if (!isEmbedded) {\n              decorations.push(basePos + tokenStart, style);\n            } else {  // Treat group 1 as an embedded block of source code.\n              var embeddedSource = match[1];\n              var embeddedSourceStart = token.indexOf(embeddedSource);\n              var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n              if (match[2]) {\n                // If embeddedSource can be blank, then it would match at the\n                // beginning which would cause us to infinitely recurse on the\n                // entire token, so we catch the right context in match[2].\n                embeddedSourceEnd = token.length - match[2].length;\n                embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n              }\n              var lang = style.substring(5);\n              // Decorate the left of the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart,\n                  token.substring(0, embeddedSourceStart),\n                  decorate, decorations);\n              // Decorate the embedded source\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceStart,\n                  embeddedSource,\n                  langHandlerForExtension(lang, embeddedSource),\n                  decorations);\n              // Decorate the right of the embedded section\n              appendDecorations(\n                  sourceNode,\n                  basePos + tokenStart + embeddedSourceEnd,\n                  token.substring(embeddedSourceEnd),\n                  decorate, decorations);\n            }\n          }\n          job.decorations = decorations;\n        };\n        return decorate;\n      }\n\n      /** returns a function that produces a list of decorations from source text.\n        *\n        * This code treats \", ', and ` as string delimiters, and \\ as a string\n        * escape.  It does not recognize perl's qq() style strings.\n        * It has no special handling for double delimiter escapes as in basic, or\n        * the tripled delimiters used in python, but should work on those regardless\n        * although in those cases a single string literal may be broken up into\n        * multiple adjacent string literals.\n        *\n        * It recognizes C, C++, and shell style comments.\n        *\n        * @param {Object} options a set of optional parameters.\n        * @return {function (JobT)} a function that examines the source code\n        *     in the input job and builds a decoration list which it attaches to\n        *     the job.\n        */\n      function sourceDecorator(options) {\n        var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n        if (options['tripleQuotedStrings']) {\n          // '''multi-line-string''', 'single-line-string', and double-quoted\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n               null, '\\'\"']);\n        } else if (options['multiLineStrings']) {\n          // 'multi-line-string', \"multi-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n               null, '\\'\"`']);\n        } else {\n          // 'single-line-string', \"single-line-string\"\n          shortcutStylePatterns.push(\n              [PR_STRING,\n               /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n               null, '\"\\'']);\n        }\n        if (options['verbatimStrings']) {\n          // verbatim-string-literal production from the C# grammar.  See issue 93.\n          fallthroughStylePatterns.push(\n              [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n        }\n        var hc = options['hashComments'];\n        if (hc) {\n          if (options['cStyleComments']) {\n            if (hc > 1) {  // multiline hash comments\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n            } else {\n              // Stop C preprocessor declarations at an unclosed open comment\n              shortcutStylePatterns.push(\n                  [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n                   null, '#']);\n            }\n            // #include <stdio.h>\n            fallthroughStylePatterns.push(\n                [PR_STRING,\n                 /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n                 null]);\n          } else {\n            shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n          }\n        }\n        if (options['cStyleComments']) {\n          fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n          fallthroughStylePatterns.push(\n              [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n        }\n        var regexLiterals = options['regexLiterals'];\n        if (regexLiterals) {\n          /**\n           * @const\n           */\n          var regexExcls = regexLiterals > 1\n            ? ''  // Multiline regex literals\n            : '\\n\\r';\n          /**\n           * @const\n           */\n          var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n          /**\n           * @const\n           */\n          var REGEX_LITERAL = (\n              // A regular expression literal starts with a slash that is\n              // not followed by * or / so that it is not confused with\n              // comments.\n              '/(?=[^/*' + regexExcls + '])'\n              // and then contains any number of raw characters,\n              + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n              // escape sequences (\\x5C),\n              +    '|\\\\x5C' + regexAny\n              // or non-nesting character sets (\\x5B\\x5D);\n              +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n              +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n              // finally closed by a /.\n              + '/');\n          fallthroughStylePatterns.push(\n              ['lang-regex',\n               RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n               ]);\n        }\n\n        var types = options['types'];\n        if (types) {\n          fallthroughStylePatterns.push([PR_TYPE, types]);\n        }\n\n        var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n        if (keywords.length) {\n          fallthroughStylePatterns.push(\n              [PR_KEYWORD,\n               new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n               null]);\n        }\n\n        shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n        var punctuation =\n          // The Bash man page says\n\n          // A word is a sequence of characters considered as a single\n          // unit by GRUB. Words are separated by metacharacters,\n          // which are the following plus space, tab, and newline: { }\n          // | & $ ; < >\n          // ...\n\n          // A word beginning with # causes that word and all remaining\n          // characters on that line to be ignored.\n\n          // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n          // comment but empirically\n          // $ echo \n          // $ echo \\$#\n          // $#\n          // $ echo }#\n          // }#\n\n          // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n          // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n          // suggests that this definition is compatible with a\n          // default mode that tries to use a single token definition\n          // to recognize both bash/python style comments and C\n          // preprocessor directives.\n\n          // This definition of punctuation does not include # in the list of\n          // follow-on exclusions, so # will not be broken before if preceeded\n          // by a punctuation character.  We could try to exclude # after\n          // [|&;<>] but that doesn't seem to cause many major problems.\n          // If that does turn out to be a problem, we should change the below\n          // when hc is truthy to include # in the run of punctuation characters\n          // only when not followint [|&;<>].\n          '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n        if (options['regexLiterals']) {\n          punctuation += '(?!\\s*\\/)';\n        }\n\n        fallthroughStylePatterns.push(\n            // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n            [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n            [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n            [PR_LITERAL,\n             new RegExp(\n                 '^(?:'\n                 // A hex number\n                 + '0x[a-f0-9]+'\n                 // or an octal or decimal number,\n                 + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n                 // possibly in scientific notation\n                 + '(?:e[+\\\\-]?\\\\d+)?'\n                 + ')'\n                 // with an optional modifier like UL for unsigned long\n                 + '[a-z]*', 'i'),\n             null, '0123456789'],\n            // Don't treat escaped quotes in bash as starting strings.\n            // See issue 144.\n            [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n            [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n        return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n      }\n\n      var decorateSource = sourceDecorator({\n            'keywords': ALL_KEYWORDS,\n            'hashComments': true,\n            'cStyleComments': true,\n            'multiLineStrings': true,\n            'regexLiterals': true\n          });\n\n      /**\n       * Given a DOM subtree, wraps it in a list, and puts each line into its own\n       * list item.\n       *\n       * @param {Node} node modified in place.  Its content is pulled into an\n       *     HTMLOListElement, and each line is moved into a separate list item.\n       *     This requires cloning elements, so the input might not have unique\n       *     IDs after numbering.\n       * @param {number|null|boolean} startLineNum\n       *     If truthy, coerced to an integer which is the 1-indexed line number\n       *     of the first line of code.  The number of the first line will be\n       *     attached to the list.\n       * @param {boolean} isPreformatted true iff white-space in text nodes should\n       *     be treated as significant.\n       */\n      function numberLines(node, startLineNum, isPreformatted) {\n        var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n        var lineBreak = /\\r\\n?|\\n/;\n\n        var document = node.ownerDocument;\n\n        var li = document.createElement('li');\n        while (node.firstChild) {\n          li.appendChild(node.firstChild);\n        }\n        // An array of lines.  We split below, so this is initialized to one\n        // un-split line.\n        var listItems = [li];\n\n        function walk(node) {\n          var type = node.nodeType;\n          if (type == 1 && !nocode.test(node.className)) {  // Element\n            if ('br' === node.nodeName.toLowerCase()) {\n              breakAfter(node);\n              // Discard the <BR> since it is now flush against a </LI>.\n              if (node.parentNode) {\n                node.parentNode.removeChild(node);\n              }\n            } else {\n              for (var child = node.firstChild; child; child = child.nextSibling) {\n                walk(child);\n              }\n            }\n          } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n            var text = node.nodeValue;\n            var match = text.match(lineBreak);\n            if (match) {\n              var firstLine = text.substring(0, match.index);\n              node.nodeValue = firstLine;\n              var tail = text.substring(match.index + match[0].length);\n              if (tail) {\n                var parent = node.parentNode;\n                parent.insertBefore(\n                  document.createTextNode(tail), node.nextSibling);\n              }\n              breakAfter(node);\n              if (!firstLine) {\n                // Don't leave blank text nodes in the DOM.\n                node.parentNode.removeChild(node);\n              }\n            }\n          }\n        }\n\n        // Split a line after the given node.\n        function breakAfter(lineEndNode) {\n          // If there's nothing to the right, then we can skip ending the line\n          // here, and move root-wards since splitting just before an end-tag\n          // would require us to create a bunch of empty copies.\n          while (!lineEndNode.nextSibling) {\n            lineEndNode = lineEndNode.parentNode;\n            if (!lineEndNode) { return; }\n          }\n\n          function breakLeftOf(limit, copy) {\n            // Clone shallowly if this node needs to be on both sides of the break.\n            var rightSide = copy ? limit.cloneNode(false) : limit;\n            var parent = limit.parentNode;\n            if (parent) {\n              // We clone the parent chain.\n              // This helps us resurrect important styling elements that cross lines.\n              // E.g. in <i>Foo<br>Bar</i>\n              // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n              var parentClone = breakLeftOf(parent, 1);\n              // Move the clone and everything to the right of the original\n              // onto the cloned parent.\n              var next = limit.nextSibling;\n              parentClone.appendChild(rightSide);\n              for (var sibling = next; sibling; sibling = next) {\n                next = sibling.nextSibling;\n                parentClone.appendChild(sibling);\n              }\n            }\n            return rightSide;\n          }\n\n          var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n\n          // Walk the parent chain until we reach an unattached LI.\n          for (var parent;\n               // Check nodeType since IE invents document fragments.\n               (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n            copiedListItem = parent;\n          }\n          // Put it on the list of lines for later processing.\n          listItems.push(copiedListItem);\n        }\n\n        // Split lines while there are lines left to split.\n        for (var i = 0;  // Number of lines that have been split so far.\n             i < listItems.length;  // length updated by breakAfter calls.\n             ++i) {\n          walk(listItems[i]);\n        }\n\n        // Make sure numeric indices show correctly.\n        if (startLineNum === (startLineNum|0)) {\n          listItems[0].setAttribute('value', startLineNum);\n        }\n\n        var ol = document.createElement('ol');\n        ol.className = 'linenums';\n        var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n        for (var i = 0, n = listItems.length; i < n; ++i) {\n          li = listItems[i];\n          // Stick a class on the LIs so that stylesheets can\n          // color odd/even rows, or any other row pattern that\n          // is co-prime with 10.\n          li.className = 'L' + ((i + offset) % 10);\n          if (!li.firstChild) {\n            li.appendChild(document.createTextNode('\\xA0'));\n          }\n          ol.appendChild(li);\n        }\n\n        node.appendChild(ol);\n      }\n\n\n      /**\n       * Breaks {@code job.sourceCode} around style boundaries in\n       * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n       * @param {JobT} job\n       * @private\n       */\n      function recombineTagsAndDecorations(job) {\n        var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n        isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n        var newlineRe = /\\n/g;\n\n        var source = job.sourceCode;\n        var sourceLength = source.length;\n        // Index into source after the last code-unit recombined.\n        var sourceIndex = 0;\n\n        var spans = job.spans;\n        var nSpans = spans.length;\n        // Index into spans after the last span which ends at or before sourceIndex.\n        var spanIndex = 0;\n\n        var decorations = job.decorations;\n        var nDecorations = decorations.length;\n        // Index into decorations after the last decoration which ends at or before\n        // sourceIndex.\n        var decorationIndex = 0;\n\n        // Remove all zero-length decorations.\n        decorations[nDecorations] = sourceLength;\n        var decPos, i;\n        for (i = decPos = 0; i < nDecorations;) {\n          if (decorations[i] !== decorations[i + 2]) {\n            decorations[decPos++] = decorations[i++];\n            decorations[decPos++] = decorations[i++];\n          } else {\n            i += 2;\n          }\n        }\n        nDecorations = decPos;\n\n        // Simplify decorations.\n        for (i = decPos = 0; i < nDecorations;) {\n          var startPos = decorations[i];\n          // Conflate all adjacent decorations that use the same style.\n          var startDec = decorations[i + 1];\n          var end = i + 2;\n          while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n            end += 2;\n          }\n          decorations[decPos++] = startPos;\n          decorations[decPos++] = startDec;\n          i = end;\n        }\n\n        nDecorations = decorations.length = decPos;\n\n        var sourceNode = job.sourceNode;\n        var oldDisplay = \"\";\n        if (sourceNode) {\n          oldDisplay = sourceNode.style.display;\n          sourceNode.style.display = 'none';\n        }\n        try {\n          var decoration = null;\n          while (spanIndex < nSpans) {\n            var spanStart = spans[spanIndex];\n            var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n                || sourceLength;\n\n            var decEnd = decorations[decorationIndex + 2] || sourceLength;\n\n            var end = Math.min(spanEnd, decEnd);\n\n            var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n            var styledText;\n            if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n                // Don't introduce spans around empty text nodes.\n                && (styledText = source.substring(sourceIndex, end))) {\n              // This may seem bizarre, and it is.  Emitting LF on IE causes the\n              // code to display with spaces instead of line breaks.\n              // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n              // space to appear at the beginning of every line but the first.\n              // Emitting an old Mac OS 9 line separator makes everything spiffy.\n              if (isIE8OrEarlier) {\n                styledText = styledText.replace(newlineRe, '\\r');\n              }\n              textNode.nodeValue = styledText;\n              var document = textNode.ownerDocument;\n              var span = document.createElement('span');\n              span.className = decorations[decorationIndex + 1];\n              var parentNode = textNode.parentNode;\n              parentNode.replaceChild(span, textNode);\n              span.appendChild(textNode);\n              if (sourceIndex < spanEnd) {  // Split off a text node.\n                spans[spanIndex + 1] = textNode\n                    // TODO: Possibly optimize by using '' if there's no flicker.\n                    = document.createTextNode(source.substring(end, spanEnd));\n                parentNode.insertBefore(textNode, span.nextSibling);\n              }\n            }\n\n            sourceIndex = end;\n\n            if (sourceIndex >= spanEnd) {\n              spanIndex += 2;\n            }\n            if (sourceIndex >= decEnd) {\n              decorationIndex += 2;\n            }\n          }\n        } finally {\n          if (sourceNode) {\n            sourceNode.style.display = oldDisplay;\n          }\n        }\n      }\n\n\n      /** Maps language-specific file extensions to handlers. */\n      var langHandlerRegistry = {};\n      /** Register a language handler for the given file extensions.\n        * @param {function (JobT)} handler a function from source code to a list\n        *      of decorations.  Takes a single argument job which describes the\n        *      state of the computation and attaches the decorations to it.\n        * @param {Array.<string>} fileExtensions\n        */\n      function registerLangHandler(handler, fileExtensions) {\n        for (var i = fileExtensions.length; --i >= 0;) {\n          var ext = fileExtensions[i];\n          if (!langHandlerRegistry.hasOwnProperty(ext)) {\n            langHandlerRegistry[ext] = handler;\n          } else if (win['console']) {\n            console['warn']('cannot override language handler %s', ext);\n          }\n        }\n      }\n      function langHandlerForExtension(extension, source) {\n        if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n          // Treat it as markup if the first non whitespace character is a < and\n          // the last non-whitespace character is a >.\n          extension = /^\\s*</.test(source)\n              ? 'default-markup'\n              : 'default-code';\n        }\n        return langHandlerRegistry[extension];\n      }\n      registerLangHandler(decorateSource, ['default-code']);\n      registerLangHandler(\n          createSimpleLexer(\n              [],\n              [\n               [PR_PLAIN,       /^[^<?]+/],\n               [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n               [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n               // Unescaped content in an unknown language\n               ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n               ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n               [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n               ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n               // Unescaped content in javascript.  (Or possibly vbscript).\n               ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n               // Contains unescaped stylesheet content\n               ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n               ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n              ]),\n          ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n      registerLangHandler(\n          createSimpleLexer(\n              [\n               [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n               [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n               ],\n              [\n               [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n               [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n               ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n               [PR_PUNCTUATION,  /^[=<>\\/]+/],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n               ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n               ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n               ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n               ]),\n          ['in.tag']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CPP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'types': C_TYPES\n            }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': 'null,true,false'\n            }), ['json']);\n      registerLangHandler(sourceDecorator({\n              'keywords': CSHARP_KEYWORDS,\n              'hashComments': true,\n              'cStyleComments': true,\n              'verbatimStrings': true,\n              'types': C_TYPES\n            }), ['cs']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JAVA_KEYWORDS,\n              'cStyleComments': true\n            }), ['java']);\n      registerLangHandler(sourceDecorator({\n              'keywords': SH_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true\n            }), ['bash', 'bsh', 'csh', 'sh']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PYTHON_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'tripleQuotedStrings': true\n            }), ['cv', 'py', 'python']);\n      registerLangHandler(sourceDecorator({\n              'keywords': PERL_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': 2  // multiline regex literals\n            }), ['perl', 'pl', 'pm']);\n      registerLangHandler(sourceDecorator({\n              'keywords': RUBY_KEYWORDS,\n              'hashComments': true,\n              'multiLineStrings': true,\n              'regexLiterals': true\n            }), ['rb', 'ruby']);\n      registerLangHandler(sourceDecorator({\n              'keywords': JSCRIPT_KEYWORDS,\n              'cStyleComments': true,\n              'regexLiterals': true\n            }), ['javascript', 'js', 'ts', 'typescript']);\n      registerLangHandler(sourceDecorator({\n              'keywords': COFFEE_KEYWORDS,\n              'hashComments': 3,  // ### style block comments\n              'cStyleComments': true,\n              'multilineStrings': true,\n              'tripleQuotedStrings': true,\n              'regexLiterals': true\n            }), ['coffee']);\n      registerLangHandler(\n          createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n      /** @param {JobT} job */\n      function applyDecorator(job) {\n        var opt_langExtension = job.langExtension;\n\n        try {\n          // Extract tags, and convert the source code to plain text.\n          var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n          /** Plain text. @type {string} */\n          var source = sourceAndSpans.sourceCode;\n          job.sourceCode = source;\n          job.spans = sourceAndSpans.spans;\n          job.basePos = 0;\n\n          // Apply the appropriate language handler\n          langHandlerForExtension(opt_langExtension, source)(job);\n\n          // Integrate the decorations and tags back into the source code,\n          // modifying the sourceNode in place.\n          recombineTagsAndDecorations(job);\n        } catch (e) {\n          if (win['console']) {\n            console['log'](e && e['stack'] || e);\n          }\n        }\n      }\n\n      /**\n       * Pretty print a chunk of code.\n       * @param sourceCodeHtml {string} The HTML to pretty print.\n       * @param opt_langExtension {string} The language name to use.\n       *     Typically, a filename extension like 'cpp' or 'java'.\n       * @param opt_numberLines {number|boolean} True to number lines,\n       *     or the 1-indexed number of the first line in sourceCodeHtml.\n       */\n      function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n        /** @type{number|boolean} */\n        var nl = opt_numberLines || false;\n        /** @type{string|null} */\n        var langExtension = opt_langExtension || null;\n        /** @type{!Element} */\n        var container = document.createElement('div');\n        // This could cause images to load and onload listeners to fire.\n        // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n        // We assume that the inner HTML is from a trusted source.\n        // The pre-tag is required for IE8 which strips newlines from innerHTML\n        // when it is injected into a <pre> tag.\n        // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n        // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n        container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n        container = /** @type{!Element} */(container.firstChild);\n        if (nl) {\n          numberLines(container, nl, true);\n        }\n\n        /** @type{JobT} */\n        var job = {\n          langExtension: langExtension,\n          numberLines: nl,\n          sourceNode: container,\n          pre: 1,\n          sourceCode: null,\n          basePos: null,\n          spans: null,\n          decorations: null\n        };\n        applyDecorator(job);\n        return container.innerHTML;\n      }\n\n       /**\n        * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n        * {@code class=prettyprint} and prettify them.\n        *\n        * @param {Function} opt_whenDone called when prettifying is done.\n        * @param {HTMLElement|HTMLDocument} opt_root an element or document\n        *   containing all the elements to pretty print.\n        *   Defaults to {@code document.body}.\n        */\n      function $prettyPrint(opt_whenDone, opt_root) {\n        var root = opt_root || document.body;\n        var doc = root.ownerDocument || document;\n        function byTagName(tn) { return root.getElementsByTagName(tn); }\n        // fetch a list of nodes to rewrite\n        var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n        var elements = [];\n        for (var i = 0; i < codeSegments.length; ++i) {\n          for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n            elements.push(codeSegments[i][j]);\n          }\n        }\n        codeSegments = null;\n\n        var clock = Date;\n        if (!clock['now']) {\n          clock = { 'now': function () { return +(new Date); } };\n        }\n\n        // The loop is broken into a series of continuations to make sure that we\n        // don't make the browser unresponsive when rewriting a large page.\n        var k = 0;\n\n        var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n        var prettyPrintRe = /\\bprettyprint\\b/;\n        var prettyPrintedRe = /\\bprettyprinted\\b/;\n        var preformattedTagNameRe = /pre|xmp/i;\n        var codeRe = /^code$/i;\n        var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n        var EMPTY = {};\n\n        function doWork() {\n          var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                         clock['now']() + 250 /* ms */ :\n                         Infinity);\n          for (; k < elements.length && clock['now']() < endTime; k++) {\n            var cs = elements[k];\n\n            // Look for a preceding comment like\n            // <?prettify lang=\"...\" linenums=\"...\"?>\n            var attrs = EMPTY;\n            {\n              for (var preceder = cs; (preceder = preceder.previousSibling);) {\n                var nt = preceder.nodeType;\n                // <?foo?> is parsed by HTML 5 to a comment node (8)\n                // like <!--?foo?-->, but in XML is a processing instruction\n                var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n                if (value\n                    ? !/^\\??prettify\\b/.test(value)\n                    : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n                  // Skip over white-space text nodes but not others.\n                  break;\n                }\n                if (value) {\n                  attrs = {};\n                  value.replace(\n                      /\\b(\\w+)=([\\w:.%+-]+)/g,\n                    function (_, name, value) { attrs[name] = value; });\n                  break;\n                }\n              }\n            }\n\n            var className = cs.className;\n            if ((attrs !== EMPTY || prettyPrintRe.test(className))\n                // Don't redo this if we've already done it.\n                // This allows recalling pretty print to just prettyprint elements\n                // that have been added to the page since last call.\n                && !prettyPrintedRe.test(className)) {\n\n              // make sure this is not nested in an already prettified element\n              var nested = false;\n              for (var p = cs.parentNode; p; p = p.parentNode) {\n                var tn = p.tagName;\n                if (preCodeXmpRe.test(tn)\n                    && p.className && prettyPrintRe.test(p.className)) {\n                  nested = true;\n                  break;\n                }\n              }\n              if (!nested) {\n                // Mark done.  If we fail to prettyprint for whatever reason,\n                // we shouldn't try again.\n                cs.className += ' prettyprinted';\n\n                // If the classes includes a language extensions, use it.\n                // Language extensions can be specified like\n                //     <pre class=\"prettyprint lang-cpp\">\n                // the language extension \"cpp\" is used to find a language handler\n                // as passed to PR.registerLangHandler.\n                // HTML5 recommends that a language be specified using \"language-\"\n                // as the prefix instead.  Google Code Prettify supports both.\n                // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n                var langExtension = attrs['lang'];\n                if (!langExtension) {\n                  langExtension = className.match(langExtensionRe);\n                  // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n                  var wrapper;\n                  if (!langExtension && (wrapper = childContentWrapper(cs))\n                      && codeRe.test(wrapper.tagName)) {\n                    langExtension = wrapper.className.match(langExtensionRe);\n                  }\n\n                  if (langExtension) { langExtension = langExtension[1]; }\n                }\n\n                var preformatted;\n                if (preformattedTagNameRe.test(cs.tagName)) {\n                  preformatted = 1;\n                } else {\n                  var currentStyle = cs['currentStyle'];\n                  var defaultView = doc.defaultView;\n                  var whitespace = (\n                      currentStyle\n                      ? currentStyle['whiteSpace']\n                      : (defaultView\n                         && defaultView.getComputedStyle)\n                      ? defaultView.getComputedStyle(cs, null)\n                      .getPropertyValue('white-space')\n                      : 0);\n                  preformatted = whitespace\n                      && 'pre' === whitespace.substring(0, 3);\n                }\n\n                // Look for a class like linenums or linenums:<n> where <n> is the\n                // 1-indexed number of the first line.\n                var lineNums = attrs['linenums'];\n                if (!(lineNums = lineNums === 'true' || +lineNums)) {\n                  lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n                  lineNums =\n                    lineNums\n                    ? lineNums[1] && lineNums[1].length\n                      ? +lineNums[1] : true\n                    : false;\n                }\n                if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n                // do the pretty printing\n                var prettyPrintingJob = {\n                  langExtension: langExtension,\n                  sourceNode: cs,\n                  numberLines: lineNums,\n                  pre: preformatted,\n                  sourceCode: null,\n                  basePos: null,\n                  spans: null,\n                  decorations: null\n                };\n                applyDecorator(prettyPrintingJob);\n              }\n            }\n          }\n          if (k < elements.length) {\n            // finish up in a continuation\n            win.setTimeout(doWork, 250);\n          } else if ('function' === typeof opt_whenDone) {\n            opt_whenDone();\n          }\n        }\n\n        doWork();\n      }\n\n      /**\n       * Contains functions for creating and registering new language handlers.\n       * @type {Object}\n       */\n      var PR = win['PR'] = {\n            'createSimpleLexer': createSimpleLexer,\n            'registerLangHandler': registerLangHandler,\n            'sourceDecorator': sourceDecorator,\n            'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n            'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n            'PR_COMMENT': PR_COMMENT,\n            'PR_DECLARATION': PR_DECLARATION,\n            'PR_KEYWORD': PR_KEYWORD,\n            'PR_LITERAL': PR_LITERAL,\n            'PR_NOCODE': PR_NOCODE,\n            'PR_PLAIN': PR_PLAIN,\n            'PR_PUNCTUATION': PR_PUNCTUATION,\n            'PR_SOURCE': PR_SOURCE,\n            'PR_STRING': PR_STRING,\n            'PR_TAG': PR_TAG,\n            'PR_TYPE': PR_TYPE,\n            'prettyPrintOne':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrintOne'] = $prettyPrintOne)\n                 : (prettyPrintOne = $prettyPrintOne),\n            'prettyPrint':\n               IN_GLOBAL_SCOPE\n                 ? (win['prettyPrint'] = $prettyPrint)\n                 : (prettyPrint = $prettyPrint)\n          };\n\n      // Make PR available via the Asynchronous Module Definition (AMD) API.\n      // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n      // The Asynchronous Module Definition (AMD) API specifies a\n      // mechanism for defining modules such that the module and its\n      // dependencies can be asynchronously loaded.\n      // ...\n      // To allow a clear indicator that a global define function (as\n      // needed for script src browser loading) conforms to the AMD API,\n      // any global define function SHOULD have a property called \"amd\"\n      // whose value is an object. This helps avoid conflict with any\n      // other existing JavaScript code that could have defined a define()\n      // function that does not conform to the AMD API.\n      var define = win['define'];\n      if (typeof define === \"function\" && define['amd']) {\n        define(\"google-code-prettify\", [], function () {\n          return PR;\n        });\n      }\n    })();\n\n    return prettyPrint;\n  })();\n\n  // If this script is deferred or async and the document is already\n  // loaded we need to wait for language handlers to load before performing\n  // any autorun.\n  function onLangsLoaded() {\n    if (autorun) {\n      contentLoaded(\n        function () {\n          var n = callbacks.length;\n          var callback = n ? function () {\n            for (var i = 0; i < n; ++i) {\n              (function (i) {\n                win.setTimeout(\n                   function () {\n                     win['exports'][callbacks[i]].apply(win, arguments);\n                   }, 0);\n               })(i);\n            }\n          } : void 0;\n          prettyPrint(callback);\n        });\n    }\n  }\n  checkPendingLanguages();\n\n}());\n</style></name></name></div>"}],"Post":[{"title":"function和箭头函数的区别","date":"2018-02-05T14:30:13.000Z","_content":"有次在元素onclick事件中使用 箭头函数打印this,却不是当前的元素对象，而是window，本就好奇心严重的我就带着疑问去找原因\n\n```js\ndocument.querySelector('p').onclick = () => {\n    console.log(this)\n}\n// window\n```\n\n<!-- more -->\n\n箭头函数 Arrow functions ：箭头函数与现有函数不同，但并不是用来替代现有函数的，他一般是用来作为回调函数使用的，主要目的是为了简化回调函数的写法：\n箭头函数本身是没有this的，函数内的this执行箭头函数 定义时所在的对象，而不是使用时所在的对象，\n\n箭头函数内部，不存在arguments对象\n\n不可以当作构造函数，不可以使用new指令\n\n简化回调函数\n```js\ndocument.querySelector('p').onclick = () => {\n    console.log(this)\n}\n// windoiw  使用箭头函数自身是没有this值的\n\nvar x = '1';\nvar set = x => {\n\tconsole.log(x)\n\tconsole.log(arguments)\n}\nset(2)\n// 2\n// ReferenceError: arguments is not defined\n// 箭头函数没有arguments值\n\nfunction set(x){\n    console.log(x)\n}\nvar s = new set(1)\n// 1\n\nset = x => {\n\tconsole.log(x)\n}\nvar s = new set(1)\n// Uncaught TypeError: set is not a constructor\n// 一般函数可以用new指令，但是箭头函数不能使用new指令\n\n```\n\n","source":"_posts/function和箭头函数的区别.md","raw":"---\ntitle: function和箭头函数的区别\ndate: 2018-02-05 22:30:13\ntags: 主页\n---\n有次在元素onclick事件中使用 箭头函数打印this,却不是当前的元素对象，而是window，本就好奇心严重的我就带着疑问去找原因\n\n```js\ndocument.querySelector('p').onclick = () => {\n    console.log(this)\n}\n// window\n```\n\n<!-- more -->\n\n箭头函数 Arrow functions ：箭头函数与现有函数不同，但并不是用来替代现有函数的，他一般是用来作为回调函数使用的，主要目的是为了简化回调函数的写法：\n箭头函数本身是没有this的，函数内的this执行箭头函数 定义时所在的对象，而不是使用时所在的对象，\n\n箭头函数内部，不存在arguments对象\n\n不可以当作构造函数，不可以使用new指令\n\n简化回调函数\n```js\ndocument.querySelector('p').onclick = () => {\n    console.log(this)\n}\n// windoiw  使用箭头函数自身是没有this值的\n\nvar x = '1';\nvar set = x => {\n\tconsole.log(x)\n\tconsole.log(arguments)\n}\nset(2)\n// 2\n// ReferenceError: arguments is not defined\n// 箭头函数没有arguments值\n\nfunction set(x){\n    console.log(x)\n}\nvar s = new set(1)\n// 1\n\nset = x => {\n\tconsole.log(x)\n}\nvar s = new set(1)\n// Uncaught TypeError: set is not a constructor\n// 一般函数可以用new指令，但是箭头函数不能使用new指令\n\n```\n\n","slug":"function和箭头函数的区别","published":1,"updated":"2018-04-24T14:27:38.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb604c0000a4vbwg16dadr","content":"<p>有次在元素onclick事件中使用 箭头函数打印this,却不是当前的元素对象，而是window，本就好奇心严重的我就带着疑问去找原因</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>箭头函数 Arrow functions ：箭头函数与现有函数不同，但并不是用来替代现有函数的，他一般是用来作为回调函数使用的，主要目的是为了简化回调函数的写法：<br>箭头函数本身是没有this的，函数内的this执行箭头函数 定义时所在的对象，而不是使用时所在的对象，</p>\n<p>箭头函数内部，不存在arguments对象</p>\n<p>不可以当作构造函数，不可以使用new指令</p>\n<p>简化回调函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// windoiw  使用箭头函数自身是没有this值的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">set(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: arguments is not defined</span></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数没有arguments值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> set(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">set = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> set(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: set is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 一般函数可以用new指令，但是箭头函数不能使用new指令</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>有次在元素onclick事件中使用 箭头函数打印this,却不是当前的元素对象，而是window，本就好奇心严重的我就带着疑问去找原因</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>","more":"<p>箭头函数 Arrow functions ：箭头函数与现有函数不同，但并不是用来替代现有函数的，他一般是用来作为回调函数使用的，主要目的是为了简化回调函数的写法：<br>箭头函数本身是没有this的，函数内的this执行箭头函数 定义时所在的对象，而不是使用时所在的对象，</p>\n<p>箭头函数内部，不存在arguments对象</p>\n<p>不可以当作构造函数，不可以使用new指令</p>\n<p>简化回调函数<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'p'</span>).onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// windoiw  使用箭头函数自身是没有this值的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">set(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// ReferenceError: arguments is not defined</span></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数没有arguments值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> set(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">set = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> set(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// Uncaught TypeError: set is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 一般函数可以用new指令，但是箭头函数不能使用new指令</span></span><br></pre></td></tr></table></figure></p>"},{"title":"Vuex2.0+bmob（一）","date":"2018-01-09T05:53:35.000Z","_content":"\n## 一、准备工作\n\nBmob文档：[http://doc.bmob.cn/data/javascript/develop_doc/](http://doc.bmob.cn/data/javascript/develop_doc/)\n\nVue文档：[https://vuex.vuejs.org/zh-cn/intro.html](https://vuex.vuejs.org/zh-cn/intro.html)\n\n在线演示:http://www.zongdusir.top/bmob-blog/dist/index.html#/\n\nGithub：https://github.com/ZongDuCha/bmob-blog\n\n<!-- more -->\n\n\n部分gif：\n\n![1](bmob-1.gif)\n\n![2](bmob-2.gif)\n\n\n\n用到的东西：\n\n```\nSass\nNProgress\nVuex\nVue-Router\nES6\nsass-resources-loader\nfont-awesome\nfont-awesome-animation\nwangEditor\n```\n\n已完成的功能：\n[✔] 登录帐号 (保存至localStorage)\n[✔] 注册帐号\n[✔] 自制 通用桌面提示组件\n[✔] 不需要登录进入首页 (随便看看)\n[✔] 首页文章显示\n[✔] 自制 首页底部滚动 无限刷新数据\n[✔] Tab 切换文章分类\n[✔] 登录后退出 (清除localStorage)\n[✔] 响应式制作\n[✔] 点击文章查看内容\n[✔] 文章评论 (需要登录)\n[✔] 修改文章\n[✔] 编辑文章\n[✔] 查看个人信息\n[✔] 编辑个人信息\n\n后续：\n[✖] 发表文章\n[✖] 头像更换\n[✖] 文章点赞\n\n感兴趣的同学可以看一下，有问题的话欢迎交流，顺便给个start！","source":"_posts/Vuex2-0-bmob 博客项目.md","raw":"---\ntitle: Vuex2.0+bmob（一）\ndate: 2018-01-09 13:53:35\ntags:\n---\n\n## 一、准备工作\n\nBmob文档：[http://doc.bmob.cn/data/javascript/develop_doc/](http://doc.bmob.cn/data/javascript/develop_doc/)\n\nVue文档：[https://vuex.vuejs.org/zh-cn/intro.html](https://vuex.vuejs.org/zh-cn/intro.html)\n\n在线演示:http://www.zongdusir.top/bmob-blog/dist/index.html#/\n\nGithub：https://github.com/ZongDuCha/bmob-blog\n\n<!-- more -->\n\n\n部分gif：\n\n![1](bmob-1.gif)\n\n![2](bmob-2.gif)\n\n\n\n用到的东西：\n\n```\nSass\nNProgress\nVuex\nVue-Router\nES6\nsass-resources-loader\nfont-awesome\nfont-awesome-animation\nwangEditor\n```\n\n已完成的功能：\n[✔] 登录帐号 (保存至localStorage)\n[✔] 注册帐号\n[✔] 自制 通用桌面提示组件\n[✔] 不需要登录进入首页 (随便看看)\n[✔] 首页文章显示\n[✔] 自制 首页底部滚动 无限刷新数据\n[✔] Tab 切换文章分类\n[✔] 登录后退出 (清除localStorage)\n[✔] 响应式制作\n[✔] 点击文章查看内容\n[✔] 文章评论 (需要登录)\n[✔] 修改文章\n[✔] 编辑文章\n[✔] 查看个人信息\n[✔] 编辑个人信息\n\n后续：\n[✖] 发表文章\n[✖] 头像更换\n[✖] 文章点赞\n\n感兴趣的同学可以看一下，有问题的话欢迎交流，顺便给个start！","slug":"Vuex2-0-bmob 博客项目","published":1,"updated":"2018-04-24T14:27:38.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb604m0001a4vba7d99iy9","content":"<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><p>Bmob文档：<a href=\"http://doc.bmob.cn/data/javascript/develop_doc/\" target=\"_blank\" rel=\"noopener\">http://doc.bmob.cn/data/javascript/develop_doc/</a></p>\n<p>Vue文档：<a href=\"https://vuex.vuejs.org/zh-cn/intro.html\" target=\"_blank\" rel=\"noopener\">https://vuex.vuejs.org/zh-cn/intro.html</a></p>\n<p>在线演示:<a href=\"http://www.zongdusir.top/bmob-blog/dist/index.html#/\" target=\"_blank\" rel=\"noopener\">http://www.zongdusir.top/bmob-blog/dist/index.html#/</a></p>\n<p>Github：<a href=\"https://github.com/ZongDuCha/bmob-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/ZongDuCha/bmob-blog</a></p>\n<a id=\"more\"></a>\n<p>部分gif：</p>\n<p><img src=\"bmob-1.gif\" alt=\"1\"></p>\n<p><img src=\"bmob-2.gif\" alt=\"2\"></p>\n<p>用到的东西：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sass</span><br><span class=\"line\">NProgress</span><br><span class=\"line\">Vuex</span><br><span class=\"line\">Vue-Router</span><br><span class=\"line\">ES6</span><br><span class=\"line\">sass-resources-loader</span><br><span class=\"line\">font-awesome</span><br><span class=\"line\">font-awesome-animation</span><br><span class=\"line\">wangEditor</span><br></pre></td></tr></table></figure>\n<p>已完成的功能：<br>[✔] 登录帐号 (保存至localStorage)<br>[✔] 注册帐号<br>[✔] 自制 通用桌面提示组件<br>[✔] 不需要登录进入首页 (随便看看)<br>[✔] 首页文章显示<br>[✔] 自制 首页底部滚动 无限刷新数据<br>[✔] Tab 切换文章分类<br>[✔] 登录后退出 (清除localStorage)<br>[✔] 响应式制作<br>[✔] 点击文章查看内容<br>[✔] 文章评论 (需要登录)<br>[✔] 修改文章<br>[✔] 编辑文章<br>[✔] 查看个人信息<br>[✔] 编辑个人信息</p>\n<p>后续：<br>[✖] 发表文章<br>[✖] 头像更换<br>[✖] 文章点赞</p>\n<p>感兴趣的同学可以看一下，有问题的话欢迎交流，顺便给个start！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><p>Bmob文档：<a href=\"http://doc.bmob.cn/data/javascript/develop_doc/\" target=\"_blank\" rel=\"noopener\">http://doc.bmob.cn/data/javascript/develop_doc/</a></p>\n<p>Vue文档：<a href=\"https://vuex.vuejs.org/zh-cn/intro.html\" target=\"_blank\" rel=\"noopener\">https://vuex.vuejs.org/zh-cn/intro.html</a></p>\n<p>在线演示:<a href=\"http://www.zongdusir.top/bmob-blog/dist/index.html#/\" target=\"_blank\" rel=\"noopener\">http://www.zongdusir.top/bmob-blog/dist/index.html#/</a></p>\n<p>Github：<a href=\"https://github.com/ZongDuCha/bmob-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/ZongDuCha/bmob-blog</a></p>","more":"<p>部分gif：</p>\n<p><img src=\"bmob-1.gif\" alt=\"1\"></p>\n<p><img src=\"bmob-2.gif\" alt=\"2\"></p>\n<p>用到的东西：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sass</span><br><span class=\"line\">NProgress</span><br><span class=\"line\">Vuex</span><br><span class=\"line\">Vue-Router</span><br><span class=\"line\">ES6</span><br><span class=\"line\">sass-resources-loader</span><br><span class=\"line\">font-awesome</span><br><span class=\"line\">font-awesome-animation</span><br><span class=\"line\">wangEditor</span><br></pre></td></tr></table></figure>\n<p>已完成的功能：<br>[✔] 登录帐号 (保存至localStorage)<br>[✔] 注册帐号<br>[✔] 自制 通用桌面提示组件<br>[✔] 不需要登录进入首页 (随便看看)<br>[✔] 首页文章显示<br>[✔] 自制 首页底部滚动 无限刷新数据<br>[✔] Tab 切换文章分类<br>[✔] 登录后退出 (清除localStorage)<br>[✔] 响应式制作<br>[✔] 点击文章查看内容<br>[✔] 文章评论 (需要登录)<br>[✔] 修改文章<br>[✔] 编辑文章<br>[✔] 查看个人信息<br>[✔] 编辑个人信息</p>\n<p>后续：<br>[✖] 发表文章<br>[✖] 头像更换<br>[✖] 文章点赞</p>\n<p>感兴趣的同学可以看一下，有问题的话欢迎交流，顺便给个start！</p>"},{"title":"css-Grid","date":"2018-01-02T10:05:21.000Z","_content":"<blockquote>[首发于：](https://github.com/ZongDuCha/ZD-1.0)https://github.com/ZongDuCha/ZD-1.0\n[掘金：](https://juejin.im/post/5a374a905188257d38440e4b)https://juejin.im/post/5a374a905188257d38440e4b</blockquote>\n\n\ndisplay:gri\n\n最近时间在了解css3 中不太常用的grid布局，但是却又非常的好用\n\n以前不管我们怎么布局，大多数用的都是一维布局，在复杂的场景下非常难用\n\n<!-- more --> \n\n而grid使用的是类似与table的二维布局\n\n\n\n(grid 兼容情况)\n\n一开始父元素声明布局为grid\n\n.grid{ display:grid; } \ngrid-template-columns\ngrid-template-rous\n然后使用grid-template-columns 定义列, grid-template-rous 定义行 ,创建一个4行4列的布局\n\n```css\n.grid{ \n    border: 1px solid #000;     width: 350px;    margin: 0 auto;     display:grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;     grid-template-rows: 50px 50px 50px 50px; \n} \n```\n\n\nfr单位可以帮助我们创建一个弹列的网格轨道。它代表了网格容器中可用的空间（就像Flexbox中无单位的值）\n\n用浏览器查看效果（我用的是谷歌）\n\n可以看到已经有4行4列的效果了\n\n\n\n可以指定某行的宽度或高度，比如第二列的第二行高度为50%，宽度为50%\n\n```\ngrid-template-columns: 1fr 50% 1fr 1fr; \ngrid-template-rows: 50px 100px 50px 50px;\n```\n\n\n还可以使用grid-gap给相邻的网络增加10px的缝隙\n\n```css\n.grid{ \n    border: 1px solid #000; \n    width: 95%;\n    margin: 0 auto; \n    display:grid;\n    grid-template-columns: 1fr 50% 1fr 1fr; \n    grid-template-rows: 20px 50px 20px 20px; \n    grid-gap:10px;\n} \n```\n\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068aa63fff6e38?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n在grid容器里写一个grid-list的div \n\n```\n.grid-list{ grid-column:4; grid-row:2; } \n```\n\n\n可以看到grid-column：4把位置放在了父容器网格列中的第四列\n\n而grid-row：2放在了父容器网格行的第二行。\n\n而且grid-column，grid-row很有意思，写多几个div\n\n```html\n<div class=\"grid\">    \n    <div class=\"grid-list\">1</div>    \n    <div class=\"grid-list\">2</div>    \n    <div class=\"grid-list\">3</div>\n</div>\n\n.grid-list:nth-child(1){    grid-column:7;    grid-row:7;}\n.grid-list:nth-child(2){    grid-column:6;    grid-row:6;}\n.grid-list:nth-child(3){    grid-column:5;    grid-row:5;}\n```\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b00766ad58c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n可以看到子元素定义grid-column,grid-row可以改变在网格的位置\n\n可以用斜线（开头/结尾）这样写\n\n```css\n.grid-list:nth-child(1){ grid-column: 1/5;}\n .grid-list:nth-child(2){ grid-column: 1;grid-row:2/4}\n.grid-list:nth-child(3){ grid-column: 3/5;grid-row: 3/5;}\n```\n\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b4b50f0643a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b6f3a7477aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b6d294a2c5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n\n\n\n同样的方式有\n\ngrid-column-start （行的开头）               grid-column-end（行的结尾）\n\ngrid-row-start （列的开头）                     grid-row-end（列的结尾）\n\n\n```css\n.grid-list:nth-child(1){ grid-column-start:1;grid-column-end:5} \n.grid-list:nth-child(2){ grid-column-start:1;grid-row-start:2;grid-row-end:4}\n.grid-list:nth-child(3){ grid-column-start: 3;grid-column-end:5;grid-row-start: 3;grid-row-end: 5;}\n```\n结果跟上面的一样，感觉比较复杂\n\n个人心得，未来的布局应该会大部分使用grid，现在赶紧学习学习\n\n\n\n<blockquote>在ie11下grid不能使用，有什么办法呢？\n使用：https://github.com/FremyCompany/css-grid-polyfill    （目前还是1.0）</blockquote>\n","source":"_posts/css-Grid.md","raw":"---\ntitle: css-Grid\ndate: 2018-01-02 18:05:21\ntags: 主页\n---\n<blockquote>[首发于：](https://github.com/ZongDuCha/ZD-1.0)https://github.com/ZongDuCha/ZD-1.0\n[掘金：](https://juejin.im/post/5a374a905188257d38440e4b)https://juejin.im/post/5a374a905188257d38440e4b</blockquote>\n\n\ndisplay:gri\n\n最近时间在了解css3 中不太常用的grid布局，但是却又非常的好用\n\n以前不管我们怎么布局，大多数用的都是一维布局，在复杂的场景下非常难用\n\n<!-- more --> \n\n而grid使用的是类似与table的二维布局\n\n\n\n(grid 兼容情况)\n\n一开始父元素声明布局为grid\n\n.grid{ display:grid; } \ngrid-template-columns\ngrid-template-rous\n然后使用grid-template-columns 定义列, grid-template-rous 定义行 ,创建一个4行4列的布局\n\n```css\n.grid{ \n    border: 1px solid #000;     width: 350px;    margin: 0 auto;     display:grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;     grid-template-rows: 50px 50px 50px 50px; \n} \n```\n\n\nfr单位可以帮助我们创建一个弹列的网格轨道。它代表了网格容器中可用的空间（就像Flexbox中无单位的值）\n\n用浏览器查看效果（我用的是谷歌）\n\n可以看到已经有4行4列的效果了\n\n\n\n可以指定某行的宽度或高度，比如第二列的第二行高度为50%，宽度为50%\n\n```\ngrid-template-columns: 1fr 50% 1fr 1fr; \ngrid-template-rows: 50px 100px 50px 50px;\n```\n\n\n还可以使用grid-gap给相邻的网络增加10px的缝隙\n\n```css\n.grid{ \n    border: 1px solid #000; \n    width: 95%;\n    margin: 0 auto; \n    display:grid;\n    grid-template-columns: 1fr 50% 1fr 1fr; \n    grid-template-rows: 20px 50px 20px 20px; \n    grid-gap:10px;\n} \n```\n\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068aa63fff6e38?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n在grid容器里写一个grid-list的div \n\n```\n.grid-list{ grid-column:4; grid-row:2; } \n```\n\n\n可以看到grid-column：4把位置放在了父容器网格列中的第四列\n\n而grid-row：2放在了父容器网格行的第二行。\n\n而且grid-column，grid-row很有意思，写多几个div\n\n```html\n<div class=\"grid\">    \n    <div class=\"grid-list\">1</div>    \n    <div class=\"grid-list\">2</div>    \n    <div class=\"grid-list\">3</div>\n</div>\n\n.grid-list:nth-child(1){    grid-column:7;    grid-row:7;}\n.grid-list:nth-child(2){    grid-column:6;    grid-row:6;}\n.grid-list:nth-child(3){    grid-column:5;    grid-row:5;}\n```\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b00766ad58c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n可以看到子元素定义grid-column,grid-row可以改变在网格的位置\n\n可以用斜线（开头/结尾）这样写\n\n```css\n.grid-list:nth-child(1){ grid-column: 1/5;}\n .grid-list:nth-child(2){ grid-column: 1;grid-row:2/4}\n.grid-list:nth-child(3){ grid-column: 3/5;grid-row: 3/5;}\n```\n\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b4b50f0643a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b6f3a7477aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n![](https://user-gold-cdn.xitu.io/2017/12/18/16068b6d294a2c5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n\n\n\n\n\n同样的方式有\n\ngrid-column-start （行的开头）               grid-column-end（行的结尾）\n\ngrid-row-start （列的开头）                     grid-row-end（列的结尾）\n\n\n```css\n.grid-list:nth-child(1){ grid-column-start:1;grid-column-end:5} \n.grid-list:nth-child(2){ grid-column-start:1;grid-row-start:2;grid-row-end:4}\n.grid-list:nth-child(3){ grid-column-start: 3;grid-column-end:5;grid-row-start: 3;grid-row-end: 5;}\n```\n结果跟上面的一样，感觉比较复杂\n\n个人心得，未来的布局应该会大部分使用grid，现在赶紧学习学习\n\n\n\n<blockquote>在ie11下grid不能使用，有什么办法呢？\n使用：https://github.com/FremyCompany/css-grid-polyfill    （目前还是1.0）</blockquote>\n","slug":"css-Grid","published":1,"updated":"2018-04-24T14:27:38.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb604z0003a4vbizlu34kz","content":"<blockquote><a href=\"https://github.com/ZongDuCha/ZD-1.0\" target=\"_blank\" rel=\"noopener\">首发于：</a><a href=\"https://github.com/ZongDuCha/ZD-1.0\" target=\"_blank\" rel=\"noopener\">https://github.com/ZongDuCha/ZD-1.0</a><br><a href=\"https://juejin.im/post/5a374a905188257d38440e4b\" target=\"_blank\" rel=\"noopener\">掘金：</a><a href=\"https://juejin.im/post/5a374a905188257d38440e4b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a374a905188257d38440e4b</a></blockquote>\n\n\n<p>display:gri</p>\n<p>最近时间在了解css3 中不太常用的grid布局，但是却又非常的好用</p>\n<p>以前不管我们怎么布局，大多数用的都是一维布局，在复杂的场景下非常难用</p>\n<a id=\"more\"></a> \n<p>而grid使用的是类似与table的二维布局</p>\n<p>(grid 兼容情况)</p>\n<p>一开始父元素声明布局为grid</p>\n<p>.grid{ display:grid; }<br>grid-template-columns<br>grid-template-rous<br>然后使用grid-template-columns 定义列, grid-template-rous 定义行 ,创建一个4行4列的布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid</span>&#123; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;     <span class=\"attribute\">width</span>: <span class=\"number\">350px</span>;    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;     <span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr;     <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fr单位可以帮助我们创建一个弹列的网格轨道。它代表了网格容器中可用的空间（就像Flexbox中无单位的值）</p>\n<p>用浏览器查看效果（我用的是谷歌）</p>\n<p>可以看到已经有4行4列的效果了</p>\n<p>可以指定某行的宽度或高度，比如第二列的第二行高度为50%，宽度为50%</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid-template-columns: 1fr 50% 1fr 1fr; </span><br><span class=\"line\">grid-template-rows: 50px 100px 50px 50px;</span><br></pre></td></tr></table></figure>\n<p>还可以使用grid-gap给相邻的网络增加10px的缝隙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid</span>&#123; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">95%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">1</span>fr <span class=\"number\">50%</span> <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr; </span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">20px</span> <span class=\"number\">50px</span> <span class=\"number\">20px</span> <span class=\"number\">20px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">grid-gap</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068aa63fff6e38?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>在grid容器里写一个grid-list的div </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid-list&#123; grid-column:4; grid-row:2; &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到grid-column：4把位置放在了父容器网格列中的第四列</p>\n<p>而grid-row：2放在了父容器网格行的第二行。</p>\n<p>而且grid-column，grid-row很有意思，写多几个div</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid\"</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-list\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-list\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-list\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">.grid-list:nth-child(1)&#123;    grid-column:7;    grid-row:7;&#125;</span><br><span class=\"line\">.grid-list:nth-child(2)&#123;    grid-column:6;    grid-row:6;&#125;</span><br><span class=\"line\">.grid-list:nth-child(3)&#123;    grid-column:5;    grid-row:5;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b00766ad58c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>可以看到子元素定义grid-column,grid-row可以改变在网格的位置</p>\n<p>可以用斜线（开头/结尾）这样写</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123; <span class=\"attribute\">grid-column</span>: <span class=\"number\">1</span>/<span class=\"number\">5</span>;&#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123; <span class=\"attribute\">grid-column</span>: <span class=\"number\">1</span>;<span class=\"attribute\">grid-row</span>:<span class=\"number\">2</span>/<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123; <span class=\"attribute\">grid-column</span>: <span class=\"number\">3</span>/<span class=\"number\">5</span>;<span class=\"attribute\">grid-row</span>: <span class=\"number\">3</span>/<span class=\"number\">5</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b4b50f0643a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b6f3a7477aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b6d294a2c5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>同样的方式有</p>\n<p>grid-column-start （行的开头）               grid-column-end（行的结尾）</p>\n<p>grid-row-start （列的开头）                     grid-row-end（列的结尾）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123; <span class=\"attribute\">grid-column-start</span>:<span class=\"number\">1</span>;<span class=\"attribute\">grid-column-end</span>:<span class=\"number\">5</span>&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123; <span class=\"attribute\">grid-column-start</span>:<span class=\"number\">1</span>;<span class=\"attribute\">grid-row-start</span>:<span class=\"number\">2</span>;<span class=\"attribute\">grid-row-end</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123; <span class=\"attribute\">grid-column-start</span>: <span class=\"number\">3</span>;<span class=\"attribute\">grid-column-end</span>:<span class=\"number\">5</span>;<span class=\"attribute\">grid-row-start</span>: <span class=\"number\">3</span>;<span class=\"attribute\">grid-row-end</span>: <span class=\"number\">5</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>结果跟上面的一样，感觉比较复杂</p>\n<p>个人心得，未来的布局应该会大部分使用grid，现在赶紧学习学习</p>\n<blockquote>在ie11下grid不能使用，有什么办法呢？<br>使用：<a href=\"https://github.com/FremyCompany/css-grid-polyfill\" target=\"_blank\" rel=\"noopener\">https://github.com/FremyCompany/css-grid-polyfill</a>    （目前还是1.0）</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote><a href=\"https://github.com/ZongDuCha/ZD-1.0\" target=\"_blank\" rel=\"noopener\">首发于：</a><a href=\"https://github.com/ZongDuCha/ZD-1.0\" target=\"_blank\" rel=\"noopener\">https://github.com/ZongDuCha/ZD-1.0</a><br><a href=\"https://juejin.im/post/5a374a905188257d38440e4b\" target=\"_blank\" rel=\"noopener\">掘金：</a><a href=\"https://juejin.im/post/5a374a905188257d38440e4b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a374a905188257d38440e4b</a></blockquote>\n\n\n<p>display:gri</p>\n<p>最近时间在了解css3 中不太常用的grid布局，但是却又非常的好用</p>\n<p>以前不管我们怎么布局，大多数用的都是一维布局，在复杂的场景下非常难用</p>","more":"<p>而grid使用的是类似与table的二维布局</p>\n<p>(grid 兼容情况)</p>\n<p>一开始父元素声明布局为grid</p>\n<p>.grid{ display:grid; }<br>grid-template-columns<br>grid-template-rous<br>然后使用grid-template-columns 定义列, grid-template-rous 定义行 ,创建一个4行4列的布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid</span>&#123; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>;     <span class=\"attribute\">width</span>: <span class=\"number\">350px</span>;    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;     <span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr;     <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span> <span class=\"number\">50px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fr单位可以帮助我们创建一个弹列的网格轨道。它代表了网格容器中可用的空间（就像Flexbox中无单位的值）</p>\n<p>用浏览器查看效果（我用的是谷歌）</p>\n<p>可以看到已经有4行4列的效果了</p>\n<p>可以指定某行的宽度或高度，比如第二列的第二行高度为50%，宽度为50%</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grid-template-columns: 1fr 50% 1fr 1fr; </span><br><span class=\"line\">grid-template-rows: 50px 100px 50px 50px;</span><br></pre></td></tr></table></figure>\n<p>还可以使用grid-gap给相邻的网络增加10px的缝隙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid</span>&#123; </span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000</span>; </span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">95%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>:grid;</span><br><span class=\"line\">    <span class=\"attribute\">grid-template-columns</span>: <span class=\"number\">1</span>fr <span class=\"number\">50%</span> <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr; </span><br><span class=\"line\">    <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">20px</span> <span class=\"number\">50px</span> <span class=\"number\">20px</span> <span class=\"number\">20px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">grid-gap</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068aa63fff6e38?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>在grid容器里写一个grid-list的div </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.grid-list&#123; grid-column:4; grid-row:2; &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到grid-column：4把位置放在了父容器网格列中的第四列</p>\n<p>而grid-row：2放在了父容器网格行的第二行。</p>\n<p>而且grid-column，grid-row很有意思，写多几个div</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid\"</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-list\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-list\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"grid-list\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">.grid-list:nth-child(1)&#123;    grid-column:7;    grid-row:7;&#125;</span><br><span class=\"line\">.grid-list:nth-child(2)&#123;    grid-column:6;    grid-row:6;&#125;</span><br><span class=\"line\">.grid-list:nth-child(3)&#123;    grid-column:5;    grid-row:5;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b00766ad58c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>可以看到子元素定义grid-column,grid-row可以改变在网格的位置</p>\n<p>可以用斜线（开头/结尾）这样写</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123; <span class=\"attribute\">grid-column</span>: <span class=\"number\">1</span>/<span class=\"number\">5</span>;&#125;</span><br><span class=\"line\"> <span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123; <span class=\"attribute\">grid-column</span>: <span class=\"number\">1</span>;<span class=\"attribute\">grid-row</span>:<span class=\"number\">2</span>/<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123; <span class=\"attribute\">grid-column</span>: <span class=\"number\">3</span>/<span class=\"number\">5</span>;<span class=\"attribute\">grid-row</span>: <span class=\"number\">3</span>/<span class=\"number\">5</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b4b50f0643a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b6f3a7477aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/12/18/16068b6d294a2c5f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"\"></p>\n<p>同样的方式有</p>\n<p>grid-column-start （行的开头）               grid-column-end（行的结尾）</p>\n<p>grid-row-start （列的开头）                     grid-row-end（列的结尾）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(1)</span>&#123; <span class=\"attribute\">grid-column-start</span>:<span class=\"number\">1</span>;<span class=\"attribute\">grid-column-end</span>:<span class=\"number\">5</span>&#125; </span><br><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123; <span class=\"attribute\">grid-column-start</span>:<span class=\"number\">1</span>;<span class=\"attribute\">grid-row-start</span>:<span class=\"number\">2</span>;<span class=\"attribute\">grid-row-end</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.grid-list</span><span class=\"selector-pseudo\">:nth-child(3)</span>&#123; <span class=\"attribute\">grid-column-start</span>: <span class=\"number\">3</span>;<span class=\"attribute\">grid-column-end</span>:<span class=\"number\">5</span>;<span class=\"attribute\">grid-row-start</span>: <span class=\"number\">3</span>;<span class=\"attribute\">grid-row-end</span>: <span class=\"number\">5</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>结果跟上面的一样，感觉比较复杂</p>\n<p>个人心得，未来的布局应该会大部分使用grid，现在赶紧学习学习</p>\n<blockquote>在ie11下grid不能使用，有什么办法呢？<br>使用：<a href=\"https://github.com/FremyCompany/css-grid-polyfill\" target=\"_blank\" rel=\"noopener\">https://github.com/FremyCompany/css-grid-polyfill</a>    （目前还是1.0）</blockquote>"},{"title":"js复习手记(一)","date":"2018-01-22T13:39:07.000Z","_content":"### 记录一些 易忘，不常用的一些知识\n\n\n### Array.isArray() 用来判断一个变量是否是数组\n\n```javascript\nvar arr = []\nArray.isArray(arr)\n```\n\n除此之外还有五种方式判断一个变量是否是数组\n\n```javascript\n// 1.基于instanceof\na instanceof Array;\n\n// 2.基于constructor\na.constructor === Array\n\n// 3.基于Array.prototype.isProtptypeOf()\nArray.prototype.isPrototypeOf(a)\n\n// 4.基于Object.getPrototypeOf()\nObject.getPrototypeOf(a) === Array.prototype\n\n// 5.Object.prototype.toString.apply()\nObject.prototype.toString.apply(a) === '[Object Array]'\n\n```\n\n<!-- more -->\n\n一般主流框架都是基于最后一种方式去判断\n\n既然用这种方式能够判断是不是数组，那是不是能够判断字符串，数组，对象....?马上实验一波\n\n```javascript\nObject.prototype.toString.call('')                  // \"[object String]\"\n\nObject.prototype.toString.call(new String)          // \"[object String]\"\n\nObject.prototype.toString.call(1)                   // \"[object Number]\"\n\nObject.prototype.toString.call(NaN)                 // \"[object Number]\"\n\nObject.prototype.toString.call(new Number)          // \"[object Number]\"\n\nObject.prototype.toString.call(-'1')                // \"[object Number]\"\n\nObject.prototype.toString.call(new Object)          // \"[object Object]\"\n\nObject.prototype.toString.call({})                  // \"[object Object]\"\n\nObject.prototype.toString.call(new Boolean)         // \"[object Boolean]\"\n\nObject.prototype.toString.call(false)               // \"[object Boolean]\"\n\nObject.prototype.toString.call(null)                // \"[object Null]\"\n\nObject.prototype.toString.call(undefined)           // \"[object Undefined]\"\n\nObject.prototype.toString.call([])                  // \"[object Array]\"\n\nObject.prototype.toString.call(new　Array)          // \"[object Array]\"\n\n```\n\n### typeof \n\ntypeof 一般只返回 `number` `boolean` `string` `function(函数)` `object(object,数组,对象)` `undefined`\n\n\n### Object.getOwnPropertyNames()  遍历方法\n\n`Object.getOwnPropertyNames(window)`\n\n结果可以看出，window下的方法有822个\n```javascript\n[0 … 99]\n[100 … 199]\n[200 … 299]\n[300 … 399]\n[400 … 499]\n[500 … 599]\n[600 … 699]\n[700 … 799]\n[800 … 821]\nlength:822\n__proto__:Array(0)\n```\n\n\n### `pop`  `shift`  `push`  `unshift`  `reverse`  `sort`  `splice`  `copyWithin`  `fill` 这些都是会改变自身的值的数组方法\n\n`pop 删除数组的最后一个元素`\n有意思的是,pop的设计是根据长度进行删除的，也就是说如果在对象中声明了length的长度，也可以删除？\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.pop.call(obj)\nconsole.log(obj)\n\n// {1: \"javascrip\", 2: \"css\", length: 3}\n\n如果length为0，将无法删除\nvar obj = {1:'javascrip',2:'css',3:'vue',length:0}\nArray.prototype.pop.call(obj)\nconsole.log(obj)\n\n//{1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0}\n```\n\n`shift 删除数组的第一个元素`\n同样和pop类似，根据长度删除\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.shift.call(obj)\nconsole.log(obj)\n\n// {0: \"javascrip\", 1: \"css\", 2: \"vue\", length: 3}\n\n如果length为0，也同样无法删除\nvar obj = {1:'javascrip',2:'css',3:'vue',length:0}\nArray.prototype.shift.call(obj)\nconsole.log(obj)\n\n//{1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0}\n```\n\n\n`push 在数组的末尾添加一个或多个元素 并且返回新的数组长度`\n同样是根据长度添加元素，那么可以在指定位置上添加元素？\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.push.call(obj,'jq')\nconsole.log(obj)\n\n// {1: \"javascrip\", 2: \"css\", 3: \"vue\", 4: \"jq\", length: 5}\n\nvar obj = {1:'javascrip',2:'css',3:'vue',length:3}\nArray.prototype.push.call(obj,'jq')\nconsole.log(obj)\n\n// {1: \"javascrip\", 2: \"css\", 3: \"jq\", length: 4}\n只是在指定位置上替换元素\n\n用applay 可实现合并数组\nvar obj = [1] ; var obj1 = [2]\nvar obj3 = Array.prototype.push.apply(obj,obj1)\nconsole.log(obj)\n```\n\n`unshift 在数组开头添加一个或多个元素，并且返回新的数组长度`\n同样可以指定length位置上添加元素，如果使用Array.prorotype.unshift.call(),那么会替换掉第一个原色\n但是如果length为0，那么就会被解释器认为数组长度为0，会从对象的下标0开始插入，相应的位置属性会被替换掉\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.unshift.apply(obj,['w'])\nconsole.log(obj)\n\n// {0: \"w\", 2: \"javascrip\", 3: \"css\", 4: \"vue\", length: 5}\n// 替换掉第一个元素\n\nvar obj = {1:'javascrip',2:'css',3:'vue',length:0}\nArray.prototype.unshift.apply(obj,['w'])\nconsole.log(obj)\n\n// {0: \"w\", 1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 1}\n// 在开头上添加一个元素，实现正常的unshift\n```\n\n`reverse 颠倒数组元素的位置 返回使用该函数的引用`\n同样可以Array.prorotype.unshift.call()，颠倒的顺序只在length的范围内\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:2}\nArray.prototype.reverse.call(obj)\nconsole.log(obj)\n\n// {0: \"javascrip\", 2: \"css\", 3: \"vue\", length: 2}\n\n如果length为0，相当于没有执行\n```\n\n`sort 对数组的元素排序 并返回这个数组`\n`arr.sort([comparefn])`\nsort可以指定一个带返回的comparefn函数，如果省略掉，数组元素就会按照各自转换为Unicode（万国码）位点顺序排序,比如javascript比css靠前，数字排序比较的时候，也会先转换成字符串的Unicode进行排序,比如：'25'比'8'靠前\n\n```javascript\nvar obj = ['javascript','css','vue']\nArray.prototype.sort.call(obj)\nconsole.log(obj)\n\n//  [\"css\", \"javascript\", \"vue\"]\n\nvar obj = ['1','21','13','21']\nArray.prototype.sort.call(obj)\nconsole.log(obj)\n\n//  [\"1\", \"13\", \"21\", \"21\"]\n```\n\n如果指定了带返回的comparefn函数，数组将按照该函数的返回值来排序，若a和b是两个将要比较的元素\n\n```javascript\ncomparefn(a,b) > 0 // 如果b比a大，那么排在前面\ncomparefn(a,b) < 0 // 如果a比b大，那么排在前面\ncomparefn(a,b) = 0 // 相对位置不变\n\n// 也可以在comparefn内直接返回比较后的值\n\ncomparefn(a,b){\n    return a > b // 数字比较可以用： a-b\n}\n\ncomparefn(a,b){\n    return a < b // 数字比较可以用 b - a \n}\n\ncomparefn(a,b){\n    return a = b\n}\n```\n\n如果数组元素为非ASCII字符的字符串（如包含类似 e、é、è、a、ä 或中文等非英文字符的字符串），则需要使用String.localCompare\n\n```javascript\nvar arr = ['互','联','网','改','变','世','界'];\narr.sort(function (a,b){\n    return a.localeCompare(b)\n})\nconsole.log(arr)\n\n// (7) [\"世\", \"互\", \"变\", \"改\", \"界\", \"网\", \"联\"]\n```\n\nsort 也同样适用Array.prorotype.unshift.call()\n\n```javascript\nvar obj = {0:'互',1:'联',2:'网',3:'改',4:'变',5:'世',6:'界',length:4};\nArray.prototype.sort.call(obj,function(a, b){\n  return a.localeCompare(b);\n});\nconsole.log(obj);\n\n// {0: \"互\", 1: \"改\", 2: \"网\", 3: \"联\", 4: \"变\", 5: \"世\", 6: \"界\", length: 4}\n```\n\n### Chrome的不同\nECMAscript规范中并未规定具体的sort算法，这就势必导致各个浏览器不尽相同的sort算法，下面是Chrome下使用sort的表现：\n\n```javascript\narr = [{s:'1',a:'a'},{s:'1',a:'b'},{s:'1',a:\"c\"},{s:'1',a:'d'},{s:'1',a:'e'},{s:'1',a:'f'},{s:'1',a:'g'},{s:'1',a:'h'},{s:'q',a:'i'},{s:'1',a:'j'},{s:'1',a:'k'}]\narr.sort(function(v1,v2){\n\treturn v1.s-v2.s\n})\nfor(let i in arr){\n\tconsole.log(arr[i].a)\n}\n\n// f a c d e b g h i j k\n```\n\n由于s值相等，arr数组排序前后应该不变，然而Chrome输出的却不同，而其他浏览器(如IE 或 Firefox) 表现正常。\n当排序的数组长度超过10条时，会调用另一种排序方法（快速排序）；而10条及以下采用的是插入排序，所以在使用sort排序时改变排序的返回值即可，应该这么写才能将结果准确输出：\n\n```javascript\narr = [{s:'1',a:'a'},{s:'1',a:'b'},{s:'1',a:\"c\"},{s:'1',a:'d'},{s:'1',a:'e'},{s:'1',a:'f'},{s:'1',a:'g'},{s:'1',a:'h'},{s:'q',a:'i'},{s:'1',a:'j'},{s:'1',a:'k'}]\narr.forEach(function(v,k){\n\tv.__index = k\n})\narr.sort(function(v1,v2){\n\treturn v1.s-v2.s || v1.__index - v2.__index\n})\nfor(let i in arr){\n\tconsole.log(arr[i].a)\n}\n\n// a b c d e f g h i j k\n```\n\n而且使用数组的sort的排序方法需要注意的是，各浏览器的针对sort方法的内部算法实现不同，排序函数尽量值返回-1，0，1三种不同的值，不要尝试返回true和false等其它数值，因为可能导致不可靠的排序结果\n\n|睡过   |哈哈  |请问|\n|------ |-----|----|\n|123    |123  |123 |\n\n\n### 不同的浏览器及脚本引擎\n|Browser Name\t|ECMAScript Engine|\n|-----|-----|\n|Internet Explorer 6 - 8\t|JScript|\n|Internet Explorer 9 - 10\t|Chakra|\n|Firefox\t|SpiderMonkey, IonMonkey, TraceMonkey|\n|Chrome\t|V8|\n|Safair\t|JavaScriptCore(SquirrelFish Extreme)|\n|Opera\t|Carakan|\n\n\n分析以下代码，预期将数组元素进行升序排序：\n\n```javascript\nvar array = [7, 6, 5, 4, 3, 2, 1, 0, 8, 9];\nvar comparefn = function (x, y) {\n  return x > y;\n};\narray.sort(comparefn);\n```\n\n代码中，comparefn 函数返回值为 bool 类型，并非为规范规定的 -1、0、1 值。那么执行此代码，各 JS 脚本引擎实现情况如何？\n\n|\t|输出结果|\t是否符合预期|\n|---|------|----------|\n|JScript\t|[2, 3, 5, 1, 4, 6, 7, 0, 8, 9]\t|否|\n|Carakan\t|[0, 1, 3, 8, 2, 4, 9, 5, 6, 7]\t|否|\n|Chakra & JavaScriptCore\t|[7, 6, 5, 4, 3, 2, 1, 0, 8, 9]\t|否|\n|SpiderMonkey\t|[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\t|是|\n|V8\t|[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\t|是|\n\n根据表中数据可见，当数组内元素个数小于等于 10 时，现象如下：\n- JScript & Carakan 排序结果有误\n- Chakra & JavaScriptCore 看起来没有进行排序\n- SpiderMonkey 返回了预期的正确结果\n- V8 暂时看起来排序正确\n\n将数组元素扩大至 11 位，现象如下：\n```javascript\nvar array = [7, 6, 5, 4, 3, 2, 1, 0, 10, 9, 8];\nvar comparefn = function (x, y) {\n  return x > y;\n};\narray.sort(comparefn);\n```\n\n|JavaScript引擎\t|输出结果\t|是否符合预期|\n|----|----|----|\n|JScript\t|[2, 3, 5, 1, 4, 6, 7, 0, 8, 9, 10]\t|否|\n|Carakan\t|[0, 1, 3, 8, 2, 4, 9, 5, 10, 6, 7]\t|否|\n|Chakra & JavaScriptCore\t|[7, 6, 5, 4, 3, 2, 1, 0, 10, 8, 9]\t|否|\n|IonMonkey\t|[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\t|是|\n|V8\t|[5, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10]\t|否|\n\n根据表中数据可见，当数组内元素个数大于 10 时：\n\n- JScript & Carakan 排序结果有误\n- Chakra & JavaScriptCore 看起来没有进行排序\n- SpiderMonkey 返回了预期的正确结果\n- V8 排序结果由正确转为不正确\n\n(感觉sort稍微复杂了点，主要还是ECMAscript规范中并未规定sort算法，所以导致每个浏览器的有不同的算法，不同的结果)\n\n\n### splice 新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\n\n`arr.splice(start,deleteCount[, item1[, item2[, …]]])`\n`start` 指定从哪一位开始修改内容，如果超过了数组的长度，则从数组的末尾开始修改内容；\n如果是负数，则其指定的索引位置等同于length+start（length为数组的长度），表示从数组的末尾开始的第-start位开始；\n\n\n`deleteCount` 指定要删除的元素个数,若等于0,则不删除。这种情况下，至少应该添加一位新元素，若大于start之后的元素和，则start及之后的元素都被删除。\n\n`itemN`  指定替换的删除后的元素或新增元素,如果忽略掉，则该方法只会删除元素\n\n`返回值` 由原数组中被删除元素组成的数组，如果没有删除，则返回一个数组，比如：\n```javascript\nvar array = [\"apple\",\"boy\"];\nvar splices = array.splice(1,1);\nconsole.log(array); // [\"apple\"]\nconsole.log(splices); // [\"boy\"] ,可见是从数组下标为1的元素开始删除,并且删除一个元素,由于itemN缺省,故此时该方法只删除元素\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(2,1,\"cat\");\nconsole.log(array); // [\"apple\", \"boy\", \"cat\"]\nconsole.log(splices); // [], 可见由于start超过数组长度,此时从数组末尾开始添加元素,并且原数组不会发生删除行为\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(-2,1,\"cat\");\nconsole.log(array); // [\"cat\", \"boy\"]\nconsole.log(splices); // [\"apple\"], 可见当start为负值时,是从数组末尾开始的第-start位开始删除,删除一个元素,并且从此处插入了一个元素\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(-3,1,\"cat\");\nconsole.log(array); // [\"cat\", \"boy\"]\nconsole.log(splices); // [\"apple\"], 可见即使-start超出数组长度,数组默认从首位开始删除\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(0,3,\"cat\");\nconsole.log(array); // [\"cat\"]\nconsole.log(splices); // [\"apple\", \"boy\"], 可见当deleteCount大于数组start之后的元素总和时,start及之后的元素都将被删除\n```\n\n同样，splice可以用在Array.prototype.splice.call()上\n\n```javascript\narr = {1:'javascript',2:'css',3:\"jq\",length:'2'}\nArray.prototype.splice.call(arr,1,1)\nconsole.log(arr)\n// {2: \"css\", 3: \"jq\", length: 1}\n```\n\n如果需要删除数组中一个已存在的元素，可参考如下：\n\n```javascript\nvar array = ['a','b','c'];\narray.splice(array.indexOf('b'),1);\n```\n\n\n### copyWihtnin 基于ECMAScript 2015 (es6)规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到 别的位置及属性）\n\n语法：arr.copyWithin(target, start[, end = this.length])\n\n```javascript\narr.copyWithin(target)\n\narr.copyWithin(target, start)\n\narr.copyWithin(target, start, end)\n\narr.copyWithin(目标索引, [源开始索引], [结束源索引])\n```\n\n`target`\n0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。\n如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将   被修改以符合 arr.length。\n\n`start`\n0 为基底的索引，开始复制元素的起始位置。如果是负数，start 则其指定的索引位置等同于length+start,将从末尾开始计算。\n如果 start 被忽略，copyWithin 将会从0开始复制。\n\n`end`\n0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。\n如果 end 被忽略，copyWithin 将会复制到 arr.length。（但是我觉得因为换成：如果 end 被忽略，那么end默认为数组的索引长度，）\n\n`copyWithin`方法不要求其this值必须是一个数组对象；除此之外，copyWithin是一个可变方法，它可以改变this对象本身，并且返回它，而不仅仅是它的拷贝。\n\nMDN的例子很好的说明了：\n\n```javascript\n[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}\n\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\n\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n```\n\n不支持copyWithin,可以使用polyfill\n```javascript\nif (!Array.prototype.copyWithin) {\n  Array.prototype.copyWithin = function(target, start/*, end*/) {\n    // Steps 1-2.\n    if (this == null) {\n      throw new TypeError('this is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // Steps 3-5.\n    var len = O.length >>> 0;\n\n    // Steps 6-8.\n    var relativeTarget = target >> 0;\n\n    var to = relativeTarget < 0 ?\n      Math.max(len + relativeTarget, 0) :\n      Math.min(relativeTarget, len);\n\n    // Steps 9-11.\n    var relativeStart = start >> 0;\n\n    var from = relativeStart < 0 ?\n      Math.max(len + relativeStart, 0) :\n      Math.min(relativeStart, len);\n\n    // Steps 12-14.\n    var end = arguments[2];\n    var relativeEnd = end === undefined ? len : end >> 0;\n\n    var final = relativeEnd < 0 ?\n      Math.max(len + relativeEnd, 0) :\n      Math.min(relativeEnd, len);\n\n    // Step 15.\n    var count = Math.min(final - from, len - to);\n\n    // Steps 16-17.\n    var direction = 1;\n\n    if (from < to && to < (from + count)) {\n      direction = -1;\n      from += count - 1;\n      to += count - 1;\n    }\n\n    // Step 18.\n    while (count > 0) {\n      if (from in O) {\n        O[to] = O[from];\n      } else {\n        delete O[to];\n      }\n\n      from += direction;\n      to += direction;\n      count--;\n    }\n\n    // Step 19.\n    return O;\n  };\n}\n```\n\ncopyWithin也同样可以用Array.prototype.copyWithin.call()\n\n```javascript\nvar o = {0:1, 1:2, 2:3, 3:4, 4:5,length:5}\nArray.prototype.copyWithin.call(o,0,3);\n\n// {0: 4, 1: 5, 2: 3, 3: 4, 4: 5, length: 5}\n```\n\n### fill 用一个固定值替换数组内从起始索引到终止索引直接的全部元素\n\n`arr.fill(value, start, end)` \nvalue替换数组元素的值\nstart起始索引，默认为0，如果是个负数，则开始索引为length+start\nend 终止索引，默认为数组索引的长度，如果是个负数，则终止索引为length+end\n\n```javascript\n[1, 2, 3].fill(4)            // [4, 4, 4]\n[1, 2, 3].fill(4, 1)         // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2)      // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1)      // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2)    // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN)  // [1, 2, 3]\nArray(3).fill(4);            // [4, 4, 4]\n[].fill.call({length: 3}, 4) // {0: 4, 1: 4, 2: 4, length: 3}\n```\n不支持fill可以使用polyfill\n```javascript\nif (!Array.prototype.fill) {\n  Object.defineProperty(Array.prototype, 'fill', {\n    value: function(value) {\n\n      // Steps 1-2.\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      var O = Object(this);\n\n      // Steps 3-5.\n      var len = O.length >>> 0;\n\n      // Steps 6-7.\n      var start = arguments[1];\n      var relativeStart = start >> 0;\n\n      // Step 8.\n      var k = relativeStart < 0 ?\n        Math.max(len + relativeStart, 0) :\n        Math.min(relativeStart, len);\n\n      // Steps 9-10.\n      var end = arguments[2];\n      var relativeEnd = end === undefined ?\n        len : end >> 0;\n\n      // Step 11.\n      var final = relativeEnd < 0 ?\n        Math.max(len + relativeEnd, 0) :\n        Math.min(relativeEnd, len);\n\n      // Step 12.\n      while (k < final) {\n        O[k] = value;\n        k++;\n      }\n\n      // Step 13.\n      return O;\n    }\n  });\n}\n```\n`在MDN上有一句：fill 方法故意被设计成通用方法, 它需要this值是个对象，类数组对象调用会报错`\n\n但是发现 fill 也同样适用于Array.prototype.fill.call()\n\n```javascript\nvar o = {0:1, 1:2, 2:3, 3:4, 4:5,length:5}\nvar o2 = Array.prototype.fill.call(o,10,0,2);\n\n// {0: 10, 1: 10, 2: 3, 3: 4, 4: 5, length: 5}\n```\n\n与copyWithin不同的是，copyWithin是只能数组之间替换元素\n而fill是指定一个固定值然后替换掉数组相应的数组索引\n\n\n参考资料1：http://louiszhai.github.io/2017/04/28/array\n参考资料2：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","source":"_posts/js复习手记-一.md","raw":"---\ntitle: js复习手记(一)\ndate: 2018-01-22 21:39:07\ntags: 主页\n---\n### 记录一些 易忘，不常用的一些知识\n\n\n### Array.isArray() 用来判断一个变量是否是数组\n\n```javascript\nvar arr = []\nArray.isArray(arr)\n```\n\n除此之外还有五种方式判断一个变量是否是数组\n\n```javascript\n// 1.基于instanceof\na instanceof Array;\n\n// 2.基于constructor\na.constructor === Array\n\n// 3.基于Array.prototype.isProtptypeOf()\nArray.prototype.isPrototypeOf(a)\n\n// 4.基于Object.getPrototypeOf()\nObject.getPrototypeOf(a) === Array.prototype\n\n// 5.Object.prototype.toString.apply()\nObject.prototype.toString.apply(a) === '[Object Array]'\n\n```\n\n<!-- more -->\n\n一般主流框架都是基于最后一种方式去判断\n\n既然用这种方式能够判断是不是数组，那是不是能够判断字符串，数组，对象....?马上实验一波\n\n```javascript\nObject.prototype.toString.call('')                  // \"[object String]\"\n\nObject.prototype.toString.call(new String)          // \"[object String]\"\n\nObject.prototype.toString.call(1)                   // \"[object Number]\"\n\nObject.prototype.toString.call(NaN)                 // \"[object Number]\"\n\nObject.prototype.toString.call(new Number)          // \"[object Number]\"\n\nObject.prototype.toString.call(-'1')                // \"[object Number]\"\n\nObject.prototype.toString.call(new Object)          // \"[object Object]\"\n\nObject.prototype.toString.call({})                  // \"[object Object]\"\n\nObject.prototype.toString.call(new Boolean)         // \"[object Boolean]\"\n\nObject.prototype.toString.call(false)               // \"[object Boolean]\"\n\nObject.prototype.toString.call(null)                // \"[object Null]\"\n\nObject.prototype.toString.call(undefined)           // \"[object Undefined]\"\n\nObject.prototype.toString.call([])                  // \"[object Array]\"\n\nObject.prototype.toString.call(new　Array)          // \"[object Array]\"\n\n```\n\n### typeof \n\ntypeof 一般只返回 `number` `boolean` `string` `function(函数)` `object(object,数组,对象)` `undefined`\n\n\n### Object.getOwnPropertyNames()  遍历方法\n\n`Object.getOwnPropertyNames(window)`\n\n结果可以看出，window下的方法有822个\n```javascript\n[0 … 99]\n[100 … 199]\n[200 … 299]\n[300 … 399]\n[400 … 499]\n[500 … 599]\n[600 … 699]\n[700 … 799]\n[800 … 821]\nlength:822\n__proto__:Array(0)\n```\n\n\n### `pop`  `shift`  `push`  `unshift`  `reverse`  `sort`  `splice`  `copyWithin`  `fill` 这些都是会改变自身的值的数组方法\n\n`pop 删除数组的最后一个元素`\n有意思的是,pop的设计是根据长度进行删除的，也就是说如果在对象中声明了length的长度，也可以删除？\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.pop.call(obj)\nconsole.log(obj)\n\n// {1: \"javascrip\", 2: \"css\", length: 3}\n\n如果length为0，将无法删除\nvar obj = {1:'javascrip',2:'css',3:'vue',length:0}\nArray.prototype.pop.call(obj)\nconsole.log(obj)\n\n//{1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0}\n```\n\n`shift 删除数组的第一个元素`\n同样和pop类似，根据长度删除\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.shift.call(obj)\nconsole.log(obj)\n\n// {0: \"javascrip\", 1: \"css\", 2: \"vue\", length: 3}\n\n如果length为0，也同样无法删除\nvar obj = {1:'javascrip',2:'css',3:'vue',length:0}\nArray.prototype.shift.call(obj)\nconsole.log(obj)\n\n//{1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0}\n```\n\n\n`push 在数组的末尾添加一个或多个元素 并且返回新的数组长度`\n同样是根据长度添加元素，那么可以在指定位置上添加元素？\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.push.call(obj,'jq')\nconsole.log(obj)\n\n// {1: \"javascrip\", 2: \"css\", 3: \"vue\", 4: \"jq\", length: 5}\n\nvar obj = {1:'javascrip',2:'css',3:'vue',length:3}\nArray.prototype.push.call(obj,'jq')\nconsole.log(obj)\n\n// {1: \"javascrip\", 2: \"css\", 3: \"jq\", length: 4}\n只是在指定位置上替换元素\n\n用applay 可实现合并数组\nvar obj = [1] ; var obj1 = [2]\nvar obj3 = Array.prototype.push.apply(obj,obj1)\nconsole.log(obj)\n```\n\n`unshift 在数组开头添加一个或多个元素，并且返回新的数组长度`\n同样可以指定length位置上添加元素，如果使用Array.prorotype.unshift.call(),那么会替换掉第一个原色\n但是如果length为0，那么就会被解释器认为数组长度为0，会从对象的下标0开始插入，相应的位置属性会被替换掉\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:4}\nArray.prototype.unshift.apply(obj,['w'])\nconsole.log(obj)\n\n// {0: \"w\", 2: \"javascrip\", 3: \"css\", 4: \"vue\", length: 5}\n// 替换掉第一个元素\n\nvar obj = {1:'javascrip',2:'css',3:'vue',length:0}\nArray.prototype.unshift.apply(obj,['w'])\nconsole.log(obj)\n\n// {0: \"w\", 1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 1}\n// 在开头上添加一个元素，实现正常的unshift\n```\n\n`reverse 颠倒数组元素的位置 返回使用该函数的引用`\n同样可以Array.prorotype.unshift.call()，颠倒的顺序只在length的范围内\n\n```javascript\nvar obj = {1:'javascrip',2:'css',3:'vue',length:2}\nArray.prototype.reverse.call(obj)\nconsole.log(obj)\n\n// {0: \"javascrip\", 2: \"css\", 3: \"vue\", length: 2}\n\n如果length为0，相当于没有执行\n```\n\n`sort 对数组的元素排序 并返回这个数组`\n`arr.sort([comparefn])`\nsort可以指定一个带返回的comparefn函数，如果省略掉，数组元素就会按照各自转换为Unicode（万国码）位点顺序排序,比如javascript比css靠前，数字排序比较的时候，也会先转换成字符串的Unicode进行排序,比如：'25'比'8'靠前\n\n```javascript\nvar obj = ['javascript','css','vue']\nArray.prototype.sort.call(obj)\nconsole.log(obj)\n\n//  [\"css\", \"javascript\", \"vue\"]\n\nvar obj = ['1','21','13','21']\nArray.prototype.sort.call(obj)\nconsole.log(obj)\n\n//  [\"1\", \"13\", \"21\", \"21\"]\n```\n\n如果指定了带返回的comparefn函数，数组将按照该函数的返回值来排序，若a和b是两个将要比较的元素\n\n```javascript\ncomparefn(a,b) > 0 // 如果b比a大，那么排在前面\ncomparefn(a,b) < 0 // 如果a比b大，那么排在前面\ncomparefn(a,b) = 0 // 相对位置不变\n\n// 也可以在comparefn内直接返回比较后的值\n\ncomparefn(a,b){\n    return a > b // 数字比较可以用： a-b\n}\n\ncomparefn(a,b){\n    return a < b // 数字比较可以用 b - a \n}\n\ncomparefn(a,b){\n    return a = b\n}\n```\n\n如果数组元素为非ASCII字符的字符串（如包含类似 e、é、è、a、ä 或中文等非英文字符的字符串），则需要使用String.localCompare\n\n```javascript\nvar arr = ['互','联','网','改','变','世','界'];\narr.sort(function (a,b){\n    return a.localeCompare(b)\n})\nconsole.log(arr)\n\n// (7) [\"世\", \"互\", \"变\", \"改\", \"界\", \"网\", \"联\"]\n```\n\nsort 也同样适用Array.prorotype.unshift.call()\n\n```javascript\nvar obj = {0:'互',1:'联',2:'网',3:'改',4:'变',5:'世',6:'界',length:4};\nArray.prototype.sort.call(obj,function(a, b){\n  return a.localeCompare(b);\n});\nconsole.log(obj);\n\n// {0: \"互\", 1: \"改\", 2: \"网\", 3: \"联\", 4: \"变\", 5: \"世\", 6: \"界\", length: 4}\n```\n\n### Chrome的不同\nECMAscript规范中并未规定具体的sort算法，这就势必导致各个浏览器不尽相同的sort算法，下面是Chrome下使用sort的表现：\n\n```javascript\narr = [{s:'1',a:'a'},{s:'1',a:'b'},{s:'1',a:\"c\"},{s:'1',a:'d'},{s:'1',a:'e'},{s:'1',a:'f'},{s:'1',a:'g'},{s:'1',a:'h'},{s:'q',a:'i'},{s:'1',a:'j'},{s:'1',a:'k'}]\narr.sort(function(v1,v2){\n\treturn v1.s-v2.s\n})\nfor(let i in arr){\n\tconsole.log(arr[i].a)\n}\n\n// f a c d e b g h i j k\n```\n\n由于s值相等，arr数组排序前后应该不变，然而Chrome输出的却不同，而其他浏览器(如IE 或 Firefox) 表现正常。\n当排序的数组长度超过10条时，会调用另一种排序方法（快速排序）；而10条及以下采用的是插入排序，所以在使用sort排序时改变排序的返回值即可，应该这么写才能将结果准确输出：\n\n```javascript\narr = [{s:'1',a:'a'},{s:'1',a:'b'},{s:'1',a:\"c\"},{s:'1',a:'d'},{s:'1',a:'e'},{s:'1',a:'f'},{s:'1',a:'g'},{s:'1',a:'h'},{s:'q',a:'i'},{s:'1',a:'j'},{s:'1',a:'k'}]\narr.forEach(function(v,k){\n\tv.__index = k\n})\narr.sort(function(v1,v2){\n\treturn v1.s-v2.s || v1.__index - v2.__index\n})\nfor(let i in arr){\n\tconsole.log(arr[i].a)\n}\n\n// a b c d e f g h i j k\n```\n\n而且使用数组的sort的排序方法需要注意的是，各浏览器的针对sort方法的内部算法实现不同，排序函数尽量值返回-1，0，1三种不同的值，不要尝试返回true和false等其它数值，因为可能导致不可靠的排序结果\n\n|睡过   |哈哈  |请问|\n|------ |-----|----|\n|123    |123  |123 |\n\n\n### 不同的浏览器及脚本引擎\n|Browser Name\t|ECMAScript Engine|\n|-----|-----|\n|Internet Explorer 6 - 8\t|JScript|\n|Internet Explorer 9 - 10\t|Chakra|\n|Firefox\t|SpiderMonkey, IonMonkey, TraceMonkey|\n|Chrome\t|V8|\n|Safair\t|JavaScriptCore(SquirrelFish Extreme)|\n|Opera\t|Carakan|\n\n\n分析以下代码，预期将数组元素进行升序排序：\n\n```javascript\nvar array = [7, 6, 5, 4, 3, 2, 1, 0, 8, 9];\nvar comparefn = function (x, y) {\n  return x > y;\n};\narray.sort(comparefn);\n```\n\n代码中，comparefn 函数返回值为 bool 类型，并非为规范规定的 -1、0、1 值。那么执行此代码，各 JS 脚本引擎实现情况如何？\n\n|\t|输出结果|\t是否符合预期|\n|---|------|----------|\n|JScript\t|[2, 3, 5, 1, 4, 6, 7, 0, 8, 9]\t|否|\n|Carakan\t|[0, 1, 3, 8, 2, 4, 9, 5, 6, 7]\t|否|\n|Chakra & JavaScriptCore\t|[7, 6, 5, 4, 3, 2, 1, 0, 8, 9]\t|否|\n|SpiderMonkey\t|[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\t|是|\n|V8\t|[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\t|是|\n\n根据表中数据可见，当数组内元素个数小于等于 10 时，现象如下：\n- JScript & Carakan 排序结果有误\n- Chakra & JavaScriptCore 看起来没有进行排序\n- SpiderMonkey 返回了预期的正确结果\n- V8 暂时看起来排序正确\n\n将数组元素扩大至 11 位，现象如下：\n```javascript\nvar array = [7, 6, 5, 4, 3, 2, 1, 0, 10, 9, 8];\nvar comparefn = function (x, y) {\n  return x > y;\n};\narray.sort(comparefn);\n```\n\n|JavaScript引擎\t|输出结果\t|是否符合预期|\n|----|----|----|\n|JScript\t|[2, 3, 5, 1, 4, 6, 7, 0, 8, 9, 10]\t|否|\n|Carakan\t|[0, 1, 3, 8, 2, 4, 9, 5, 10, 6, 7]\t|否|\n|Chakra & JavaScriptCore\t|[7, 6, 5, 4, 3, 2, 1, 0, 10, 8, 9]\t|否|\n|IonMonkey\t|[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\t|是|\n|V8\t|[5, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10]\t|否|\n\n根据表中数据可见，当数组内元素个数大于 10 时：\n\n- JScript & Carakan 排序结果有误\n- Chakra & JavaScriptCore 看起来没有进行排序\n- SpiderMonkey 返回了预期的正确结果\n- V8 排序结果由正确转为不正确\n\n(感觉sort稍微复杂了点，主要还是ECMAscript规范中并未规定sort算法，所以导致每个浏览器的有不同的算法，不同的结果)\n\n\n### splice 新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\n\n`arr.splice(start,deleteCount[, item1[, item2[, …]]])`\n`start` 指定从哪一位开始修改内容，如果超过了数组的长度，则从数组的末尾开始修改内容；\n如果是负数，则其指定的索引位置等同于length+start（length为数组的长度），表示从数组的末尾开始的第-start位开始；\n\n\n`deleteCount` 指定要删除的元素个数,若等于0,则不删除。这种情况下，至少应该添加一位新元素，若大于start之后的元素和，则start及之后的元素都被删除。\n\n`itemN`  指定替换的删除后的元素或新增元素,如果忽略掉，则该方法只会删除元素\n\n`返回值` 由原数组中被删除元素组成的数组，如果没有删除，则返回一个数组，比如：\n```javascript\nvar array = [\"apple\",\"boy\"];\nvar splices = array.splice(1,1);\nconsole.log(array); // [\"apple\"]\nconsole.log(splices); // [\"boy\"] ,可见是从数组下标为1的元素开始删除,并且删除一个元素,由于itemN缺省,故此时该方法只删除元素\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(2,1,\"cat\");\nconsole.log(array); // [\"apple\", \"boy\", \"cat\"]\nconsole.log(splices); // [], 可见由于start超过数组长度,此时从数组末尾开始添加元素,并且原数组不会发生删除行为\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(-2,1,\"cat\");\nconsole.log(array); // [\"cat\", \"boy\"]\nconsole.log(splices); // [\"apple\"], 可见当start为负值时,是从数组末尾开始的第-start位开始删除,删除一个元素,并且从此处插入了一个元素\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(-3,1,\"cat\");\nconsole.log(array); // [\"cat\", \"boy\"]\nconsole.log(splices); // [\"apple\"], 可见即使-start超出数组长度,数组默认从首位开始删除\n\narray = [\"apple\",\"boy\"];\nsplices = array.splice(0,3,\"cat\");\nconsole.log(array); // [\"cat\"]\nconsole.log(splices); // [\"apple\", \"boy\"], 可见当deleteCount大于数组start之后的元素总和时,start及之后的元素都将被删除\n```\n\n同样，splice可以用在Array.prototype.splice.call()上\n\n```javascript\narr = {1:'javascript',2:'css',3:\"jq\",length:'2'}\nArray.prototype.splice.call(arr,1,1)\nconsole.log(arr)\n// {2: \"css\", 3: \"jq\", length: 1}\n```\n\n如果需要删除数组中一个已存在的元素，可参考如下：\n\n```javascript\nvar array = ['a','b','c'];\narray.splice(array.indexOf('b'),1);\n```\n\n\n### copyWihtnin 基于ECMAScript 2015 (es6)规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到 别的位置及属性）\n\n语法：arr.copyWithin(target, start[, end = this.length])\n\n```javascript\narr.copyWithin(target)\n\narr.copyWithin(target, start)\n\narr.copyWithin(target, start, end)\n\narr.copyWithin(目标索引, [源开始索引], [结束源索引])\n```\n\n`target`\n0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。\n如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将   被修改以符合 arr.length。\n\n`start`\n0 为基底的索引，开始复制元素的起始位置。如果是负数，start 则其指定的索引位置等同于length+start,将从末尾开始计算。\n如果 start 被忽略，copyWithin 将会从0开始复制。\n\n`end`\n0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。\n如果 end 被忽略，copyWithin 将会复制到 arr.length。（但是我觉得因为换成：如果 end 被忽略，那么end默认为数组的索引长度，）\n\n`copyWithin`方法不要求其this值必须是一个数组对象；除此之外，copyWithin是一个可变方法，它可以改变this对象本身，并且返回它，而不仅仅是它的拷贝。\n\nMDN的例子很好的说明了：\n\n```javascript\n[1, 2, 3, 4, 5].copyWithin(-2);\n// [1, 2, 3, 1, 2]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3);\n// [4, 5, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n// [4, 2, 3, 4, 5]\n\n[1, 2, 3, 4, 5].copyWithin(-2, -3, -1);\n// [1, 2, 3, 3, 4]\n\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}\n\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\n\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n```\n\n不支持copyWithin,可以使用polyfill\n```javascript\nif (!Array.prototype.copyWithin) {\n  Array.prototype.copyWithin = function(target, start/*, end*/) {\n    // Steps 1-2.\n    if (this == null) {\n      throw new TypeError('this is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // Steps 3-5.\n    var len = O.length >>> 0;\n\n    // Steps 6-8.\n    var relativeTarget = target >> 0;\n\n    var to = relativeTarget < 0 ?\n      Math.max(len + relativeTarget, 0) :\n      Math.min(relativeTarget, len);\n\n    // Steps 9-11.\n    var relativeStart = start >> 0;\n\n    var from = relativeStart < 0 ?\n      Math.max(len + relativeStart, 0) :\n      Math.min(relativeStart, len);\n\n    // Steps 12-14.\n    var end = arguments[2];\n    var relativeEnd = end === undefined ? len : end >> 0;\n\n    var final = relativeEnd < 0 ?\n      Math.max(len + relativeEnd, 0) :\n      Math.min(relativeEnd, len);\n\n    // Step 15.\n    var count = Math.min(final - from, len - to);\n\n    // Steps 16-17.\n    var direction = 1;\n\n    if (from < to && to < (from + count)) {\n      direction = -1;\n      from += count - 1;\n      to += count - 1;\n    }\n\n    // Step 18.\n    while (count > 0) {\n      if (from in O) {\n        O[to] = O[from];\n      } else {\n        delete O[to];\n      }\n\n      from += direction;\n      to += direction;\n      count--;\n    }\n\n    // Step 19.\n    return O;\n  };\n}\n```\n\ncopyWithin也同样可以用Array.prototype.copyWithin.call()\n\n```javascript\nvar o = {0:1, 1:2, 2:3, 3:4, 4:5,length:5}\nArray.prototype.copyWithin.call(o,0,3);\n\n// {0: 4, 1: 5, 2: 3, 3: 4, 4: 5, length: 5}\n```\n\n### fill 用一个固定值替换数组内从起始索引到终止索引直接的全部元素\n\n`arr.fill(value, start, end)` \nvalue替换数组元素的值\nstart起始索引，默认为0，如果是个负数，则开始索引为length+start\nend 终止索引，默认为数组索引的长度，如果是个负数，则终止索引为length+end\n\n```javascript\n[1, 2, 3].fill(4)            // [4, 4, 4]\n[1, 2, 3].fill(4, 1)         // [1, 4, 4]\n[1, 2, 3].fill(4, 1, 2)      // [1, 4, 3]\n[1, 2, 3].fill(4, 1, 1)      // [1, 2, 3]\n[1, 2, 3].fill(4, -3, -2)    // [4, 2, 3]\n[1, 2, 3].fill(4, NaN, NaN)  // [1, 2, 3]\nArray(3).fill(4);            // [4, 4, 4]\n[].fill.call({length: 3}, 4) // {0: 4, 1: 4, 2: 4, length: 3}\n```\n不支持fill可以使用polyfill\n```javascript\nif (!Array.prototype.fill) {\n  Object.defineProperty(Array.prototype, 'fill', {\n    value: function(value) {\n\n      // Steps 1-2.\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      var O = Object(this);\n\n      // Steps 3-5.\n      var len = O.length >>> 0;\n\n      // Steps 6-7.\n      var start = arguments[1];\n      var relativeStart = start >> 0;\n\n      // Step 8.\n      var k = relativeStart < 0 ?\n        Math.max(len + relativeStart, 0) :\n        Math.min(relativeStart, len);\n\n      // Steps 9-10.\n      var end = arguments[2];\n      var relativeEnd = end === undefined ?\n        len : end >> 0;\n\n      // Step 11.\n      var final = relativeEnd < 0 ?\n        Math.max(len + relativeEnd, 0) :\n        Math.min(relativeEnd, len);\n\n      // Step 12.\n      while (k < final) {\n        O[k] = value;\n        k++;\n      }\n\n      // Step 13.\n      return O;\n    }\n  });\n}\n```\n`在MDN上有一句：fill 方法故意被设计成通用方法, 它需要this值是个对象，类数组对象调用会报错`\n\n但是发现 fill 也同样适用于Array.prototype.fill.call()\n\n```javascript\nvar o = {0:1, 1:2, 2:3, 3:4, 4:5,length:5}\nvar o2 = Array.prototype.fill.call(o,10,0,2);\n\n// {0: 10, 1: 10, 2: 3, 3: 4, 4: 5, length: 5}\n```\n\n与copyWithin不同的是，copyWithin是只能数组之间替换元素\n而fill是指定一个固定值然后替换掉数组相应的数组索引\n\n\n参考资料1：http://louiszhai.github.io/2017/04/28/array\n参考资料2：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","slug":"js复习手记-一","published":1,"updated":"2018-04-24T14:27:38.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb60540004a4vbnlztwh0i","content":"<h3 id=\"记录一些-易忘，不常用的一些知识\"><a href=\"#记录一些-易忘，不常用的一些知识\" class=\"headerlink\" title=\"记录一些 易忘，不常用的一些知识\"></a>记录一些 易忘，不常用的一些知识</h3><h3 id=\"Array-isArray-用来判断一个变量是否是数组\"><a href=\"#Array-isArray-用来判断一个变量是否是数组\" class=\"headerlink\" title=\"Array.isArray() 用来判断一个变量是否是数组\"></a>Array.isArray() 用来判断一个变量是否是数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>\n<p>除此之外还有五种方式判断一个变量是否是数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.基于instanceof</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.基于constructor</span></span><br><span class=\"line\">a.constructor === <span class=\"built_in\">Array</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.基于Array.prototype.isProtptypeOf()</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.isPrototypeOf(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.基于Object.getPrototypeOf()</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(a) === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.Object.prototype.toString.apply()</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.apply(a) === <span class=\"string\">'[Object Array]'</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>一般主流框架都是基于最后一种方式去判断</p>\n<p>既然用这种方式能够判断是不是数组，那是不是能够判断字符串，数组，对象….?马上实验一波</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">''</span>)                  <span class=\"comment\">// \"[object String]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>)          <span class=\"comment\">// \"[object String]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">1</span>)                   <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">NaN</span>)                 <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>)          <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(-<span class=\"string\">'1'</span>)                <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>)          <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;)                  <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>)         <span class=\"comment\">// \"[object Boolean]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">false</span>)               <span class=\"comment\">// \"[object Boolean]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>)                <span class=\"comment\">// \"[object Null]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>)           <span class=\"comment\">// \"[object Undefined]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])                  <span class=\"comment\">// \"[object Array]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span>　<span class=\"built_in\">Array</span>)          <span class=\"comment\">// \"[object Array]\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof 一般只返回 <code>number</code> <code>boolean</code> <code>string</code> <code>function(函数)</code> <code>object(object,数组,对象)</code> <code>undefined</code></p>\n<h3 id=\"Object-getOwnPropertyNames-遍历方法\"><a href=\"#Object-getOwnPropertyNames-遍历方法\" class=\"headerlink\" title=\"Object.getOwnPropertyNames()  遍历方法\"></a>Object.getOwnPropertyNames()  遍历方法</h3><p><code>Object.getOwnPropertyNames(window)</code></p>\n<p>结果可以看出，window下的方法有822个<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span> … <span class=\"number\">99</span>]</span><br><span class=\"line\">[<span class=\"number\">100</span> … <span class=\"number\">199</span>]</span><br><span class=\"line\">[<span class=\"number\">200</span> … <span class=\"number\">299</span>]</span><br><span class=\"line\">[<span class=\"number\">300</span> … <span class=\"number\">399</span>]</span><br><span class=\"line\">[<span class=\"number\">400</span> … <span class=\"number\">499</span>]</span><br><span class=\"line\">[<span class=\"number\">500</span> … <span class=\"number\">599</span>]</span><br><span class=\"line\">[<span class=\"number\">600</span> … <span class=\"number\">699</span>]</span><br><span class=\"line\">[<span class=\"number\">700</span> … <span class=\"number\">799</span>]</span><br><span class=\"line\">[<span class=\"number\">800</span> … <span class=\"number\">821</span>]</span><br><span class=\"line\">length:<span class=\"number\">822</span></span><br><span class=\"line\">__proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pop-shift-push-unshift-reverse-sort-splice-copyWithin-fill-这些都是会改变自身的值的数组方法\"><a href=\"#pop-shift-push-unshift-reverse-sort-splice-copyWithin-fill-这些都是会改变自身的值的数组方法\" class=\"headerlink\" title=\"pop  shift  push  unshift  reverse  sort  splice  copyWithin  fill 这些都是会改变自身的值的数组方法\"></a><code>pop</code>  <code>shift</code>  <code>push</code>  <code>unshift</code>  <code>reverse</code>  <code>sort</code>  <code>splice</code>  <code>copyWithin</code>  <code>fill</code> 这些都是会改变自身的值的数组方法</h3><p><code>pop 删除数组的最后一个元素</code><br>有意思的是,pop的设计是根据长度进行删除的，也就是说如果在对象中声明了length的长度，也可以删除？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.pop.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;1: \"javascrip\", 2: \"css\", length: 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果length为<span class=\"number\">0</span>，将无法删除</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.pop.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>shift 删除数组的第一个元素</code><br>同样和pop类似，根据长度删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shift.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"javascrip\", 1: \"css\", 2: \"vue\", length: 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果length为<span class=\"number\">0</span>，也同样无法删除</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shift.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>push 在数组的末尾添加一个或多个元素 并且返回新的数组长度</code><br>同样是根据长度添加元素，那么可以在指定位置上添加元素？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.call(obj,<span class=\"string\">'jq'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;1: \"javascrip\", 2: \"css\", 3: \"vue\", 4: \"jq\", length: 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.call(obj,<span class=\"string\">'jq'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;1: \"javascrip\", 2: \"css\", 3: \"jq\", length: 4&#125;</span></span><br><span class=\"line\">只是在指定位置上替换元素</span><br><span class=\"line\"></span><br><span class=\"line\">用applay 可实现合并数组</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"number\">1</span>] ; <span class=\"keyword\">var</span> obj1 = [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"built_in\">Array</span>.prototype.push.apply(obj,obj1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br></pre></td></tr></table></figure>\n<p><code>unshift 在数组开头添加一个或多个元素，并且返回新的数组长度</code><br>同样可以指定length位置上添加元素，如果使用Array.prorotype.unshift.call(),那么会替换掉第一个原色<br>但是如果length为0，那么就会被解释器认为数组长度为0，会从对象的下标0开始插入，相应的位置属性会被替换掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unshift.apply(obj,[<span class=\"string\">'w'</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"w\", 2: \"javascrip\", 3: \"css\", 4: \"vue\", length: 5&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 替换掉第一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unshift.apply(obj,[<span class=\"string\">'w'</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"w\", 1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 在开头上添加一个元素，实现正常的unshift</span></span><br></pre></td></tr></table></figure>\n<p><code>reverse 颠倒数组元素的位置 返回使用该函数的引用</code><br>同样可以Array.prorotype.unshift.call()，颠倒的顺序只在length的范围内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.reverse.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"javascrip\", 2: \"css\", 3: \"vue\", length: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果length为<span class=\"number\">0</span>，相当于没有执行</span><br></pre></td></tr></table></figure>\n<p><code>sort 对数组的元素排序 并返回这个数组</code><br><code>arr.sort([comparefn])</code><br>sort可以指定一个带返回的comparefn函数，如果省略掉，数组元素就会按照各自转换为Unicode（万国码）位点顺序排序,比如javascript比css靠前，数字排序比较的时候，也会先转换成字符串的Unicode进行排序,比如：’25’比’8’靠前</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"string\">'javascript'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'vue'</span>]</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  [\"css\", \"javascript\", \"vue\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"string\">'1'</span>,<span class=\"string\">'21'</span>,<span class=\"string\">'13'</span>,<span class=\"string\">'21'</span>]</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  [\"1\", \"13\", \"21\", \"21\"]</span></span><br></pre></td></tr></table></figure>\n<p>如果指定了带返回的comparefn函数，数组将按照该函数的返回值来排序，若a和b是两个将要比较的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comparefn(a,b) &gt; <span class=\"number\">0</span> <span class=\"comment\">// 如果b比a大，那么排在前面</span></span><br><span class=\"line\">comparefn(a,b) &lt; <span class=\"number\">0</span> <span class=\"comment\">// 如果a比b大，那么排在前面</span></span><br><span class=\"line\">comparefn(a,b) = <span class=\"number\">0</span> <span class=\"comment\">// 相对位置不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以在comparefn内直接返回比较后的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">comparefn(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b <span class=\"comment\">// 数字比较可以用： a-b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">comparefn(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; b <span class=\"comment\">// 数字比较可以用 b - a </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">comparefn(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a = b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果数组元素为非ASCII字符的字符串（如包含类似 e、é、è、a、ä 或中文等非英文字符的字符串），则需要使用String.localCompare</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'互'</span>,<span class=\"string\">'联'</span>,<span class=\"string\">'网'</span>,<span class=\"string\">'改'</span>,<span class=\"string\">'变'</span>,<span class=\"string\">'世'</span>,<span class=\"string\">'界'</span>];</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.localeCompare(b)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (7) [\"世\", \"互\", \"变\", \"改\", \"界\", \"网\", \"联\"]</span></span><br></pre></td></tr></table></figure>\n<p>sort 也同样适用Array.prorotype.unshift.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">0</span>:<span class=\"string\">'互'</span>,<span class=\"number\">1</span>:<span class=\"string\">'联'</span>,<span class=\"number\">2</span>:<span class=\"string\">'网'</span>,<span class=\"number\">3</span>:<span class=\"string\">'改'</span>,<span class=\"number\">4</span>:<span class=\"string\">'变'</span>,<span class=\"number\">5</span>:<span class=\"string\">'世'</span>,<span class=\"number\">6</span>:<span class=\"string\">'界'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort.call(obj,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.localeCompare(b);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"互\", 1: \"改\", 2: \"网\", 3: \"联\", 4: \"变\", 5: \"世\", 6: \"界\", length: 4&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Chrome的不同\"><a href=\"#Chrome的不同\" class=\"headerlink\" title=\"Chrome的不同\"></a>Chrome的不同</h3><p>ECMAscript规范中并未规定具体的sort算法，这就势必导致各个浏览器不尽相同的sort算法，下面是Chrome下使用sort的表现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'a'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'b'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">\"c\"</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'d'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'e'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'f'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'g'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'h'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'q'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'i'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'j'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'k'</span>&#125;]</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v1,v2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.s-v2.s</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr[i].a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f a c d e b g h i j k</span></span><br></pre></td></tr></table></figure>\n<p>由于s值相等，arr数组排序前后应该不变，然而Chrome输出的却不同，而其他浏览器(如IE 或 Firefox) 表现正常。<br>当排序的数组长度超过10条时，会调用另一种排序方法（快速排序）；而10条及以下采用的是插入排序，所以在使用sort排序时改变排序的返回值即可，应该这么写才能将结果准确输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'a'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'b'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">\"c\"</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'d'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'e'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'f'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'g'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'h'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'q'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'i'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'j'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'k'</span>&#125;]</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v,k</span>)</span>&#123;</span><br><span class=\"line\">\tv.__index = k</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v1,v2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.s-v2.s || v1.__index - v2.__index</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr[i].a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a b c d e f g h i j k</span></span><br></pre></td></tr></table></figure>\n<p>而且使用数组的sort的排序方法需要注意的是，各浏览器的针对sort方法的内部算法实现不同，排序函数尽量值返回-1，0，1三种不同的值，不要尝试返回true和false等其它数值，因为可能导致不可靠的排序结果</p>\n<table>\n<thead>\n<tr>\n<th>睡过</th>\n<th>哈哈</th>\n<th>请问</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>123</td>\n<td>123</td>\n<td>123</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"不同的浏览器及脚本引擎\"><a href=\"#不同的浏览器及脚本引擎\" class=\"headerlink\" title=\"不同的浏览器及脚本引擎\"></a>不同的浏览器及脚本引擎</h3><table>\n<thead>\n<tr>\n<th>Browser Name</th>\n<th>ECMAScript Engine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Internet Explorer 6 - 8</td>\n<td>JScript</td>\n</tr>\n<tr>\n<td>Internet Explorer 9 - 10</td>\n<td>Chakra</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>SpiderMonkey, IonMonkey, TraceMonkey</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td>V8</td>\n</tr>\n<tr>\n<td>Safair</td>\n<td>JavaScriptCore(SquirrelFish Extreme)</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>Carakan</td>\n</tr>\n</tbody>\n</table>\n<p>分析以下代码，预期将数组元素进行升序排序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> comparefn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">array.sort(comparefn);</span><br></pre></td></tr></table></figure>\n<p>代码中，comparefn 函数返回值为 bool 类型，并非为规范规定的 -1、0、1 值。那么执行此代码，各 JS 脚本引擎实现情况如何？</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>输出结果</th>\n<th>是否符合预期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JScript</td>\n<td>[2, 3, 5, 1, 4, 6, 7, 0, 8, 9]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Carakan</td>\n<td>[0, 1, 3, 8, 2, 4, 9, 5, 6, 7]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Chakra &amp; JavaScriptCore</td>\n<td>[7, 6, 5, 4, 3, 2, 1, 0, 8, 9]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>SpiderMonkey</td>\n<td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</td>\n<td>是</td>\n</tr>\n<tr>\n<td>V8</td>\n<td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<p>根据表中数据可见，当数组内元素个数小于等于 10 时，现象如下：</p>\n<ul>\n<li>JScript &amp; Carakan 排序结果有误</li>\n<li>Chakra &amp; JavaScriptCore 看起来没有进行排序</li>\n<li>SpiderMonkey 返回了预期的正确结果</li>\n<li>V8 暂时看起来排序正确</li>\n</ul>\n<p>将数组元素扩大至 11 位，现象如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> comparefn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">array.sort(comparefn);</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>JavaScript引擎</th>\n<th>输出结果</th>\n<th>是否符合预期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JScript</td>\n<td>[2, 3, 5, 1, 4, 6, 7, 0, 8, 9, 10]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Carakan</td>\n<td>[0, 1, 3, 8, 2, 4, 9, 5, 10, 6, 7]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Chakra &amp; JavaScriptCore</td>\n<td>[7, 6, 5, 4, 3, 2, 1, 0, 10, 8, 9]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>IonMonkey</td>\n<td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</td>\n<td>是</td>\n</tr>\n<tr>\n<td>V8</td>\n<td>[5, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10]</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>根据表中数据可见，当数组内元素个数大于 10 时：</p>\n<ul>\n<li>JScript &amp; Carakan 排序结果有误</li>\n<li>Chakra &amp; JavaScriptCore 看起来没有进行排序</li>\n<li>SpiderMonkey 返回了预期的正确结果</li>\n<li>V8 排序结果由正确转为不正确</li>\n</ul>\n<p>(感觉sort稍微复杂了点，主要还是ECMAscript规范中并未规定sort算法，所以导致每个浏览器的有不同的算法，不同的结果)</p>\n<h3 id=\"splice-新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\"><a href=\"#splice-新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\" class=\"headerlink\" title=\"splice 新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\"></a>splice 新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合</h3><p><code>arr.splice(start,deleteCount[, item1[, item2[, …]]])</code><br><code>start</code> 指定从哪一位开始修改内容，如果超过了数组的长度，则从数组的末尾开始修改内容；<br>如果是负数，则其指定的索引位置等同于length+start（length为数组的长度），表示从数组的末尾开始的第-start位开始；</p>\n<p><code>deleteCount</code> 指定要删除的元素个数,若等于0,则不删除。这种情况下，至少应该添加一位新元素，若大于start之后的元素和，则start及之后的元素都被删除。</p>\n<p><code>itemN</code>  指定替换的删除后的元素或新增元素,如果忽略掉，则该方法只会删除元素</p>\n<p><code>返回值</code> 由原数组中被删除元素组成的数组，如果没有删除，则返回一个数组，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> splices = array.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"apple\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"boy\"] ,可见是从数组下标为1的元素开始删除,并且删除一个元素,由于itemN缺省,故此时该方法只删除元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"apple\", \"boy\", \"cat\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [], 可见由于start超过数组长度,此时从数组末尾开始添加元素,并且原数组不会发生删除行为</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">-2</span>,<span class=\"number\">1</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"cat\", \"boy\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"apple\"], 可见当start为负值时,是从数组末尾开始的第-start位开始删除,删除一个元素,并且从此处插入了一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">-3</span>,<span class=\"number\">1</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"cat\", \"boy\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"apple\"], 可见即使-start超出数组长度,数组默认从首位开始删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"cat\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"apple\", \"boy\"], 可见当deleteCount大于数组start之后的元素总和时,start及之后的元素都将被删除</span></span><br></pre></td></tr></table></figure></p>\n<p>同样，splice可以用在Array.prototype.splice.call()上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascript'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">\"jq\"</span>,<span class=\"attr\">length</span>:<span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.splice.call(arr,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"><span class=\"comment\">// &#123;2: \"css\", 3: \"jq\", length: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果需要删除数组中一个已存在的元素，可参考如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">array.splice(array.indexOf(<span class=\"string\">'b'</span>),<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"copyWihtnin-基于ECMAScript-2015-es6-规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到-别的位置及属性）\"><a href=\"#copyWihtnin-基于ECMAScript-2015-es6-规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到-别的位置及属性）\" class=\"headerlink\" title=\"copyWihtnin 基于ECMAScript 2015 (es6)规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到 别的位置及属性）\"></a>copyWihtnin 基于ECMAScript 2015 (es6)规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到 别的位置及属性）</h3><p>语法：arr.copyWithin(target, start[, end = this.length])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.copyWithin(target)</span><br><span class=\"line\"></span><br><span class=\"line\">arr.copyWithin(target, start)</span><br><span class=\"line\"></span><br><span class=\"line\">arr.copyWithin(target, start, end)</span><br><span class=\"line\"></span><br><span class=\"line\">arr.copyWithin(目标索引, [源开始索引], [结束源索引])</span><br></pre></td></tr></table></figure>\n<p><code>target</code><br>0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。<br>如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将   被修改以符合 arr.length。</p>\n<p><code>start</code><br>0 为基底的索引，开始复制元素的起始位置。如果是负数，start 则其指定的索引位置等同于length+start,将从末尾开始计算。<br>如果 start 被忽略，copyWithin 将会从0开始复制。</p>\n<p><code>end</code><br>0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。<br>如果 end 被忽略，copyWithin 将会复制到 arr.length。（但是我觉得因为换成：如果 end 被忽略，那么end默认为数组的索引长度，）</p>\n<p><code>copyWithin</code>方法不要求其this值必须是一个数组对象；除此之外，copyWithin是一个可变方法，它可以改变this对象本身，并且返回它，而不仅仅是它的拷贝。</p>\n<p>MDN的例子很好的说明了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">-2</span>);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">-2</span>, <span class=\"number\">-3</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[].copyWithin.call(&#123;<span class=\"attr\">length</span>: <span class=\"number\">5</span>, <span class=\"number\">3</span>: <span class=\"number\">1</span>&#125;, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i32a = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">i32a.copyWithin(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[].copyWithin.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]), <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>不支持copyWithin,可以使用polyfill<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.copyWithin) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.copyWithin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, start<span class=\"regexp\">/*, end*/</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Steps 1-2.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'this is null or not defined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 3-5.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 6-8.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> relativeTarget = target &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> to = relativeTarget &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(len + relativeTarget, <span class=\"number\">0</span>) :</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.min(relativeTarget, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 9-11.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> relativeStart = start &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">from</span> = relativeStart &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(len + relativeStart, <span class=\"number\">0</span>) :</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.min(relativeStart, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 12-14.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> relativeEnd = end === <span class=\"literal\">undefined</span> ? len : end &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> final = relativeEnd &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(len + relativeEnd, <span class=\"number\">0</span>) :</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.min(relativeEnd, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 15.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"built_in\">Math</span>.min(final - <span class=\"keyword\">from</span>, len - to);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 16-17.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> direction = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> &lt; to &amp;&amp; to &lt; (<span class=\"keyword\">from</span> + count)) &#123;</span><br><span class=\"line\">      direction = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">from</span> += count - <span class=\"number\">1</span>;</span><br><span class=\"line\">      to += count - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 18.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">        O[to] = O[<span class=\"keyword\">from</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> O[to];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">from</span> += direction;</span><br><span class=\"line\">      to += direction;</span><br><span class=\"line\">      count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 19.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> O;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>copyWithin也同样可以用Array.prototype.copyWithin.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">2</span>:<span class=\"number\">3</span>, <span class=\"number\">3</span>:<span class=\"number\">4</span>, <span class=\"number\">4</span>:<span class=\"number\">5</span>,<span class=\"attr\">length</span>:<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin.call(o,<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 4, 1: 5, 2: 3, 3: 4, 4: 5, length: 5&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fill-用一个固定值替换数组内从起始索引到终止索引直接的全部元素\"><a href=\"#fill-用一个固定值替换数组内从起始索引到终止索引直接的全部元素\" class=\"headerlink\" title=\"fill 用一个固定值替换数组内从起始索引到终止索引直接的全部元素\"></a>fill 用一个固定值替换数组内从起始索引到终止索引直接的全部元素</h3><p><code>arr.fill(value, start, end)</code><br>value替换数组元素的值<br>start起始索引，默认为0，如果是个负数，则开始索引为length+start<br>end 终止索引，默认为数组索引的长度，如果是个负数，则终止索引为length+end</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>)            <span class=\"comment\">// [4, 4, 4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">1</span>)         <span class=\"comment\">// [1, 4, 4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)      <span class=\"comment\">// [1, 4, 3]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)      <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">-2</span>)    <span class=\"comment\">// [4, 2, 3]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>)  <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">4</span>);            <span class=\"comment\">// [4, 4, 4]</span></span><br><span class=\"line\">[].fill.call(&#123;<span class=\"attr\">length</span>: <span class=\"number\">3</span>&#125;, <span class=\"number\">4</span>) <span class=\"comment\">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>不支持fill可以使用polyfill<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.fill) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'fill'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 1-2.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'this is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3-5.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 6-7.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> start = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> relativeStart = start &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 8.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = relativeStart &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.max(len + relativeStart, <span class=\"number\">0</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.min(relativeStart, len);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 9-10.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> end = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> relativeEnd = end === <span class=\"literal\">undefined</span> ?</span><br><span class=\"line\">        len : end &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 11.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> final = relativeEnd &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.max(len + relativeEnd, <span class=\"number\">0</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.min(relativeEnd, len);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 12.</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; final) &#123;</span><br><span class=\"line\">        O[k] = value;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 13.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> O;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>在MDN上有一句：fill 方法故意被设计成通用方法, 它需要this值是个对象，类数组对象调用会报错</code></p>\n<p>但是发现 fill 也同样适用于Array.prototype.fill.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">2</span>:<span class=\"number\">3</span>, <span class=\"number\">3</span>:<span class=\"number\">4</span>, <span class=\"number\">4</span>:<span class=\"number\">5</span>,<span class=\"attr\">length</span>:<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"built_in\">Array</span>.prototype.fill.call(o,<span class=\"number\">10</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 10, 1: 10, 2: 3, 3: 4, 4: 5, length: 5&#125;</span></span><br></pre></td></tr></table></figure>\n<p>与copyWithin不同的是，copyWithin是只能数组之间替换元素<br>而fill是指定一个固定值然后替换掉数组相应的数组索引</p>\n<p>参考资料1：<a href=\"http://louiszhai.github.io/2017/04/28/array\" target=\"_blank\" rel=\"noopener\">http://louiszhai.github.io/2017/04/28/array</a><br>参考资料2：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"记录一些-易忘，不常用的一些知识\"><a href=\"#记录一些-易忘，不常用的一些知识\" class=\"headerlink\" title=\"记录一些 易忘，不常用的一些知识\"></a>记录一些 易忘，不常用的一些知识</h3><h3 id=\"Array-isArray-用来判断一个变量是否是数组\"><a href=\"#Array-isArray-用来判断一个变量是否是数组\" class=\"headerlink\" title=\"Array.isArray() 用来判断一个变量是否是数组\"></a>Array.isArray() 用来判断一个变量是否是数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.isArray(arr)</span><br></pre></td></tr></table></figure>\n<p>除此之外还有五种方式判断一个变量是否是数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.基于instanceof</span></span><br><span class=\"line\">a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.基于constructor</span></span><br><span class=\"line\">a.constructor === <span class=\"built_in\">Array</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.基于Array.prototype.isProtptypeOf()</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.isPrototypeOf(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.基于Object.getPrototypeOf()</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(a) === <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5.Object.prototype.toString.apply()</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.apply(a) === <span class=\"string\">'[Object Array]'</span></span><br></pre></td></tr></table></figure>","more":"<p>一般主流框架都是基于最后一种方式去判断</p>\n<p>既然用这种方式能够判断是不是数组，那是不是能够判断字符串，数组，对象….?马上实验一波</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">''</span>)                  <span class=\"comment\">// \"[object String]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>)          <span class=\"comment\">// \"[object String]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">1</span>)                   <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">NaN</span>)                 <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>)          <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(-<span class=\"string\">'1'</span>)                <span class=\"comment\">// \"[object Number]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>)          <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(&#123;&#125;)                  <span class=\"comment\">// \"[object Object]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>)         <span class=\"comment\">// \"[object Boolean]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">false</span>)               <span class=\"comment\">// \"[object Boolean]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>)                <span class=\"comment\">// \"[object Null]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>)           <span class=\"comment\">// \"[object Undefined]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call([])                  <span class=\"comment\">// \"[object Array]\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">new</span>　<span class=\"built_in\">Array</span>)          <span class=\"comment\">// \"[object Array]\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof 一般只返回 <code>number</code> <code>boolean</code> <code>string</code> <code>function(函数)</code> <code>object(object,数组,对象)</code> <code>undefined</code></p>\n<h3 id=\"Object-getOwnPropertyNames-遍历方法\"><a href=\"#Object-getOwnPropertyNames-遍历方法\" class=\"headerlink\" title=\"Object.getOwnPropertyNames()  遍历方法\"></a>Object.getOwnPropertyNames()  遍历方法</h3><p><code>Object.getOwnPropertyNames(window)</code></p>\n<p>结果可以看出，window下的方法有822个<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span> … <span class=\"number\">99</span>]</span><br><span class=\"line\">[<span class=\"number\">100</span> … <span class=\"number\">199</span>]</span><br><span class=\"line\">[<span class=\"number\">200</span> … <span class=\"number\">299</span>]</span><br><span class=\"line\">[<span class=\"number\">300</span> … <span class=\"number\">399</span>]</span><br><span class=\"line\">[<span class=\"number\">400</span> … <span class=\"number\">499</span>]</span><br><span class=\"line\">[<span class=\"number\">500</span> … <span class=\"number\">599</span>]</span><br><span class=\"line\">[<span class=\"number\">600</span> … <span class=\"number\">699</span>]</span><br><span class=\"line\">[<span class=\"number\">700</span> … <span class=\"number\">799</span>]</span><br><span class=\"line\">[<span class=\"number\">800</span> … <span class=\"number\">821</span>]</span><br><span class=\"line\">length:<span class=\"number\">822</span></span><br><span class=\"line\">__proto__:<span class=\"built_in\">Array</span>(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"pop-shift-push-unshift-reverse-sort-splice-copyWithin-fill-这些都是会改变自身的值的数组方法\"><a href=\"#pop-shift-push-unshift-reverse-sort-splice-copyWithin-fill-这些都是会改变自身的值的数组方法\" class=\"headerlink\" title=\"pop  shift  push  unshift  reverse  sort  splice  copyWithin  fill 这些都是会改变自身的值的数组方法\"></a><code>pop</code>  <code>shift</code>  <code>push</code>  <code>unshift</code>  <code>reverse</code>  <code>sort</code>  <code>splice</code>  <code>copyWithin</code>  <code>fill</code> 这些都是会改变自身的值的数组方法</h3><p><code>pop 删除数组的最后一个元素</code><br>有意思的是,pop的设计是根据长度进行删除的，也就是说如果在对象中声明了length的长度，也可以删除？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.pop.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;1: \"javascrip\", 2: \"css\", length: 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果length为<span class=\"number\">0</span>，将无法删除</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.pop.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>shift 删除数组的第一个元素</code><br>同样和pop类似，根据长度删除</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shift.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"javascrip\", 1: \"css\", 2: \"vue\", length: 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果length为<span class=\"number\">0</span>，也同样无法删除</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shift.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123;1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 0&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>push 在数组的末尾添加一个或多个元素 并且返回新的数组长度</code><br>同样是根据长度添加元素，那么可以在指定位置上添加元素？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.call(obj,<span class=\"string\">'jq'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;1: \"javascrip\", 2: \"css\", 3: \"vue\", 4: \"jq\", length: 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.call(obj,<span class=\"string\">'jq'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;1: \"javascrip\", 2: \"css\", 3: \"jq\", length: 4&#125;</span></span><br><span class=\"line\">只是在指定位置上替换元素</span><br><span class=\"line\"></span><br><span class=\"line\">用applay 可实现合并数组</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"number\">1</span>] ; <span class=\"keyword\">var</span> obj1 = [<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj3 = <span class=\"built_in\">Array</span>.prototype.push.apply(obj,obj1)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br></pre></td></tr></table></figure>\n<p><code>unshift 在数组开头添加一个或多个元素，并且返回新的数组长度</code><br>同样可以指定length位置上添加元素，如果使用Array.prorotype.unshift.call(),那么会替换掉第一个原色<br>但是如果length为0，那么就会被解释器认为数组长度为0，会从对象的下标0开始插入，相应的位置属性会被替换掉</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unshift.apply(obj,[<span class=\"string\">'w'</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"w\", 2: \"javascrip\", 3: \"css\", 4: \"vue\", length: 5&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 替换掉第一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unshift.apply(obj,[<span class=\"string\">'w'</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"w\", 1: \"javascrip\", 2: \"css\", 3: \"vue\", length: 1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 在开头上添加一个元素，实现正常的unshift</span></span><br></pre></td></tr></table></figure>\n<p><code>reverse 颠倒数组元素的位置 返回使用该函数的引用</code><br>同样可以Array.prorotype.unshift.call()，颠倒的顺序只在length的范围内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascrip'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">'vue'</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.reverse.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"javascrip\", 2: \"css\", 3: \"vue\", length: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果length为<span class=\"number\">0</span>，相当于没有执行</span><br></pre></td></tr></table></figure>\n<p><code>sort 对数组的元素排序 并返回这个数组</code><br><code>arr.sort([comparefn])</code><br>sort可以指定一个带返回的comparefn函数，如果省略掉，数组元素就会按照各自转换为Unicode（万国码）位点顺序排序,比如javascript比css靠前，数字排序比较的时候，也会先转换成字符串的Unicode进行排序,比如：’25’比’8’靠前</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"string\">'javascript'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'vue'</span>]</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  [\"css\", \"javascript\", \"vue\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = [<span class=\"string\">'1'</span>,<span class=\"string\">'21'</span>,<span class=\"string\">'13'</span>,<span class=\"string\">'21'</span>]</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort.call(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  [\"1\", \"13\", \"21\", \"21\"]</span></span><br></pre></td></tr></table></figure>\n<p>如果指定了带返回的comparefn函数，数组将按照该函数的返回值来排序，若a和b是两个将要比较的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comparefn(a,b) &gt; <span class=\"number\">0</span> <span class=\"comment\">// 如果b比a大，那么排在前面</span></span><br><span class=\"line\">comparefn(a,b) &lt; <span class=\"number\">0</span> <span class=\"comment\">// 如果a比b大，那么排在前面</span></span><br><span class=\"line\">comparefn(a,b) = <span class=\"number\">0</span> <span class=\"comment\">// 相对位置不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以在comparefn内直接返回比较后的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">comparefn(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &gt; b <span class=\"comment\">// 数字比较可以用： a-b</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">comparefn(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; b <span class=\"comment\">// 数字比较可以用 b - a </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">comparefn(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a = b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果数组元素为非ASCII字符的字符串（如包含类似 e、é、è、a、ä 或中文等非英文字符的字符串），则需要使用String.localCompare</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'互'</span>,<span class=\"string\">'联'</span>,<span class=\"string\">'网'</span>,<span class=\"string\">'改'</span>,<span class=\"string\">'变'</span>,<span class=\"string\">'世'</span>,<span class=\"string\">'界'</span>];</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.localeCompare(b)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (7) [\"世\", \"互\", \"变\", \"改\", \"界\", \"网\", \"联\"]</span></span><br></pre></td></tr></table></figure>\n<p>sort 也同样适用Array.prorotype.unshift.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"number\">0</span>:<span class=\"string\">'互'</span>,<span class=\"number\">1</span>:<span class=\"string\">'联'</span>,<span class=\"number\">2</span>:<span class=\"string\">'网'</span>,<span class=\"number\">3</span>:<span class=\"string\">'改'</span>,<span class=\"number\">4</span>:<span class=\"string\">'变'</span>,<span class=\"number\">5</span>:<span class=\"string\">'世'</span>,<span class=\"number\">6</span>:<span class=\"string\">'界'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.sort.call(obj,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.localeCompare(b);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: \"互\", 1: \"改\", 2: \"网\", 3: \"联\", 4: \"变\", 5: \"世\", 6: \"界\", length: 4&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Chrome的不同\"><a href=\"#Chrome的不同\" class=\"headerlink\" title=\"Chrome的不同\"></a>Chrome的不同</h3><p>ECMAscript规范中并未规定具体的sort算法，这就势必导致各个浏览器不尽相同的sort算法，下面是Chrome下使用sort的表现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'a'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'b'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">\"c\"</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'d'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'e'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'f'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'g'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'h'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'q'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'i'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'j'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'k'</span>&#125;]</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v1,v2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.s-v2.s</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr[i].a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// f a c d e b g h i j k</span></span><br></pre></td></tr></table></figure>\n<p>由于s值相等，arr数组排序前后应该不变，然而Chrome输出的却不同，而其他浏览器(如IE 或 Firefox) 表现正常。<br>当排序的数组长度超过10条时，会调用另一种排序方法（快速排序）；而10条及以下采用的是插入排序，所以在使用sort排序时改变排序的返回值即可，应该这么写才能将结果准确输出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'a'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'b'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">\"c\"</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'d'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'e'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'f'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'g'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'h'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'q'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'i'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'j'</span>&#125;,&#123;<span class=\"attr\">s</span>:<span class=\"string\">'1'</span>,<span class=\"attr\">a</span>:<span class=\"string\">'k'</span>&#125;]</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v,k</span>)</span>&#123;</span><br><span class=\"line\">\tv.__index = k</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v1,v2</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.s-v2.s || v1.__index - v2.__index</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr[i].a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a b c d e f g h i j k</span></span><br></pre></td></tr></table></figure>\n<p>而且使用数组的sort的排序方法需要注意的是，各浏览器的针对sort方法的内部算法实现不同，排序函数尽量值返回-1，0，1三种不同的值，不要尝试返回true和false等其它数值，因为可能导致不可靠的排序结果</p>\n<table>\n<thead>\n<tr>\n<th>睡过</th>\n<th>哈哈</th>\n<th>请问</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>123</td>\n<td>123</td>\n<td>123</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"不同的浏览器及脚本引擎\"><a href=\"#不同的浏览器及脚本引擎\" class=\"headerlink\" title=\"不同的浏览器及脚本引擎\"></a>不同的浏览器及脚本引擎</h3><table>\n<thead>\n<tr>\n<th>Browser Name</th>\n<th>ECMAScript Engine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Internet Explorer 6 - 8</td>\n<td>JScript</td>\n</tr>\n<tr>\n<td>Internet Explorer 9 - 10</td>\n<td>Chakra</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>SpiderMonkey, IonMonkey, TraceMonkey</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td>V8</td>\n</tr>\n<tr>\n<td>Safair</td>\n<td>JavaScriptCore(SquirrelFish Extreme)</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>Carakan</td>\n</tr>\n</tbody>\n</table>\n<p>分析以下代码，预期将数组元素进行升序排序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> comparefn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">array.sort(comparefn);</span><br></pre></td></tr></table></figure>\n<p>代码中，comparefn 函数返回值为 bool 类型，并非为规范规定的 -1、0、1 值。那么执行此代码，各 JS 脚本引擎实现情况如何？</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>输出结果</th>\n<th>是否符合预期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JScript</td>\n<td>[2, 3, 5, 1, 4, 6, 7, 0, 8, 9]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Carakan</td>\n<td>[0, 1, 3, 8, 2, 4, 9, 5, 6, 7]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Chakra &amp; JavaScriptCore</td>\n<td>[7, 6, 5, 4, 3, 2, 1, 0, 8, 9]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>SpiderMonkey</td>\n<td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</td>\n<td>是</td>\n</tr>\n<tr>\n<td>V8</td>\n<td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<p>根据表中数据可见，当数组内元素个数小于等于 10 时，现象如下：</p>\n<ul>\n<li>JScript &amp; Carakan 排序结果有误</li>\n<li>Chakra &amp; JavaScriptCore 看起来没有进行排序</li>\n<li>SpiderMonkey 返回了预期的正确结果</li>\n<li>V8 暂时看起来排序正确</li>\n</ul>\n<p>将数组元素扩大至 11 位，现象如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> comparefn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x &gt; y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">array.sort(comparefn);</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>JavaScript引擎</th>\n<th>输出结果</th>\n<th>是否符合预期</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JScript</td>\n<td>[2, 3, 5, 1, 4, 6, 7, 0, 8, 9, 10]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Carakan</td>\n<td>[0, 1, 3, 8, 2, 4, 9, 5, 10, 6, 7]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>Chakra &amp; JavaScriptCore</td>\n<td>[7, 6, 5, 4, 3, 2, 1, 0, 10, 8, 9]</td>\n<td>否</td>\n</tr>\n<tr>\n<td>IonMonkey</td>\n<td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</td>\n<td>是</td>\n</tr>\n<tr>\n<td>V8</td>\n<td>[5, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10]</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p>根据表中数据可见，当数组内元素个数大于 10 时：</p>\n<ul>\n<li>JScript &amp; Carakan 排序结果有误</li>\n<li>Chakra &amp; JavaScriptCore 看起来没有进行排序</li>\n<li>SpiderMonkey 返回了预期的正确结果</li>\n<li>V8 排序结果由正确转为不正确</li>\n</ul>\n<p>(感觉sort稍微复杂了点，主要还是ECMAscript规范中并未规定sort算法，所以导致每个浏览器的有不同的算法，不同的结果)</p>\n<h3 id=\"splice-新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\"><a href=\"#splice-新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\" class=\"headerlink\" title=\"splice 新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合\"></a>splice 新元素替换旧元素的方式修改数组，特别适用于需要维持原数组引用时，就地删除或者新增元素，splice最适合</h3><p><code>arr.splice(start,deleteCount[, item1[, item2[, …]]])</code><br><code>start</code> 指定从哪一位开始修改内容，如果超过了数组的长度，则从数组的末尾开始修改内容；<br>如果是负数，则其指定的索引位置等同于length+start（length为数组的长度），表示从数组的末尾开始的第-start位开始；</p>\n<p><code>deleteCount</code> 指定要删除的元素个数,若等于0,则不删除。这种情况下，至少应该添加一位新元素，若大于start之后的元素和，则start及之后的元素都被删除。</p>\n<p><code>itemN</code>  指定替换的删除后的元素或新增元素,如果忽略掉，则该方法只会删除元素</p>\n<p><code>返回值</code> 由原数组中被删除元素组成的数组，如果没有删除，则返回一个数组，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> splices = array.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"apple\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"boy\"] ,可见是从数组下标为1的元素开始删除,并且删除一个元素,由于itemN缺省,故此时该方法只删除元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"apple\", \"boy\", \"cat\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [], 可见由于start超过数组长度,此时从数组末尾开始添加元素,并且原数组不会发生删除行为</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">-2</span>,<span class=\"number\">1</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"cat\", \"boy\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"apple\"], 可见当start为负值时,是从数组末尾开始的第-start位开始删除,删除一个元素,并且从此处插入了一个元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">-3</span>,<span class=\"number\">1</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"cat\", \"boy\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"apple\"], 可见即使-start超出数组长度,数组默认从首位开始删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">array = [<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"boy\"</span>];</span><br><span class=\"line\">splices = array.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"string\">\"cat\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [\"cat\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(splices); <span class=\"comment\">// [\"apple\", \"boy\"], 可见当deleteCount大于数组start之后的元素总和时,start及之后的元素都将被删除</span></span><br></pre></td></tr></table></figure></p>\n<p>同样，splice可以用在Array.prototype.splice.call()上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = &#123;<span class=\"number\">1</span>:<span class=\"string\">'javascript'</span>,<span class=\"number\">2</span>:<span class=\"string\">'css'</span>,<span class=\"number\">3</span>:<span class=\"string\">\"jq\"</span>,<span class=\"attr\">length</span>:<span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.splice.call(arr,<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\"><span class=\"comment\">// &#123;2: \"css\", 3: \"jq\", length: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>如果需要删除数组中一个已存在的元素，可参考如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\">array.splice(array.indexOf(<span class=\"string\">'b'</span>),<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"copyWihtnin-基于ECMAScript-2015-es6-规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到-别的位置及属性）\"><a href=\"#copyWihtnin-基于ECMAScript-2015-es6-规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到-别的位置及属性）\" class=\"headerlink\" title=\"copyWihtnin 基于ECMAScript 2015 (es6)规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到 别的位置及属性）\"></a>copyWihtnin 基于ECMAScript 2015 (es6)规范，用于数组内元素之间的替换，即替换的元素和被替换的元素均是数组内的元素。（更简单的来说就是将一个数组内的元素替换到 别的位置及属性）</h3><p>语法：arr.copyWithin(target, start[, end = this.length])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.copyWithin(target)</span><br><span class=\"line\"></span><br><span class=\"line\">arr.copyWithin(target, start)</span><br><span class=\"line\"></span><br><span class=\"line\">arr.copyWithin(target, start, end)</span><br><span class=\"line\"></span><br><span class=\"line\">arr.copyWithin(目标索引, [源开始索引], [结束源索引])</span><br></pre></td></tr></table></figure>\n<p><code>target</code><br>0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。<br>如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将   被修改以符合 arr.length。</p>\n<p><code>start</code><br>0 为基底的索引，开始复制元素的起始位置。如果是负数，start 则其指定的索引位置等同于length+start,将从末尾开始计算。<br>如果 start 被忽略，copyWithin 将会从0开始复制。</p>\n<p><code>end</code><br>0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。<br>如果 end 被忽略，copyWithin 将会复制到 arr.length。（但是我觉得因为换成：如果 end 被忽略，那么end默认为数组的索引长度，）</p>\n<p><code>copyWithin</code>方法不要求其this值必须是一个数组对象；除此之外，copyWithin是一个可变方法，它可以改变this对象本身，并且返回它，而不仅仅是它的拷贝。</p>\n<p>MDN的例子很好的说明了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">-2</span>);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">-2</span>, <span class=\"number\">-3</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[].copyWithin.call(&#123;<span class=\"attr\">length</span>: <span class=\"number\">5</span>, <span class=\"number\">3</span>: <span class=\"number\">1</span>&#125;, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i32a = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">i32a.copyWithin(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[].copyWithin.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]), <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>不支持copyWithin,可以使用polyfill<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.copyWithin) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.copyWithin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, start<span class=\"regexp\">/*, end*/</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Steps 1-2.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'this is null or not defined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 3-5.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 6-8.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> relativeTarget = target &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> to = relativeTarget &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(len + relativeTarget, <span class=\"number\">0</span>) :</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.min(relativeTarget, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 9-11.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> relativeStart = start &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">from</span> = relativeStart &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(len + relativeStart, <span class=\"number\">0</span>) :</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.min(relativeStart, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 12-14.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> end = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> relativeEnd = end === <span class=\"literal\">undefined</span> ? len : end &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> final = relativeEnd &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.max(len + relativeEnd, <span class=\"number\">0</span>) :</span><br><span class=\"line\">      <span class=\"built_in\">Math</span>.min(relativeEnd, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 15.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"built_in\">Math</span>.min(final - <span class=\"keyword\">from</span>, len - to);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Steps 16-17.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> direction = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> &lt; to &amp;&amp; to &lt; (<span class=\"keyword\">from</span> + count)) &#123;</span><br><span class=\"line\">      direction = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">from</span> += count - <span class=\"number\">1</span>;</span><br><span class=\"line\">      to += count - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 18.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">        O[to] = O[<span class=\"keyword\">from</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> O[to];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">from</span> += direction;</span><br><span class=\"line\">      to += direction;</span><br><span class=\"line\">      count--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 19.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> O;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>copyWithin也同样可以用Array.prototype.copyWithin.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">2</span>:<span class=\"number\">3</span>, <span class=\"number\">3</span>:<span class=\"number\">4</span>, <span class=\"number\">4</span>:<span class=\"number\">5</span>,<span class=\"attr\">length</span>:<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin.call(o,<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 4, 1: 5, 2: 3, 3: 4, 4: 5, length: 5&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fill-用一个固定值替换数组内从起始索引到终止索引直接的全部元素\"><a href=\"#fill-用一个固定值替换数组内从起始索引到终止索引直接的全部元素\" class=\"headerlink\" title=\"fill 用一个固定值替换数组内从起始索引到终止索引直接的全部元素\"></a>fill 用一个固定值替换数组内从起始索引到终止索引直接的全部元素</h3><p><code>arr.fill(value, start, end)</code><br>value替换数组元素的值<br>start起始索引，默认为0，如果是个负数，则开始索引为length+start<br>end 终止索引，默认为数组索引的长度，如果是个负数，则终止索引为length+end</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>)            <span class=\"comment\">// [4, 4, 4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">1</span>)         <span class=\"comment\">// [1, 4, 4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)      <span class=\"comment\">// [1, 4, 3]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)      <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"number\">-3</span>, <span class=\"number\">-2</span>)    <span class=\"comment\">// [4, 2, 3]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].fill(<span class=\"number\">4</span>, <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>)  <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">4</span>);            <span class=\"comment\">// [4, 4, 4]</span></span><br><span class=\"line\">[].fill.call(&#123;<span class=\"attr\">length</span>: <span class=\"number\">3</span>&#125;, <span class=\"number\">4</span>) <span class=\"comment\">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br></pre></td></tr></table></figure>\n<p>不支持fill可以使用polyfill<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.fill) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'fill'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 1-2.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'this is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3-5.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 6-7.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> start = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> relativeStart = start &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 8.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = relativeStart &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.max(len + relativeStart, <span class=\"number\">0</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.min(relativeStart, len);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 9-10.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> end = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> relativeEnd = end === <span class=\"literal\">undefined</span> ?</span><br><span class=\"line\">        len : end &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 11.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> final = relativeEnd &lt; <span class=\"number\">0</span> ?</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.max(len + relativeEnd, <span class=\"number\">0</span>) :</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.min(relativeEnd, len);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 12.</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; final) &#123;</span><br><span class=\"line\">        O[k] = value;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Step 13.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> O;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>在MDN上有一句：fill 方法故意被设计成通用方法, 它需要this值是个对象，类数组对象调用会报错</code></p>\n<p>但是发现 fill 也同样适用于Array.prototype.fill.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">2</span>, <span class=\"number\">2</span>:<span class=\"number\">3</span>, <span class=\"number\">3</span>:<span class=\"number\">4</span>, <span class=\"number\">4</span>:<span class=\"number\">5</span>,<span class=\"attr\">length</span>:<span class=\"number\">5</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"built_in\">Array</span>.prototype.fill.call(o,<span class=\"number\">10</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 10, 1: 10, 2: 3, 3: 4, 4: 5, length: 5&#125;</span></span><br></pre></td></tr></table></figure>\n<p>与copyWithin不同的是，copyWithin是只能数组之间替换元素<br>而fill是指定一个固定值然后替换掉数组相应的数组索引</p>\n<p>参考资料1：<a href=\"http://louiszhai.github.io/2017/04/28/array\" target=\"_blank\" rel=\"noopener\">http://louiszhai.github.io/2017/04/28/array</a><br>参考资料2：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>"},{"title":"js复习手记三","date":"2018-01-24T09:28:46.000Z","_content":"\n### forEach  every  some  filter  map  reduce  reduceRight以及es6新增的entries  find  findIndex keys  values 都是基于es6，不会改变自身的办法一共有12个。\n\n### forEach 方法指定数组的每项元素都执行一次传入函数，返回值为undefined.\n语法：arr.forEach(fn, thisArg)\n\nfn 标识在数组每一项上执行的函数，接收三个参数。\n- value 当前正在被处理的元素的值\n- index 当前正在被处理元素的索引\n- array 当前数组的本身\n\nthisArg 可选，用来当作fn函数内的this对象\n\nforEach 将为数组中的每一项执行一次fn函数，那些已删除，新增或者从未赋值的项将被跳过（但不包括值为undefined的项）\n\n遍历过程中，fn会被传入上述三个参数\n\n<!-- more -->\n```js\nvar arr =[1,2,3,4]\nvar obj = {name:'cc'}\narr.forEach(function(value,index,array){\n\tarr[index] = value * 2\n\tconsole.log(this.name)\n\tconsole.log(value)\n},obj)\n// cc\n// 1\n// cc\n// 2\n// cc\n// 3\n// cc\n// 4\n// obj.name执行了四次\n```\n\n同样也可以用Array.prototype.forEach.call()\n```js\nvar o = {0:1, 1:3, 2:5, length:3};\nArray.prototype.forEach.call(o,function(value, index, obj){\n  console.log(value,index,obj);\n  obj[index] = value * value;\n},o);\n```\n\n如果不支持可以用polyfill\n\n```js\nif (!Array.prototype.forEach) {\n\n  Array.prototype.forEach = function(callback, thisArg) {\n\n    var T, k;\n\n    if (this == null) {\n      throw new TypeError(' this is null or not defined');\n    }\n\n    // 1. Let O be the result of calling toObject() passing the\n    // |this| value as the argument.\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get() internal\n    // method of O with the argument \"length\".\n    // 3. Let len be toUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If isCallable(callback) is false, throw a TypeError exception. \n    // See: http://es5.github.com/#x9.11\n    if (typeof callback !== \"function\") {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let\n    // T be undefined.\n    if (arguments.length > 1) {\n      T = thisArg;\n    }\n\n    // 6. Let k be 0\n    k = 0;\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n\n      var kValue;\n\n      // a. Let Pk be ToString(k).\n      //    This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the HasProperty\n      //    internal method of O with argument Pk.\n      //    This step can be combined with c\n      // c. If kPresent is true, then\n      if (k in O) {\n\n        // i. Let kValue be the result of calling the Get internal\n        // method of O with argument Pk.\n        kValue = O[k];\n\n        // ii. Call the Call internal method of callback with T as\n        // the this value and argument list containing kValue, k, and O.\n        callback.call(T, kValue, k, O);\n      }\n      // d. Increase k by 1.\n      k++;\n    }\n    // 8. return undefined\n  };\n}\n```\n\n### every 传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\n\n- 若需检测数组中所有存在元素是否大于10（即value > 10），那么需要在传入的函数中return 'true'返回值，同时整个方法结果为true才表示数组存在的元素满足条件 （即数组中的value 都大于10，那么就算满足条件，返回true）\n- 反之 若需要检测数组中存在的元素是否有不满足的大于10的，返回 'false'\n\n语法同forEach 相同， \n\n```js\nvar arr = [11,12,13,14,15,16]\nvar arr2 = [1,11,12,13,14,15]\narr.every(function(value){\n\tconsole.log(value > 10)\n})\narr2.every(function(value){\n\tconsole.log(value > 10)\n})\n\n// true false\n// arr2 因为数组第一个元素不满足 条件，所以返回false\n```\n\n同样也适用Array.prototype.every.call()\n\n```js\nvar o = {0:10, 1:8, 2:25, length:3};\nvar bool = Array.prototype.every.call(o,function(value, index, obj){\n  return value >= 8;\n},o);\nconsole.log(bool);\n```\n\n如果不支持，可以用ployfill\n\n```js\nif (!Array.prototype.every)\n{\n  Array.prototype.every = function(fun /*, thisArg */)\n  {\n    'use strict';\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== 'function')\n        throw new TypeError();\n\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t && !fun.call(thisArg, t[i], i, t))\n        return false;\n    }\n\n    return true;\n  };\n}\n```\n\n### some 跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false,则该方法才返回false，\n\n- 若需检测数组中存在的元素是否有一个元素或多个元素大于10（即value > 10）,那么我们需要在传入的函数中 return 'true'，则some返回true,反之所有函数的返回false，则some返回false\n\n```js\nvar arr = [10,1,2,3,4]\nvar arr2 = [1,2,3,4,5]\nvar arr3 = arr.some(function(value){\n\treturn value >= 10\n})\nvar arr4 = arr2.some(function(value){\n\treturn value >= 10\n})\nconsole.log(arr3,arr4)\n\n// true false\n```\n\nArray.prototype.come.call()同every一样，参照every的写法。\n\n如果不支持的话可以用polyfill:\n\n```js\nif (!Array.prototype.some)\n{\n  Array.prototype.some = function(fun /*, thisArg */)\n  {\n    'use strict';\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== 'function')\n      throw new TypeError();\n\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t && fun.call(thisArg, t[i], i, t))\n        return true;\n    }\n\n    return false;\n  };\n}\n```\n\n### filter 使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\n\n语法：arr.filter(fn, thisArg)\n\n```js\nvar arr = [10,3,20,12,13,40]\nvar arr2 = arr.filter(function(value){\n\treturn value >= 10 && value <= 20\n})\nconsole.log(arr2)\n// [10, 20, 12, 13]\n// 满足大于等于10且小于等于20，并输出\n```\nArray.prototype.filter.call()写法同every一样，polyfill:\n\n```js\nif (!Array.prototype.filter)\n{\n  Array.prototype.filter = function(fun /* , thisArg*/)\n  {\n    \"use strict\";\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\")\n      throw new TypeError();\n\n    var res = [];\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t)\n      {\n        var val = t[i];\n\n        // NOTE: Technically this should Object.defineProperty at\n        //       the next index, as push can be affected by\n        //       properties on Object.prototype and Array.prototype.\n        //       But that method's new, and collisions should be\n        //       rare, so use the more-compatible alternative.\n        if (fun.call(thisArg, val, i, t))\n          res.push(val);\n      }\n    }\n\n    return res;\n  };\n}\n```\n\n\n### map 遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\n\n语法：\nlet new_array = arr.map(function callback(currentValue, index, array) { \n    // Return element for new_array \n}[, thisArg])\n\n- map方法会给数组中的每个元素都按顺序调用一次callback函数，callback每次执行后返回的返回值（包括undefined）组合成新的数组，callback函数只会在有有值的索引上被调用，那些从来没被赋过值或者使用delete删除的索引则不会使用。\n- callback 函数会被自动传入三个参数，数组元素，数组索引，原数组本身\n- thisArg 参数有值，则每次callback函数被调用的时候，this都会指向这个thisArg参数上的这个对象，如果省略了thisArg参数，或者赋值为null或undefined，则this指向全局对象。\n- map在执行的的时候不会修改原数组本身 （也可以在callback执行时改变原数组元素）\n- 使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。\n\n```js\nvar obj = [{key:1,value:10},{key:2,value:20},{key:3,value:30}]\nvar obj2 = obj.map(function(value){\n\tvar robj = {};\n\trobj[value.key] = value.value;\n\treturn robj\n})\nconsole.log(obj2)\n\n// 0:{1: 10}\n// 1:{2: 20}\n// 2:{3: 30}\n\n\n// console.log(obj)\n// 0:{key: 1, value: 10}\n// 1:{key: 2, value: 20}\n// 2:{key: 3, value: 30}\n// 原远足未被修改\n```\n\nArray.prototype.map.cal()使用:\n```js\nvar a = Array.prototype.map.call('hello word',function(value){\n\tconsole.log(value)\n})\n\n\nh\ne\nl\nl\no\n\nw\no\nr\nd\n```\n\n遍历querySelectorAll()所有集合\n```js\nvar el = document.querySelectorAll('div')\nArray.prototype.map.call(el,function(value){\n\tconsole.log(value)\n})\n```\n\n返回字符串\n```js\nvar str = '12345';\nArray.prototype.map.call(str, function(x) {\n  return x;\n}).reverse().join(''); \n\n// 输出: '54321'\n```\n\nMDN上有这么描述map的话：\n\n通常情况下，map 方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着 map 只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。\n\n```js\n// 下面的语句返回什么呢:\n[\"1\", \"2\", \"3\"].map(parseInt);\n// 你可能觉的会是[1, 2, 3]\n// 但实际的结果是 [1, NaN, NaN]\n\n// 通常使用parseInt时,只需要传递一个参数.\n// 但实际上,parseInt可以有两个参数.第二个参数是进制数.\n// 可以通过语句\"alert(parseInt.length)===2\"来验证.\n// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, \n// 元素索引, 原数组本身.\n// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,\n// parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.\n\nfunction returnInt(element) {\n  return parseInt(element, 10);\n}\n\n['1', '2', '3'].map(returnInt); // [1, 2, 3]\n// 意料之中的结果\n\n// 也可以使用简单的箭头函数，结果同上\n['1', '2', '3'].map( str => parseInt(str) ); // [1, 2, 3]\n\n// 一个更简单的方式:\n['1', '2', '3'].map(Number); // [1, 2, 3]\n// 与`parseInt` 不同，下面的结果会返回浮点数或指数:\n['1.1', '2.2e2', '3e300'].map(Number); // [1.1, 220, 3e+300]\n```\n\n\n### reduce 接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\n\n语法：arr.reduce(callback, initialValue)\n\ncallback 每次执行数组中每个值的函数，包含四个参数:\n\n- previousValue 上一次调用回调时累计的返回的值，或者是提供的初始值\n- value 数组中当前被处理元素的值\n- index 当前元素在数组中的索引\n- array 原数组自身\n\ninitialValue 指定第一次调用fn的第一个参数，如果没有提供初始值，则使用数组的第一个元素的值，。\n\n当callback第一次执行时：\n- 如果initialValue 在调用reduce时被提供，那么第一个previousValue 将等于initialValue，此时item等于数组中的第一个值\n- 如果 initialValue 未被提供，那么 previousVaule 等于数组中的第一个值，item 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。\n- 如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么fn不会被执行，数组的唯一值将被返回。\n\n计算1到900的和\n```js\nvar arr = []\nfor(var i=0;i<=1000;i++){\n\tarr.push(i)\n\tif(i == 900){\n\t\tvar arr2 = arr.reduce(function(sum,value){\n\t\t\treturn sum+value\n\t\t})\n\t}\n}\nconsole.log(arr2)\n// 405450\n```\n\n把数组的[1,2,3,4,5]转换成整数的12345\n```js\nvar num = [1,2,3,4,5].reduce(function(x,y){\n\treturn x.toString() + y\n})\nconsole.log(num)\n// 12345\n```\n\n数组去除重复\n```js\nvar arr = [1,2,3,2,1,33,3,2,1]\nvar arr2 = arr.sort().reduce(function(init,current){\n\tif(init.length === 0 || init[init.length-1]!== current){\n\t\tinit.push(current);\n\t}\n  return init;\n},[])\nconsole.log(arr2)\n// [1, 2, 3, 33]\n```\n\n```js\nvar array = [1, 2, 3, 4];\nvar s = array.reduce(function(previousValue, value, index, array){\n  return previousValue * value;\n},1);\nconsole.log(s); // 24\n// ES6写法更加简洁\narray.reduce((p, v) => p * v); // 24\n```\n\n以上回调被执行了4次，每次的参数和返回：\n|callback\t|previousValue\t|currentValue\t|index\t|array\t|return |value|\n|---|---|---|---|---|---|---|\n|第1次\t|1\t|1\t|1\t|[1,2,3,4]\t1|\n|第2次\t|1\t|2\t|2\t|[1,2,3,4]\t2|\n|第3次\t|2\t|3\t|3\t|[1,2,3,4]\t6|\n|第4次\t|6\t|4\t|4\t|[1,2,3,4]\t24|\n\nArray.prototype.reduce.call()写法参照every，如果不支持reduce,可以用polyfill:\n\n```js\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n\n### reduceRight 方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\n\npolyfill:\n```js\nif ('function' !== typeof Array.prototype.reduceRight) {\n  Array.prototype.reduceRight = function(callback /*, initialValue*/) {\n    'use strict';\n    if (null === this || 'undefined' === typeof this) {\n      throw new TypeError('Array.prototype.reduce called on null or undefined');\n    }\n    if ('function' !== typeof callback) {\n      throw new TypeError(callback + ' is not a function');\n    }\n    var t = Object(this), len = t.length >>> 0, k = len - 1, value;\n    if (arguments.length >= 2) {\n      value = arguments[1];\n    } else {\n      while (k >= 0 && !(k in t)) {\n        k--;\n      }\n      if (k < 0) {\n        throw new TypeError('Reduce of empty array with no initial value');\n      }\n      value = t[k--];\n    }\n    for (; k >= 0; k--) {\n      if (k in t) {\n        value = callback(value, t[k], k, t);\n      }\n    }\n    return value;\n  };\n}\n```\n\n\n### entries 基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对,手动循环对象的属性值可以输出相应的属性位置的值。\n\n```js\nvar arr = [1,2,3,4]\nvar arr2 = arr.entries()\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\n\n// [0, 1]\n// [1, 2]\n// [2, 3]\n// [3, 4]\n// undefined 数组结尾在迭代就是undefined\n```\n\n也可以使用：Array.prototype.entries.call() \n\n```js\nvar o = {0:\"a\", 1:\"b\", 2:\"c\", length:3};\nvar iterator = Array.prototype.entries.call(o);\nconsole.log(iterator.next().value); // [0, \"a\"]\nconsole.log(iterator.next().value); // [1, \"b\"]\nconsole.log(iterator.next().value); // [2, \"c\"]\n```\n\n\n### find 基于ECMAScript2015(es6)规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组 则返回undefined，find不会改变原来的数组。\n\n语法：arr.find(callback[, thisArg])\n\n- callback 执行数组的每一个值的函数，接收3个参数\n- element 当前遍历到的元素\n- index 当前遍历到的索引\n- array 数组本身\n- thisArg 可指定callback的this参数\n\n查找满足条件的数组对象\n```js\nvar inventory = [\n    {value: 'js', name: 0},\n    {value: 'css', name: 1},\n    {value: 'jq', name: 2}\n];\n\nfunction findCherries(fruit) { \n    return fruit.value === 'css';\n}\n\nfunction findIndexCher(isValue){\n  return isValue === 'vue'\n}\n\nconsole.log(inventory.find(findCherries));  // {value: \"css\", name: 1}\nconsole.log(inventory.find(findIndexCher)); // undefined\n```\n\nArray.prototype.find.call()写法与上面类似，不在阐述，\n\npolyfill:\n```js\nif (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, 'find', {\n    value: function(predicate) {\n     // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return kValue.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return kValue;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return undefined.\n      return undefined;\n    }\n  });\n}\n```\n\n\n### findIndex 基于ECMASscript2015(es6)规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\n\n```js\nvar inventory = [\n    {value: 'js', name: 0},\n    {value: 'css', name: 1},\n    {value: 'jq', name: 2}\n];\n\nfunction findCherries(fruit) { \n    return fruit.value === 'css';\n}\n\nfunction findIndexCher(isValue){\n  return isValue === 'vue'\n}\n\nconsole.log(inventory.find(findCherries));  // 1\nconsole.log(inventory.find(findIndexCher)); // -1\n```\n\nArray.prototype.findIndex.call()写法与上面类似，不在阐述，\n\n\npolyfil:\n```js\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    value: function(predicate) {\n     // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return k.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return k;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return -1.\n      return -1;\n    }\n  });\n}\n```\n\n\n### keys 基于ECMAScript2015(es6)规范，返回一个数组索引的迭代器\n\n```js\nvar arr = ['js','css','jq']\nvar iterator = arr.keys()\nconsole.log(iterator.next()) // {value: 0, done: false}\nconsole.log(iterator.next()) // {value: 1, done: false}\nconsole.log(iterator.next()) // {value: 2, done: false}\nconsole.log(iterator.next()) // {value: undefined, done: true}\n```\n\n在稀疏数组中使用keys也会 包含那些没有值的对应索引，如下：\n\n```js\nvar array = [\"abc\", , \"xyz\"];\nvar sparseKeys = Object.keys(array);\nvar denseKeys = [...array.keys()];\nconsole.log(sparseKeys); // [\"0\", \"2\"]\nconsole.log(denseKeys);  // [0, 1, 2]\n```\n\n用keys快速生成0到10的新数组\n```js\n[...Array(10).keys()]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[...new Array(10).keys()]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nArray.prototype.keys.call()写法与上面类似，不在阐述，\n\n\n### values  基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\n\n```js\nvar array = [\"abc\", \"xyz\"];\nvar iterator = array.values();\nconsole.log(iterator.next().value);//abc\nconsole.log(iterator.next().value);//xyz\n```\n\n\n### Symbol.iterator 该方法基于ECMAScript 2015（ES6）规范，同 values 方法功能相同。\n\n```js\nvar array = [\"abc\", \"xyz\"];\nvar iterator = array[Symbol.iterator]();\nconsole.log(iterator.next().value); // abc\nconsole.log(iterator.next().value); // xyz\n```\n\nArray.prototype[Symbol.iterator].call()写法与上面类似，不在阐述\n\n\n参考资料1：http://louiszhai.github.io/2017/04/28/array\n参考资料2：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","source":"_posts/js复习手记三.md","raw":"---\ntitle: js复习手记三\ndate: 2018-01-24 17:28:46\ntags: 主页\n---\n\n### forEach  every  some  filter  map  reduce  reduceRight以及es6新增的entries  find  findIndex keys  values 都是基于es6，不会改变自身的办法一共有12个。\n\n### forEach 方法指定数组的每项元素都执行一次传入函数，返回值为undefined.\n语法：arr.forEach(fn, thisArg)\n\nfn 标识在数组每一项上执行的函数，接收三个参数。\n- value 当前正在被处理的元素的值\n- index 当前正在被处理元素的索引\n- array 当前数组的本身\n\nthisArg 可选，用来当作fn函数内的this对象\n\nforEach 将为数组中的每一项执行一次fn函数，那些已删除，新增或者从未赋值的项将被跳过（但不包括值为undefined的项）\n\n遍历过程中，fn会被传入上述三个参数\n\n<!-- more -->\n```js\nvar arr =[1,2,3,4]\nvar obj = {name:'cc'}\narr.forEach(function(value,index,array){\n\tarr[index] = value * 2\n\tconsole.log(this.name)\n\tconsole.log(value)\n},obj)\n// cc\n// 1\n// cc\n// 2\n// cc\n// 3\n// cc\n// 4\n// obj.name执行了四次\n```\n\n同样也可以用Array.prototype.forEach.call()\n```js\nvar o = {0:1, 1:3, 2:5, length:3};\nArray.prototype.forEach.call(o,function(value, index, obj){\n  console.log(value,index,obj);\n  obj[index] = value * value;\n},o);\n```\n\n如果不支持可以用polyfill\n\n```js\nif (!Array.prototype.forEach) {\n\n  Array.prototype.forEach = function(callback, thisArg) {\n\n    var T, k;\n\n    if (this == null) {\n      throw new TypeError(' this is null or not defined');\n    }\n\n    // 1. Let O be the result of calling toObject() passing the\n    // |this| value as the argument.\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get() internal\n    // method of O with the argument \"length\".\n    // 3. Let len be toUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If isCallable(callback) is false, throw a TypeError exception. \n    // See: http://es5.github.com/#x9.11\n    if (typeof callback !== \"function\") {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let\n    // T be undefined.\n    if (arguments.length > 1) {\n      T = thisArg;\n    }\n\n    // 6. Let k be 0\n    k = 0;\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n\n      var kValue;\n\n      // a. Let Pk be ToString(k).\n      //    This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the HasProperty\n      //    internal method of O with argument Pk.\n      //    This step can be combined with c\n      // c. If kPresent is true, then\n      if (k in O) {\n\n        // i. Let kValue be the result of calling the Get internal\n        // method of O with argument Pk.\n        kValue = O[k];\n\n        // ii. Call the Call internal method of callback with T as\n        // the this value and argument list containing kValue, k, and O.\n        callback.call(T, kValue, k, O);\n      }\n      // d. Increase k by 1.\n      k++;\n    }\n    // 8. return undefined\n  };\n}\n```\n\n### every 传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\n\n- 若需检测数组中所有存在元素是否大于10（即value > 10），那么需要在传入的函数中return 'true'返回值，同时整个方法结果为true才表示数组存在的元素满足条件 （即数组中的value 都大于10，那么就算满足条件，返回true）\n- 反之 若需要检测数组中存在的元素是否有不满足的大于10的，返回 'false'\n\n语法同forEach 相同， \n\n```js\nvar arr = [11,12,13,14,15,16]\nvar arr2 = [1,11,12,13,14,15]\narr.every(function(value){\n\tconsole.log(value > 10)\n})\narr2.every(function(value){\n\tconsole.log(value > 10)\n})\n\n// true false\n// arr2 因为数组第一个元素不满足 条件，所以返回false\n```\n\n同样也适用Array.prototype.every.call()\n\n```js\nvar o = {0:10, 1:8, 2:25, length:3};\nvar bool = Array.prototype.every.call(o,function(value, index, obj){\n  return value >= 8;\n},o);\nconsole.log(bool);\n```\n\n如果不支持，可以用ployfill\n\n```js\nif (!Array.prototype.every)\n{\n  Array.prototype.every = function(fun /*, thisArg */)\n  {\n    'use strict';\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== 'function')\n        throw new TypeError();\n\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t && !fun.call(thisArg, t[i], i, t))\n        return false;\n    }\n\n    return true;\n  };\n}\n```\n\n### some 跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false,则该方法才返回false，\n\n- 若需检测数组中存在的元素是否有一个元素或多个元素大于10（即value > 10）,那么我们需要在传入的函数中 return 'true'，则some返回true,反之所有函数的返回false，则some返回false\n\n```js\nvar arr = [10,1,2,3,4]\nvar arr2 = [1,2,3,4,5]\nvar arr3 = arr.some(function(value){\n\treturn value >= 10\n})\nvar arr4 = arr2.some(function(value){\n\treturn value >= 10\n})\nconsole.log(arr3,arr4)\n\n// true false\n```\n\nArray.prototype.come.call()同every一样，参照every的写法。\n\n如果不支持的话可以用polyfill:\n\n```js\nif (!Array.prototype.some)\n{\n  Array.prototype.some = function(fun /*, thisArg */)\n  {\n    'use strict';\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== 'function')\n      throw new TypeError();\n\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t && fun.call(thisArg, t[i], i, t))\n        return true;\n    }\n\n    return false;\n  };\n}\n```\n\n### filter 使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\n\n语法：arr.filter(fn, thisArg)\n\n```js\nvar arr = [10,3,20,12,13,40]\nvar arr2 = arr.filter(function(value){\n\treturn value >= 10 && value <= 20\n})\nconsole.log(arr2)\n// [10, 20, 12, 13]\n// 满足大于等于10且小于等于20，并输出\n```\nArray.prototype.filter.call()写法同every一样，polyfill:\n\n```js\nif (!Array.prototype.filter)\n{\n  Array.prototype.filter = function(fun /* , thisArg*/)\n  {\n    \"use strict\";\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== \"function\")\n      throw new TypeError();\n\n    var res = [];\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t)\n      {\n        var val = t[i];\n\n        // NOTE: Technically this should Object.defineProperty at\n        //       the next index, as push can be affected by\n        //       properties on Object.prototype and Array.prototype.\n        //       But that method's new, and collisions should be\n        //       rare, so use the more-compatible alternative.\n        if (fun.call(thisArg, val, i, t))\n          res.push(val);\n      }\n    }\n\n    return res;\n  };\n}\n```\n\n\n### map 遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\n\n语法：\nlet new_array = arr.map(function callback(currentValue, index, array) { \n    // Return element for new_array \n}[, thisArg])\n\n- map方法会给数组中的每个元素都按顺序调用一次callback函数，callback每次执行后返回的返回值（包括undefined）组合成新的数组，callback函数只会在有有值的索引上被调用，那些从来没被赋过值或者使用delete删除的索引则不会使用。\n- callback 函数会被自动传入三个参数，数组元素，数组索引，原数组本身\n- thisArg 参数有值，则每次callback函数被调用的时候，this都会指向这个thisArg参数上的这个对象，如果省略了thisArg参数，或者赋值为null或undefined，则this指向全局对象。\n- map在执行的的时候不会修改原数组本身 （也可以在callback执行时改变原数组元素）\n- 使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。\n\n```js\nvar obj = [{key:1,value:10},{key:2,value:20},{key:3,value:30}]\nvar obj2 = obj.map(function(value){\n\tvar robj = {};\n\trobj[value.key] = value.value;\n\treturn robj\n})\nconsole.log(obj2)\n\n// 0:{1: 10}\n// 1:{2: 20}\n// 2:{3: 30}\n\n\n// console.log(obj)\n// 0:{key: 1, value: 10}\n// 1:{key: 2, value: 20}\n// 2:{key: 3, value: 30}\n// 原远足未被修改\n```\n\nArray.prototype.map.cal()使用:\n```js\nvar a = Array.prototype.map.call('hello word',function(value){\n\tconsole.log(value)\n})\n\n\nh\ne\nl\nl\no\n\nw\no\nr\nd\n```\n\n遍历querySelectorAll()所有集合\n```js\nvar el = document.querySelectorAll('div')\nArray.prototype.map.call(el,function(value){\n\tconsole.log(value)\n})\n```\n\n返回字符串\n```js\nvar str = '12345';\nArray.prototype.map.call(str, function(x) {\n  return x;\n}).reverse().join(''); \n\n// 输出: '54321'\n```\n\nMDN上有这么描述map的话：\n\n通常情况下，map 方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着 map 只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。\n\n```js\n// 下面的语句返回什么呢:\n[\"1\", \"2\", \"3\"].map(parseInt);\n// 你可能觉的会是[1, 2, 3]\n// 但实际的结果是 [1, NaN, NaN]\n\n// 通常使用parseInt时,只需要传递一个参数.\n// 但实际上,parseInt可以有两个参数.第二个参数是进制数.\n// 可以通过语句\"alert(parseInt.length)===2\"来验证.\n// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, \n// 元素索引, 原数组本身.\n// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,\n// parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.\n\nfunction returnInt(element) {\n  return parseInt(element, 10);\n}\n\n['1', '2', '3'].map(returnInt); // [1, 2, 3]\n// 意料之中的结果\n\n// 也可以使用简单的箭头函数，结果同上\n['1', '2', '3'].map( str => parseInt(str) ); // [1, 2, 3]\n\n// 一个更简单的方式:\n['1', '2', '3'].map(Number); // [1, 2, 3]\n// 与`parseInt` 不同，下面的结果会返回浮点数或指数:\n['1.1', '2.2e2', '3e300'].map(Number); // [1.1, 220, 3e+300]\n```\n\n\n### reduce 接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\n\n语法：arr.reduce(callback, initialValue)\n\ncallback 每次执行数组中每个值的函数，包含四个参数:\n\n- previousValue 上一次调用回调时累计的返回的值，或者是提供的初始值\n- value 数组中当前被处理元素的值\n- index 当前元素在数组中的索引\n- array 原数组自身\n\ninitialValue 指定第一次调用fn的第一个参数，如果没有提供初始值，则使用数组的第一个元素的值，。\n\n当callback第一次执行时：\n- 如果initialValue 在调用reduce时被提供，那么第一个previousValue 将等于initialValue，此时item等于数组中的第一个值\n- 如果 initialValue 未被提供，那么 previousVaule 等于数组中的第一个值，item 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。\n- 如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么fn不会被执行，数组的唯一值将被返回。\n\n计算1到900的和\n```js\nvar arr = []\nfor(var i=0;i<=1000;i++){\n\tarr.push(i)\n\tif(i == 900){\n\t\tvar arr2 = arr.reduce(function(sum,value){\n\t\t\treturn sum+value\n\t\t})\n\t}\n}\nconsole.log(arr2)\n// 405450\n```\n\n把数组的[1,2,3,4,5]转换成整数的12345\n```js\nvar num = [1,2,3,4,5].reduce(function(x,y){\n\treturn x.toString() + y\n})\nconsole.log(num)\n// 12345\n```\n\n数组去除重复\n```js\nvar arr = [1,2,3,2,1,33,3,2,1]\nvar arr2 = arr.sort().reduce(function(init,current){\n\tif(init.length === 0 || init[init.length-1]!== current){\n\t\tinit.push(current);\n\t}\n  return init;\n},[])\nconsole.log(arr2)\n// [1, 2, 3, 33]\n```\n\n```js\nvar array = [1, 2, 3, 4];\nvar s = array.reduce(function(previousValue, value, index, array){\n  return previousValue * value;\n},1);\nconsole.log(s); // 24\n// ES6写法更加简洁\narray.reduce((p, v) => p * v); // 24\n```\n\n以上回调被执行了4次，每次的参数和返回：\n|callback\t|previousValue\t|currentValue\t|index\t|array\t|return |value|\n|---|---|---|---|---|---|---|\n|第1次\t|1\t|1\t|1\t|[1,2,3,4]\t1|\n|第2次\t|1\t|2\t|2\t|[1,2,3,4]\t2|\n|第3次\t|2\t|3\t|3\t|[1,2,3,4]\t6|\n|第4次\t|6\t|4\t|4\t|[1,2,3,4]\t24|\n\nArray.prototype.reduce.call()写法参照every，如果不支持reduce,可以用polyfill:\n\n```js\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' + \n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0; \n\n      // Steps 3, 4, 5, 6, 7      \n      var k = 0; \n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++; \n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.      \n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n```\n\n\n### reduceRight 方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\n\npolyfill:\n```js\nif ('function' !== typeof Array.prototype.reduceRight) {\n  Array.prototype.reduceRight = function(callback /*, initialValue*/) {\n    'use strict';\n    if (null === this || 'undefined' === typeof this) {\n      throw new TypeError('Array.prototype.reduce called on null or undefined');\n    }\n    if ('function' !== typeof callback) {\n      throw new TypeError(callback + ' is not a function');\n    }\n    var t = Object(this), len = t.length >>> 0, k = len - 1, value;\n    if (arguments.length >= 2) {\n      value = arguments[1];\n    } else {\n      while (k >= 0 && !(k in t)) {\n        k--;\n      }\n      if (k < 0) {\n        throw new TypeError('Reduce of empty array with no initial value');\n      }\n      value = t[k--];\n    }\n    for (; k >= 0; k--) {\n      if (k in t) {\n        value = callback(value, t[k], k, t);\n      }\n    }\n    return value;\n  };\n}\n```\n\n\n### entries 基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对,手动循环对象的属性值可以输出相应的属性位置的值。\n\n```js\nvar arr = [1,2,3,4]\nvar arr2 = arr.entries()\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\nconsole.log(arr2.next().value)\n\n// [0, 1]\n// [1, 2]\n// [2, 3]\n// [3, 4]\n// undefined 数组结尾在迭代就是undefined\n```\n\n也可以使用：Array.prototype.entries.call() \n\n```js\nvar o = {0:\"a\", 1:\"b\", 2:\"c\", length:3};\nvar iterator = Array.prototype.entries.call(o);\nconsole.log(iterator.next().value); // [0, \"a\"]\nconsole.log(iterator.next().value); // [1, \"b\"]\nconsole.log(iterator.next().value); // [2, \"c\"]\n```\n\n\n### find 基于ECMAScript2015(es6)规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组 则返回undefined，find不会改变原来的数组。\n\n语法：arr.find(callback[, thisArg])\n\n- callback 执行数组的每一个值的函数，接收3个参数\n- element 当前遍历到的元素\n- index 当前遍历到的索引\n- array 数组本身\n- thisArg 可指定callback的this参数\n\n查找满足条件的数组对象\n```js\nvar inventory = [\n    {value: 'js', name: 0},\n    {value: 'css', name: 1},\n    {value: 'jq', name: 2}\n];\n\nfunction findCherries(fruit) { \n    return fruit.value === 'css';\n}\n\nfunction findIndexCher(isValue){\n  return isValue === 'vue'\n}\n\nconsole.log(inventory.find(findCherries));  // {value: \"css\", name: 1}\nconsole.log(inventory.find(findIndexCher)); // undefined\n```\n\nArray.prototype.find.call()写法与上面类似，不在阐述，\n\npolyfill:\n```js\nif (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, 'find', {\n    value: function(predicate) {\n     // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return kValue.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return kValue;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return undefined.\n      return undefined;\n    }\n  });\n}\n```\n\n\n### findIndex 基于ECMASscript2015(es6)规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\n\n```js\nvar inventory = [\n    {value: 'js', name: 0},\n    {value: 'css', name: 1},\n    {value: 'jq', name: 2}\n];\n\nfunction findCherries(fruit) { \n    return fruit.value === 'css';\n}\n\nfunction findIndexCher(isValue){\n  return isValue === 'vue'\n}\n\nconsole.log(inventory.find(findCherries));  // 1\nconsole.log(inventory.find(findIndexCher)); // -1\n```\n\nArray.prototype.findIndex.call()写法与上面类似，不在阐述，\n\n\npolyfil:\n```js\nif (!Array.prototype.findIndex) {\n  Object.defineProperty(Array.prototype, 'findIndex', {\n    value: function(predicate) {\n     // 1. Let O be ? ToObject(this value).\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      var thisArg = arguments[1];\n\n      // 5. Let k be 0.\n      var k = 0;\n\n      // 6. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kValue be ? Get(O, Pk).\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n        // d. If testResult is true, return k.\n        var kValue = o[k];\n        if (predicate.call(thisArg, kValue, k, o)) {\n          return k;\n        }\n        // e. Increase k by 1.\n        k++;\n      }\n\n      // 7. Return -1.\n      return -1;\n    }\n  });\n}\n```\n\n\n### keys 基于ECMAScript2015(es6)规范，返回一个数组索引的迭代器\n\n```js\nvar arr = ['js','css','jq']\nvar iterator = arr.keys()\nconsole.log(iterator.next()) // {value: 0, done: false}\nconsole.log(iterator.next()) // {value: 1, done: false}\nconsole.log(iterator.next()) // {value: 2, done: false}\nconsole.log(iterator.next()) // {value: undefined, done: true}\n```\n\n在稀疏数组中使用keys也会 包含那些没有值的对应索引，如下：\n\n```js\nvar array = [\"abc\", , \"xyz\"];\nvar sparseKeys = Object.keys(array);\nvar denseKeys = [...array.keys()];\nconsole.log(sparseKeys); // [\"0\", \"2\"]\nconsole.log(denseKeys);  // [0, 1, 2]\n```\n\n用keys快速生成0到10的新数组\n```js\n[...Array(10).keys()]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[...new Array(10).keys()]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\nArray.prototype.keys.call()写法与上面类似，不在阐述，\n\n\n### values  基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\n\n```js\nvar array = [\"abc\", \"xyz\"];\nvar iterator = array.values();\nconsole.log(iterator.next().value);//abc\nconsole.log(iterator.next().value);//xyz\n```\n\n\n### Symbol.iterator 该方法基于ECMAScript 2015（ES6）规范，同 values 方法功能相同。\n\n```js\nvar array = [\"abc\", \"xyz\"];\nvar iterator = array[Symbol.iterator]();\nconsole.log(iterator.next().value); // abc\nconsole.log(iterator.next().value); // xyz\n```\n\nArray.prototype[Symbol.iterator].call()写法与上面类似，不在阐述\n\n\n参考资料1：http://louiszhai.github.io/2017/04/28/array\n参考资料2：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","slug":"js复习手记三","published":1,"updated":"2018-04-24T14:27:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb605d0005a4vbb44vmju9","content":"<h3 id=\"forEach-every-some-filter-map-reduce-reduceRight以及es6新增的entries-find-findIndex-keys-values-都是基于es6，不会改变自身的办法一共有12个。\"><a href=\"#forEach-every-some-filter-map-reduce-reduceRight以及es6新增的entries-find-findIndex-keys-values-都是基于es6，不会改变自身的办法一共有12个。\" class=\"headerlink\" title=\"forEach  every  some  filter  map  reduce  reduceRight以及es6新增的entries  find  findIndex keys  values 都是基于es6，不会改变自身的办法一共有12个。\"></a>forEach  every  some  filter  map  reduce  reduceRight以及es6新增的entries  find  findIndex keys  values 都是基于es6，不会改变自身的办法一共有12个。</h3><h3 id=\"forEach-方法指定数组的每项元素都执行一次传入函数，返回值为undefined\"><a href=\"#forEach-方法指定数组的每项元素都执行一次传入函数，返回值为undefined\" class=\"headerlink\" title=\"forEach 方法指定数组的每项元素都执行一次传入函数，返回值为undefined.\"></a>forEach 方法指定数组的每项元素都执行一次传入函数，返回值为undefined.</h3><p>语法：arr.forEach(fn, thisArg)</p>\n<p>fn 标识在数组每一项上执行的函数，接收三个参数。</p>\n<ul>\n<li>value 当前正在被处理的元素的值</li>\n<li>index 当前正在被处理元素的索引</li>\n<li>array 当前数组的本身</li>\n</ul>\n<p>thisArg 可选，用来当作fn函数内的this对象</p>\n<p>forEach 将为数组中的每一项执行一次fn函数，那些已删除，新增或者从未赋值的项将被跳过（但不包括值为undefined的项）</p>\n<p>遍历过程中，fn会被传入上述三个参数</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'cc'</span>&#125;</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,array</span>)</span>&#123;</span><br><span class=\"line\">\tarr[index] = value * <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;,obj)</span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// obj.name执行了四次</span></span><br></pre></td></tr></table></figure>\n<p>同样也可以用Array.prototype.forEach.call()<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">3</span>, <span class=\"number\">2</span>:<span class=\"number\">5</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(o,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value,index,obj);</span><br><span class=\"line\">  obj[index] = value * value;</span><br><span class=\"line\">&#125;,o);</span><br></pre></td></tr></table></figure></p>\n<p>如果不支持可以用polyfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.forEach) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> T, k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">' this is null or not defined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. Let O be the result of calling toObject() passing the</span></span><br><span class=\"line\">    <span class=\"comment\">// |this| value as the argument.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. Let lenValue be the result of calling the Get() internal</span></span><br><span class=\"line\">    <span class=\"comment\">// method of O with the argument \"length\".</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. Let len be toUint32(lenValue).</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. If isCallable(callback) is false, throw a TypeError exception. </span></span><br><span class=\"line\">    <span class=\"comment\">// See: http://es5.github.com/#x9.11</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(callback + <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. If thisArg was supplied, let T be thisArg; else let</span></span><br><span class=\"line\">    <span class=\"comment\">// T be undefined.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      T = thisArg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6. Let k be 0</span></span><br><span class=\"line\">    k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 7. Repeat, while k &lt; len</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> kValue;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// a. Let Pk be ToString(k).</span></span><br><span class=\"line\">      <span class=\"comment\">//    This is implicit for LHS operands of the in operator</span></span><br><span class=\"line\">      <span class=\"comment\">// b. Let kPresent be the result of calling the HasProperty</span></span><br><span class=\"line\">      <span class=\"comment\">//    internal method of O with argument Pk.</span></span><br><span class=\"line\">      <span class=\"comment\">//    This step can be combined with c</span></span><br><span class=\"line\">      <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// i. Let kValue be the result of calling the Get internal</span></span><br><span class=\"line\">        <span class=\"comment\">// method of O with argument Pk.</span></span><br><span class=\"line\">        kValue = O[k];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ii. Call the Call internal method of callback with T as</span></span><br><span class=\"line\">        <span class=\"comment\">// the this value and argument list containing kValue, k, and O.</span></span><br><span class=\"line\">        callback.call(T, kValue, k, O);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// d. Increase k by 1.</span></span><br><span class=\"line\">      k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 8. return undefined</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"every-传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\"><a href=\"#every-传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\" class=\"headerlink\" title=\"every 传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\"></a>every 传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：</h3><ul>\n<li>若需检测数组中所有存在元素是否大于10（即value &gt; 10），那么需要在传入的函数中return ‘true’返回值，同时整个方法结果为true才表示数组存在的元素满足条件 （即数组中的value 都大于10，那么就算满足条件，返回true）</li>\n<li>反之 若需要检测数组中存在的元素是否有不满足的大于10的，返回 ‘false’</li>\n</ul>\n<p>语法同forEach 相同， </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>]</span><br><span class=\"line\">arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr2.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br><span class=\"line\"><span class=\"comment\">// arr2 因为数组第一个元素不满足 条件，所以返回false</span></span><br></pre></td></tr></table></figure>\n<p>同样也适用Array.prototype.every.call()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">10</span>, <span class=\"number\">1</span>:<span class=\"number\">8</span>, <span class=\"number\">2</span>:<span class=\"number\">25</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"built_in\">Array</span>.prototype.every.call(o,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;,o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool);</span><br></pre></td></tr></table></figure>\n<p>如果不支持，可以用ployfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.every)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.every = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun <span class=\"regexp\">/*, thisArg */</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fun !== <span class=\"string\">'function'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> t &amp;&amp; !fun.call(thisArg, t[i], i, t))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"some-跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false-则该方法才返回false，\"><a href=\"#some-跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false-则该方法才返回false，\" class=\"headerlink\" title=\"some 跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false,则该方法才返回false，\"></a>some 跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false,则该方法才返回false，</h3><ul>\n<li>若需检测数组中存在的元素是否有一个元素或多个元素大于10（即value &gt; 10）,那么我们需要在传入的函数中 return ‘true’，则some返回true,反之所有函数的返回false，则some返回false</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr2.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3,arr4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.come.call()同every一样，参照every的写法。</p>\n<p>如果不支持的话可以用polyfill:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.some)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.some = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun <span class=\"regexp\">/*, thisArg */</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fun !== <span class=\"string\">'function'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> t &amp;&amp; fun.call(thisArg, t[i], i, t))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter-使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\"><a href=\"#filter-使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\" class=\"headerlink\" title=\"filter 使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\"></a>filter 使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。</h3><p>语法：arr.filter(fn, thisArg)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>,<span class=\"number\">3</span>,<span class=\"number\">20</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value &gt;= <span class=\"number\">10</span> &amp;&amp; value &lt;= <span class=\"number\">20</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [10, 20, 12, 13]</span></span><br><span class=\"line\"><span class=\"comment\">// 满足大于等于10且小于等于20，并输出</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.filter.call()写法同every一样，polyfill:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.filter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.filter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun <span class=\"regexp\">/* , thisArg*/</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fun !== <span class=\"string\">\"function\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> t)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = t[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Technically this should Object.defineProperty at</span></span><br><span class=\"line\">        <span class=\"comment\">//       the next index, as push can be affected by</span></span><br><span class=\"line\">        <span class=\"comment\">//       properties on Object.prototype and Array.prototype.</span></span><br><span class=\"line\">        <span class=\"comment\">//       But that method's new, and collisions should be</span></span><br><span class=\"line\">        <span class=\"comment\">//       rare, so use the more-compatible alternative.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fun.call(thisArg, val, i, t))</span><br><span class=\"line\">          res.push(val);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"map-遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\"><a href=\"#map-遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\" class=\"headerlink\" title=\"map 遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\"></a>map 遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。</h3><p>语法：<br>let new_array = arr.map(function callback(currentValue, index, array) {<br>    // Return element for new_array<br>}[, thisArg])</p>\n<ul>\n<li>map方法会给数组中的每个元素都按顺序调用一次callback函数，callback每次执行后返回的返回值（包括undefined）组合成新的数组，callback函数只会在有有值的索引上被调用，那些从来没被赋过值或者使用delete删除的索引则不会使用。</li>\n<li>callback 函数会被自动传入三个参数，数组元素，数组索引，原数组本身</li>\n<li>thisArg 参数有值，则每次callback函数被调用的时候，this都会指向这个thisArg参数上的这个对象，如果省略了thisArg参数，或者赋值为null或undefined，则this指向全局对象。</li>\n<li>map在执行的的时候不会修改原数组本身 （也可以在callback执行时改变原数组元素）</li>\n<li>使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = [&#123;<span class=\"attr\">key</span>:<span class=\"number\">1</span>,<span class=\"attr\">value</span>:<span class=\"number\">10</span>&#125;,&#123;<span class=\"attr\">key</span>:<span class=\"number\">2</span>,<span class=\"attr\">value</span>:<span class=\"number\">20</span>&#125;,&#123;<span class=\"attr\">key</span>:<span class=\"number\">3</span>,<span class=\"attr\">value</span>:<span class=\"number\">30</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> robj = &#123;&#125;;</span><br><span class=\"line\">\trobj[value.key] = value.value;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> robj</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0:&#123;1: 10&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 1:&#123;2: 20&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 2:&#123;3: 30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(obj)</span></span><br><span class=\"line\"><span class=\"comment\">// 0:&#123;key: 1, value: 10&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 1:&#123;key: 2, value: 20&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 2:&#123;key: 3, value: 30&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 原远足未被修改</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.map.cal()使用:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Array</span>.prototype.map.call(<span class=\"string\">'hello word'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">h</span><br><span class=\"line\">e</span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\">w</span><br><span class=\"line\">o</span><br><span class=\"line\">r</span><br><span class=\"line\">d</span><br></pre></td></tr></table></figure></p>\n<p>遍历querySelectorAll()所有集合<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(el,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>返回字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出: '54321'</span></span><br></pre></td></tr></table></figure></p>\n<p>MDN上有这么描述map的话：</p>\n<p>通常情况下，map 方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着 map 只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面的语句返回什么呢:</span></span><br><span class=\"line\">[<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>);</span><br><span class=\"line\"><span class=\"comment\">// 你可能觉的会是[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// 但实际的结果是 [1, NaN, NaN]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通常使用parseInt时,只需要传递一个参数.</span></span><br><span class=\"line\"><span class=\"comment\">// 但实际上,parseInt可以有两个参数.第二个参数是进制数.</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过语句\"alert(parseInt.length)===2\"来验证.</span></span><br><span class=\"line\"><span class=\"comment\">// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, </span></span><br><span class=\"line\"><span class=\"comment\">// 元素索引, 原数组本身.</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,</span></span><br><span class=\"line\"><span class=\"comment\">// parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">returnInt</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(element, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(returnInt); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// 意料之中的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用简单的箭头函数，结果同上</span></span><br><span class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map( <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(str) ); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个更简单的方式:</span></span><br><span class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(<span class=\"built_in\">Number</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// 与`parseInt` 不同，下面的结果会返回浮点数或指数:</span></span><br><span class=\"line\">[<span class=\"string\">'1.1'</span>, <span class=\"string\">'2.2e2'</span>, <span class=\"string\">'3e300'</span>].map(<span class=\"built_in\">Number</span>); <span class=\"comment\">// [1.1, 220, 3e+300]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce-接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\"><a href=\"#reduce-接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\" class=\"headerlink\" title=\"reduce 接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\"></a>reduce 接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。</h3><p>语法：arr.reduce(callback, initialValue)</p>\n<p>callback 每次执行数组中每个值的函数，包含四个参数:</p>\n<ul>\n<li>previousValue 上一次调用回调时累计的返回的值，或者是提供的初始值</li>\n<li>value 数组中当前被处理元素的值</li>\n<li>index 当前元素在数组中的索引</li>\n<li>array 原数组自身</li>\n</ul>\n<p>initialValue 指定第一次调用fn的第一个参数，如果没有提供初始值，则使用数组的第一个元素的值，。</p>\n<p>当callback第一次执行时：</p>\n<ul>\n<li>如果initialValue 在调用reduce时被提供，那么第一个previousValue 将等于initialValue，此时item等于数组中的第一个值</li>\n<li>如果 initialValue 未被提供，那么 previousVaule 等于数组中的第一个值，item 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li>\n<li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么fn不会被执行，数组的唯一值将被返回。</li>\n</ul>\n<p>计算1到900的和<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">\tarr.push(i)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == <span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> arr2 = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum,value</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> sum+value</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 405450</span></span><br></pre></td></tr></table></figure></p>\n<p>把数组的[1,2,3,4,5]转换成整数的12345<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x.toString() + y</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\"><span class=\"comment\">// 12345</span></span><br></pre></td></tr></table></figure></p>\n<p>数组去除重复<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">33</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.sort().reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">init,current</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(init.length === <span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!== current)&#123;</span><br><span class=\"line\">\t\tinit.push(current);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 33]</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, value, index, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> previousValue * value;</span><br><span class=\"line\">&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s); <span class=\"comment\">// 24</span></span><br><span class=\"line\"><span class=\"comment\">// ES6写法更加简洁</span></span><br><span class=\"line\">array.reduce(<span class=\"function\">(<span class=\"params\">p, v</span>) =&gt;</span> p * v); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n<p>以上回调被执行了4次，每次的参数和返回：<br>|callback    |previousValue    |currentValue    |index    |array    |return |value|<br>|—|—|—|—|—|—|—|<br>|第1次    |1    |1    |1    |[1,2,3,4]    1|<br>|第2次    |1    |2    |2    |[1,2,3,4]    2|<br>|第3次    |2    |3    |3    |[1,2,3,4]    6|<br>|第4次    |6    |4    |4    |[1,2,3,4]    24|</p>\n<p>Array.prototype.reduce.call()写法参照every，如果不支持reduce,可以用polyfill:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduceRight-方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\"><a href=\"#reduceRight-方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\" class=\"headerlink\" title=\"reduceRight 方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\"></a>reduceRight 方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce</h3><p>polyfill:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype.reduceRight) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.reduceRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> === <span class=\"keyword\">this</span> || <span class=\"string\">'undefined'</span> === <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Array.prototype.reduce called on null or undefined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span> callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(callback + <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>), len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>, k = len - <span class=\"number\">1</span>, value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; !(k <span class=\"keyword\">in</span> t)) &#123;</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Reduce of empty array with no initial value'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      value = t[k--];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; k &gt;= <span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> t) &#123;</span><br><span class=\"line\">        value = callback(value, t[k], k, t);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"entries-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对-手动循环对象的属性值可以输出相应的属性位置的值。\"><a href=\"#entries-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对-手动循环对象的属性值可以输出相应的属性位置的值。\" class=\"headerlink\" title=\"entries 基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对,手动循环对象的属性值可以输出相应的属性位置的值。\"></a>entries 基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对,手动循环对象的属性值可以输出相应的属性位置的值。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.entries()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [0, 1]</span></span><br><span class=\"line\"><span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">// undefined 数组结尾在迭代就是undefined</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用：Array.prototype.entries.call() </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>:<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>:<span class=\"string\">\"c\"</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"built_in\">Array</span>.prototype.entries.call(o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// [0, \"a\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// [1, \"b\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// [2, \"c\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"find-基于ECMAScript2015-es6-规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组-则返回undefined，find不会改变原来的数组。\"><a href=\"#find-基于ECMAScript2015-es6-规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组-则返回undefined，find不会改变原来的数组。\" class=\"headerlink\" title=\"find 基于ECMAScript2015(es6)规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组 则返回undefined，find不会改变原来的数组。\"></a>find 基于ECMAScript2015(es6)规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组 则返回undefined，find不会改变原来的数组。</h3><p>语法：arr.find(callback[, thisArg])</p>\n<ul>\n<li>callback 执行数组的每一个值的函数，接收3个参数</li>\n<li>element 当前遍历到的元素</li>\n<li>index 当前遍历到的索引</li>\n<li>array 数组本身</li>\n<li>thisArg 可指定callback的this参数</li>\n</ul>\n<p>查找满足条件的数组对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inventory = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'js'</span>, <span class=\"attr\">name</span>: <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'css'</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'jq'</span>, <span class=\"attr\">name</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCherries</span>(<span class=\"params\">fruit</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit.value === <span class=\"string\">'css'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findIndexCher</span>(<span class=\"params\">isValue</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValue === <span class=\"string\">'vue'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findCherries));  <span class=\"comment\">// &#123;value: \"css\", name: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findIndexCher)); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>Array.prototype.find.call()写法与上面类似，不在阐述，</p>\n<p>polyfill:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.find) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'find'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. If IsCallable(predicate) is false, throw a TypeError exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> predicate !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'predicate must be a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 5. Let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 6. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span></span><br><span class=\"line\">        <span class=\"comment\">// d. If testResult is true, return kValue.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> kValue = o[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate.call(thisArg, kValue, k, o)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> kValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// e. Increase k by 1.</span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Return undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findIndex-基于ECMASscript2015-es6-规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\"><a href=\"#findIndex-基于ECMASscript2015-es6-规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\" class=\"headerlink\" title=\"findIndex 基于ECMASscript2015(es6)规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\"></a>findIndex 基于ECMASscript2015(es6)规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inventory = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'js'</span>, <span class=\"attr\">name</span>: <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'css'</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'jq'</span>, <span class=\"attr\">name</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCherries</span>(<span class=\"params\">fruit</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit.value === <span class=\"string\">'css'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findIndexCher</span>(<span class=\"params\">isValue</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValue === <span class=\"string\">'vue'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findCherries));  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findIndexCher)); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.findIndex.call()写法与上面类似，不在阐述，</p>\n<p>polyfil:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.findIndex) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'findIndex'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. If IsCallable(predicate) is false, throw a TypeError exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> predicate !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'predicate must be a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 5. Let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 6. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span></span><br><span class=\"line\">        <span class=\"comment\">// d. If testResult is true, return k.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> kValue = o[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate.call(thisArg, kValue, k, o)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// e. Increase k by 1.</span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Return -1.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"keys-基于ECMAScript2015-es6-规范，返回一个数组索引的迭代器\"><a href=\"#keys-基于ECMAScript2015-es6-规范，返回一个数组索引的迭代器\" class=\"headerlink\" title=\"keys 基于ECMAScript2015(es6)规范，返回一个数组索引的迭代器\"></a>keys 基于ECMAScript2015(es6)规范，返回一个数组索引的迭代器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = arr.keys()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在稀疏数组中使用keys也会 包含那些没有值的对应索引，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"abc\"</span>, , <span class=\"string\">\"xyz\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sparseKeys = <span class=\"built_in\">Object</span>.keys(array);</span><br><span class=\"line\"><span class=\"keyword\">var</span> denseKeys = [...array.keys()];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sparseKeys); <span class=\"comment\">// [\"0\", \"2\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(denseKeys);  <span class=\"comment\">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>用keys快速生成0到10的新数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys()]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">[...new <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>).keys()]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></p>\n<p>Array.prototype.keys.call()写法与上面类似，不在阐述，</p>\n<h3 id=\"values-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\"><a href=\"#values-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\" class=\"headerlink\" title=\"values  基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\"></a>values  基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"xyz\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = array.values();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value);<span class=\"comment\">//abc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value);<span class=\"comment\">//xyz</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol-iterator-该方法基于ECMAScript-2015（ES6）规范，同-values-方法功能相同。\"><a href=\"#Symbol-iterator-该方法基于ECMAScript-2015（ES6）规范，同-values-方法功能相同。\" class=\"headerlink\" title=\"Symbol.iterator 该方法基于ECMAScript 2015（ES6）规范，同 values 方法功能相同。\"></a>Symbol.iterator 该方法基于ECMAScript 2015（ES6）规范，同 values 方法功能相同。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"xyz\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = array[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// xyz</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype[Symbol.iterator].call()写法与上面类似，不在阐述</p>\n<p>参考资料1：<a href=\"http://louiszhai.github.io/2017/04/28/array\" target=\"_blank\" rel=\"noopener\">http://louiszhai.github.io/2017/04/28/array</a><br>参考资料2：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"forEach-every-some-filter-map-reduce-reduceRight以及es6新增的entries-find-findIndex-keys-values-都是基于es6，不会改变自身的办法一共有12个。\"><a href=\"#forEach-every-some-filter-map-reduce-reduceRight以及es6新增的entries-find-findIndex-keys-values-都是基于es6，不会改变自身的办法一共有12个。\" class=\"headerlink\" title=\"forEach  every  some  filter  map  reduce  reduceRight以及es6新增的entries  find  findIndex keys  values 都是基于es6，不会改变自身的办法一共有12个。\"></a>forEach  every  some  filter  map  reduce  reduceRight以及es6新增的entries  find  findIndex keys  values 都是基于es6，不会改变自身的办法一共有12个。</h3><h3 id=\"forEach-方法指定数组的每项元素都执行一次传入函数，返回值为undefined\"><a href=\"#forEach-方法指定数组的每项元素都执行一次传入函数，返回值为undefined\" class=\"headerlink\" title=\"forEach 方法指定数组的每项元素都执行一次传入函数，返回值为undefined.\"></a>forEach 方法指定数组的每项元素都执行一次传入函数，返回值为undefined.</h3><p>语法：arr.forEach(fn, thisArg)</p>\n<p>fn 标识在数组每一项上执行的函数，接收三个参数。</p>\n<ul>\n<li>value 当前正在被处理的元素的值</li>\n<li>index 当前正在被处理元素的索引</li>\n<li>array 当前数组的本身</li>\n</ul>\n<p>thisArg 可选，用来当作fn函数内的this对象</p>\n<p>forEach 将为数组中的每一项执行一次fn函数，那些已删除，新增或者从未赋值的项将被跳过（但不包括值为undefined的项）</p>\n<p>遍历过程中，fn会被传入上述三个参数</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'cc'</span>&#125;</span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value,index,array</span>)</span>&#123;</span><br><span class=\"line\">\tarr[index] = value * <span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;,obj)</span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// cc</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// obj.name执行了四次</span></span><br></pre></td></tr></table></figure>\n<p>同样也可以用Array.prototype.forEach.call()<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">1</span>, <span class=\"number\">1</span>:<span class=\"number\">3</span>, <span class=\"number\">2</span>:<span class=\"number\">5</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.forEach.call(o,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value,index,obj);</span><br><span class=\"line\">  obj[index] = value * value;</span><br><span class=\"line\">&#125;,o);</span><br></pre></td></tr></table></figure></p>\n<p>如果不支持可以用polyfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.forEach) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> T, k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">' this is null or not defined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. Let O be the result of calling toObject() passing the</span></span><br><span class=\"line\">    <span class=\"comment\">// |this| value as the argument.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. Let lenValue be the result of calling the Get() internal</span></span><br><span class=\"line\">    <span class=\"comment\">// method of O with the argument \"length\".</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. Let len be toUint32(lenValue).</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. If isCallable(callback) is false, throw a TypeError exception. </span></span><br><span class=\"line\">    <span class=\"comment\">// See: http://es5.github.com/#x9.11</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(callback + <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. If thisArg was supplied, let T be thisArg; else let</span></span><br><span class=\"line\">    <span class=\"comment\">// T be undefined.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      T = thisArg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6. Let k be 0</span></span><br><span class=\"line\">    k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 7. Repeat, while k &lt; len</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> kValue;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// a. Let Pk be ToString(k).</span></span><br><span class=\"line\">      <span class=\"comment\">//    This is implicit for LHS operands of the in operator</span></span><br><span class=\"line\">      <span class=\"comment\">// b. Let kPresent be the result of calling the HasProperty</span></span><br><span class=\"line\">      <span class=\"comment\">//    internal method of O with argument Pk.</span></span><br><span class=\"line\">      <span class=\"comment\">//    This step can be combined with c</span></span><br><span class=\"line\">      <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// i. Let kValue be the result of calling the Get internal</span></span><br><span class=\"line\">        <span class=\"comment\">// method of O with argument Pk.</span></span><br><span class=\"line\">        kValue = O[k];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ii. Call the Call internal method of callback with T as</span></span><br><span class=\"line\">        <span class=\"comment\">// the this value and argument list containing kValue, k, and O.</span></span><br><span class=\"line\">        callback.call(T, kValue, k, O);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// d. Increase k by 1.</span></span><br><span class=\"line\">      k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 8. return undefined</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"every-传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\"><a href=\"#every-传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\" class=\"headerlink\" title=\"every 传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：\"></a>every 传入的函数测试所有的元素，只要其中有一个函数返回值为false，那么该办法的结果为false；如果全部返回true，那么该办法的结果才返回true，因为every存在如下规律：</h3><ul>\n<li>若需检测数组中所有存在元素是否大于10（即value &gt; 10），那么需要在传入的函数中return ‘true’返回值，同时整个方法结果为true才表示数组存在的元素满足条件 （即数组中的value 都大于10，那么就算满足条件，返回true）</li>\n<li>反之 若需要检测数组中存在的元素是否有不满足的大于10的，返回 ‘false’</li>\n</ul>\n<p>语法同forEach 相同， </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>]</span><br><span class=\"line\">arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">arr2.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br><span class=\"line\"><span class=\"comment\">// arr2 因为数组第一个元素不满足 条件，所以返回false</span></span><br></pre></td></tr></table></figure>\n<p>同样也适用Array.prototype.every.call()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"number\">10</span>, <span class=\"number\">1</span>:<span class=\"number\">8</span>, <span class=\"number\">2</span>:<span class=\"number\">25</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"built_in\">Array</span>.prototype.every.call(o,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, obj</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;,o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool);</span><br></pre></td></tr></table></figure>\n<p>如果不支持，可以用ployfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.every)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.every = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun <span class=\"regexp\">/*, thisArg */</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fun !== <span class=\"string\">'function'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> t &amp;&amp; !fun.call(thisArg, t[i], i, t))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"some-跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false-则该方法才返回false，\"><a href=\"#some-跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false-则该方法才返回false，\" class=\"headerlink\" title=\"some 跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false,则该方法才返回false，\"></a>some 跟every相反，使用some检测数组元素时，只要有一个函数返回值为true，则该方法返回true，如果全部都返回false,则该方法才返回false，</h3><ul>\n<li>若需检测数组中存在的元素是否有一个元素或多个元素大于10（即value &gt; 10）,那么我们需要在传入的函数中 return ‘true’，则some返回true,反之所有函数的返回false，则some返回false</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr2.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value &gt;= <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3,arr4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true false</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.come.call()同every一样，参照every的写法。</p>\n<p>如果不支持的话可以用polyfill:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.some)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.some = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun <span class=\"regexp\">/*, thisArg */</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fun !== <span class=\"string\">'function'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> t &amp;&amp; fun.call(thisArg, t[i], i, t))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter-使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\"><a href=\"#filter-使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\" class=\"headerlink\" title=\"filter 使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。\"></a>filter 使用传入的函数测试所有元素，并返回所有通过测试的元素组成新的数组，他就好比一个过滤器，筛选掉不符合条件的元素。</h3><p>语法：arr.filter(fn, thisArg)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>,<span class=\"number\">3</span>,<span class=\"number\">20</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">40</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> value &gt;= <span class=\"number\">10</span> &amp;&amp; value &lt;= <span class=\"number\">20</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [10, 20, 12, 13]</span></span><br><span class=\"line\"><span class=\"comment\">// 满足大于等于10且小于等于20，并输出</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.filter.call()写法同every一样，polyfill:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.filter)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.filter = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fun <span class=\"regexp\">/* , thisArg*/</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    \"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fun !== <span class=\"string\">\"function\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span> ? <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>] : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> t)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> val = t[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Technically this should Object.defineProperty at</span></span><br><span class=\"line\">        <span class=\"comment\">//       the next index, as push can be affected by</span></span><br><span class=\"line\">        <span class=\"comment\">//       properties on Object.prototype and Array.prototype.</span></span><br><span class=\"line\">        <span class=\"comment\">//       But that method's new, and collisions should be</span></span><br><span class=\"line\">        <span class=\"comment\">//       rare, so use the more-compatible alternative.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fun.call(thisArg, val, i, t))</span><br><span class=\"line\">          res.push(val);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"map-遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\"><a href=\"#map-遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\" class=\"headerlink\" title=\"map 遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。\"></a>map 遍历数组元素，使用传入函数处理每一个元素，并返回函数的返回值组成新的数组。</h3><p>语法：<br>let new_array = arr.map(function callback(currentValue, index, array) {<br>    // Return element for new_array<br>}[, thisArg])</p>\n<ul>\n<li>map方法会给数组中的每个元素都按顺序调用一次callback函数，callback每次执行后返回的返回值（包括undefined）组合成新的数组，callback函数只会在有有值的索引上被调用，那些从来没被赋过值或者使用delete删除的索引则不会使用。</li>\n<li>callback 函数会被自动传入三个参数，数组元素，数组索引，原数组本身</li>\n<li>thisArg 参数有值，则每次callback函数被调用的时候，this都会指向这个thisArg参数上的这个对象，如果省略了thisArg参数，或者赋值为null或undefined，则this指向全局对象。</li>\n<li>map在执行的的时候不会修改原数组本身 （也可以在callback执行时改变原数组元素）</li>\n<li>使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = [&#123;<span class=\"attr\">key</span>:<span class=\"number\">1</span>,<span class=\"attr\">value</span>:<span class=\"number\">10</span>&#125;,&#123;<span class=\"attr\">key</span>:<span class=\"number\">2</span>,<span class=\"attr\">value</span>:<span class=\"number\">20</span>&#125;,&#123;<span class=\"attr\">key</span>:<span class=\"number\">3</span>,<span class=\"attr\">value</span>:<span class=\"number\">30</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> robj = &#123;&#125;;</span><br><span class=\"line\">\trobj[value.key] = value.value;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> robj</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0:&#123;1: 10&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 1:&#123;2: 20&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 2:&#123;3: 30&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console.log(obj)</span></span><br><span class=\"line\"><span class=\"comment\">// 0:&#123;key: 1, value: 10&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 1:&#123;key: 2, value: 20&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 2:&#123;key: 3, value: 30&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 原远足未被修改</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.map.cal()使用:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">Array</span>.prototype.map.call(<span class=\"string\">'hello word'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">h</span><br><span class=\"line\">e</span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\">w</span><br><span class=\"line\">o</span><br><span class=\"line\">r</span><br><span class=\"line\">d</span><br></pre></td></tr></table></figure></p>\n<p>遍历querySelectorAll()所有集合<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>)</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(el,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>返回字符串<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出: '54321'</span></span><br></pre></td></tr></table></figure></p>\n<p>MDN上有这么描述map的话：</p>\n<p>通常情况下，map 方法中的 callback 函数只需要接受一个参数，就是正在被遍历的数组元素本身。但这并不意味着 map 只给 callback 传了一个参数。这个思维惯性可能会让我们犯一个很容易犯的错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面的语句返回什么呢:</span></span><br><span class=\"line\">[<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>].map(<span class=\"built_in\">parseInt</span>);</span><br><span class=\"line\"><span class=\"comment\">// 你可能觉的会是[1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// 但实际的结果是 [1, NaN, NaN]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通常使用parseInt时,只需要传递一个参数.</span></span><br><span class=\"line\"><span class=\"comment\">// 但实际上,parseInt可以有两个参数.第二个参数是进制数.</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过语句\"alert(parseInt.length)===2\"来验证.</span></span><br><span class=\"line\"><span class=\"comment\">// map方法在调用callback函数时,会给它传递三个参数:当前正在遍历的元素, </span></span><br><span class=\"line\"><span class=\"comment\">// 元素索引, 原数组本身.</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数parseInt会忽视, 但第二个参数不会,也就是说,</span></span><br><span class=\"line\"><span class=\"comment\">// parseInt把传过来的索引值当成进制数来使用.从而返回了NaN.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">returnInt</span>(<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(element, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(returnInt); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// 意料之中的结果</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用简单的箭头函数，结果同上</span></span><br><span class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map( <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(str) ); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个更简单的方式:</span></span><br><span class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(<span class=\"built_in\">Number</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// 与`parseInt` 不同，下面的结果会返回浮点数或指数:</span></span><br><span class=\"line\">[<span class=\"string\">'1.1'</span>, <span class=\"string\">'2.2e2'</span>, <span class=\"string\">'3e300'</span>].map(<span class=\"built_in\">Number</span>); <span class=\"comment\">// [1.1, 220, 3e+300]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce-接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\"><a href=\"#reduce-接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\" class=\"headerlink\" title=\"reduce 接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。\"></a>reduce 接收一个方法作为累加器，数组中的每个值（从左至右）开始合并，最终一个值。</h3><p>语法：arr.reduce(callback, initialValue)</p>\n<p>callback 每次执行数组中每个值的函数，包含四个参数:</p>\n<ul>\n<li>previousValue 上一次调用回调时累计的返回的值，或者是提供的初始值</li>\n<li>value 数组中当前被处理元素的值</li>\n<li>index 当前元素在数组中的索引</li>\n<li>array 原数组自身</li>\n</ul>\n<p>initialValue 指定第一次调用fn的第一个参数，如果没有提供初始值，则使用数组的第一个元素的值，。</p>\n<p>当callback第一次执行时：</p>\n<ul>\n<li>如果initialValue 在调用reduce时被提供，那么第一个previousValue 将等于initialValue，此时item等于数组中的第一个值</li>\n<li>如果 initialValue 未被提供，那么 previousVaule 等于数组中的第一个值，item 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li>\n<li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么fn不会被执行，数组的唯一值将被返回。</li>\n</ul>\n<p>计算1到900的和<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">\tarr.push(i)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i == <span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> arr2 = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sum,value</span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> sum+value</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 405450</span></span><br></pre></td></tr></table></figure></p>\n<p>把数组的[1,2,3,4,5]转换成整数的12345<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x.toString() + y</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num)</span><br><span class=\"line\"><span class=\"comment\">// 12345</span></span><br></pre></td></tr></table></figure></p>\n<p>数组去除重复<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">33</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.sort().reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">init,current</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(init.length === <span class=\"number\">0</span> || init[init.length<span class=\"number\">-1</span>]!== current)&#123;</span><br><span class=\"line\">\t\tinit.push(current);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> init;</span><br><span class=\"line\">&#125;,[])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 33]</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">previousValue, value, index, array</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> previousValue * value;</span><br><span class=\"line\">&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s); <span class=\"comment\">// 24</span></span><br><span class=\"line\"><span class=\"comment\">// ES6写法更加简洁</span></span><br><span class=\"line\">array.reduce(<span class=\"function\">(<span class=\"params\">p, v</span>) =&gt;</span> p * v); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n<p>以上回调被执行了4次，每次的参数和返回：<br>|callback    |previousValue    |currentValue    |index    |array    |return |value|<br>|—|—|—|—|—|—|—|<br>|第1次    |1    |1    |1    |[1,2,3,4]    1|<br>|第2次    |1    |2    |2    |[1,2,3,4]    2|<br>|第3次    |2    |3    |3    |[1,2,3,4]    6|<br>|第4次    |6    |4    |4    |[1,2,3,4]    24|</p>\n<p>Array.prototype.reduce.call()写法参照every，如果不支持reduce,可以用polyfill:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.reduce) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'reduce'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Array.prototype.reduce '</span> + </span><br><span class=\"line\">          <span class=\"string\">'called on null or undefined'</span> );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback +</span><br><span class=\"line\">          <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Steps 3, 4, 5, 6, 7      </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; len &amp;&amp; !(k <span class=\"keyword\">in</span> o)) &#123;</span><br><span class=\"line\">          k++; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. If len is 0 and initialValue is not present,</span></span><br><span class=\"line\">        <span class=\"comment\">//    throw a TypeError exception.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= len) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">'Reduce of empty array '</span> +</span><br><span class=\"line\">            <span class=\"string\">'with no initial value'</span> );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value = o[k++];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kPresent be ? HasProperty(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. If kPresent is true, then</span></span><br><span class=\"line\">        <span class=\"comment\">//    i.  Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">//    ii. Let accumulator be ? Call(</span></span><br><span class=\"line\">        <span class=\"comment\">//          callbackfn, undefined,</span></span><br><span class=\"line\">        <span class=\"comment\">//          « accumulator, kValue, k, O »).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">          value = callback(value, o[k], k, o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// d. Increase k by 1.      </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 9. Return accumulator.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduceRight-方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\"><a href=\"#reduceRight-方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\" class=\"headerlink\" title=\"reduceRight 方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce\"></a>reduceRight 方法与reduce写法一样，与reduce不同的是，reduceRight是从右至左开始合并，最终返回一个值，与reduce的执行方向相反，其它完全一致，写法参考reduce</h3><p>polyfill:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span> <span class=\"built_in\">Array</span>.prototype.reduceRight) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.reduceRight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback <span class=\"regexp\">/*, initialValue*/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> === <span class=\"keyword\">this</span> || <span class=\"string\">'undefined'</span> === <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Array.prototype.reduce called on null or undefined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'function'</span> !== <span class=\"keyword\">typeof</span> callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(callback + <span class=\"string\">' is not a function'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>), len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>, k = len - <span class=\"number\">1</span>, value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      value = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; !(k <span class=\"keyword\">in</span> t)) &#123;</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Reduce of empty array with no initial value'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      value = t[k--];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; k &gt;= <span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> t) &#123;</span><br><span class=\"line\">        value = callback(value, t[k], k, t);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"entries-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对-手动循环对象的属性值可以输出相应的属性位置的值。\"><a href=\"#entries-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对-手动循环对象的属性值可以输出相应的属性位置的值。\" class=\"headerlink\" title=\"entries 基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对,手动循环对象的属性值可以输出相应的属性位置的值。\"></a>entries 基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包括数组中每个索引的键值对,手动循环对象的属性值可以输出相应的属性位置的值。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.entries()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.next().value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [0, 1]</span></span><br><span class=\"line\"><span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"><span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"comment\">// [3, 4]</span></span><br><span class=\"line\"><span class=\"comment\">// undefined 数组结尾在迭代就是undefined</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用：Array.prototype.entries.call() </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>:<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>:<span class=\"string\">\"c\"</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = <span class=\"built_in\">Array</span>.prototype.entries.call(o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// [0, \"a\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// [1, \"b\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// [2, \"c\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"find-基于ECMAScript2015-es6-规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组-则返回undefined，find不会改变原来的数组。\"><a href=\"#find-基于ECMAScript2015-es6-规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组-则返回undefined，find不会改变原来的数组。\" class=\"headerlink\" title=\"find 基于ECMAScript2015(es6)规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组 则返回undefined，find不会改变原来的数组。\"></a>find 基于ECMAScript2015(es6)规范，返回数组中第一个满足条件的元素的值，如果数组为空或是稀疏数组 则返回undefined，find不会改变原来的数组。</h3><p>语法：arr.find(callback[, thisArg])</p>\n<ul>\n<li>callback 执行数组的每一个值的函数，接收3个参数</li>\n<li>element 当前遍历到的元素</li>\n<li>index 当前遍历到的索引</li>\n<li>array 数组本身</li>\n<li>thisArg 可指定callback的this参数</li>\n</ul>\n<p>查找满足条件的数组对象<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inventory = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'js'</span>, <span class=\"attr\">name</span>: <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'css'</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'jq'</span>, <span class=\"attr\">name</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCherries</span>(<span class=\"params\">fruit</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit.value === <span class=\"string\">'css'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findIndexCher</span>(<span class=\"params\">isValue</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValue === <span class=\"string\">'vue'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findCherries));  <span class=\"comment\">// &#123;value: \"css\", name: 1&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findIndexCher)); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>Array.prototype.find.call()写法与上面类似，不在阐述，</p>\n<p>polyfill:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.find) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'find'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. If IsCallable(predicate) is false, throw a TypeError exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> predicate !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'predicate must be a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 5. Let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 6. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span></span><br><span class=\"line\">        <span class=\"comment\">// d. If testResult is true, return kValue.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> kValue = o[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate.call(thisArg, kValue, k, o)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> kValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// e. Increase k by 1.</span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Return undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"findIndex-基于ECMASscript2015-es6-规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\"><a href=\"#findIndex-基于ECMASscript2015-es6-规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\" class=\"headerlink\" title=\"findIndex 基于ECMASscript2015(es6)规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。\"></a>findIndex 基于ECMASscript2015(es6)规范，他返回数组中第一个满足条件的元素的索引，如果没有则返回-1，写法与find相同。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> inventory = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'js'</span>, <span class=\"attr\">name</span>: <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'css'</span>, <span class=\"attr\">name</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>: <span class=\"string\">'jq'</span>, <span class=\"attr\">name</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findCherries</span>(<span class=\"params\">fruit</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> fruit.value === <span class=\"string\">'css'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findIndexCher</span>(<span class=\"params\">isValue</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValue === <span class=\"string\">'vue'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findCherries));  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(inventory.find(findIndexCher)); <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype.findIndex.call()写法与上面类似，不在阐述，</p>\n<p>polyfil:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.findIndex) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'findIndex'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">predicate</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. If IsCallable(predicate) is false, throw a TypeError exception.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> predicate !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'predicate must be a function'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> thisArg = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 5. Let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 6. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let Pk be ! ToString(k).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. Let kValue be ? Get(O, Pk).</span></span><br><span class=\"line\">        <span class=\"comment\">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span></span><br><span class=\"line\">        <span class=\"comment\">// d. If testResult is true, return k.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> kValue = o[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate.call(thisArg, kValue, k, o)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// e. Increase k by 1.</span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Return -1.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"keys-基于ECMAScript2015-es6-规范，返回一个数组索引的迭代器\"><a href=\"#keys-基于ECMAScript2015-es6-规范，返回一个数组索引的迭代器\" class=\"headerlink\" title=\"keys 基于ECMAScript2015(es6)规范，返回一个数组索引的迭代器\"></a>keys 基于ECMAScript2015(es6)规范，返回一个数组索引的迭代器</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = arr.keys()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()) <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在稀疏数组中使用keys也会 包含那些没有值的对应索引，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"abc\"</span>, , <span class=\"string\">\"xyz\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> sparseKeys = <span class=\"built_in\">Object</span>.keys(array);</span><br><span class=\"line\"><span class=\"keyword\">var</span> denseKeys = [...array.keys()];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sparseKeys); <span class=\"comment\">// [\"0\", \"2\"]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(denseKeys);  <span class=\"comment\">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>用keys快速生成0到10的新数组<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...Array(<span class=\"number\">10</span>).keys()]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class=\"line\">[...new <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>).keys()]; <span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></p>\n<p>Array.prototype.keys.call()写法与上面类似，不在阐述，</p>\n<h3 id=\"values-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\"><a href=\"#values-基于ECMAScript2015-es6-规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\" class=\"headerlink\" title=\"values  基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。\"></a>values  基于ECMAScript2015(es6)规范，返回一个数组迭代器对象，该对象包含数组中每个索引的值。用法与entries相同。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"xyz\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = array.values();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value);<span class=\"comment\">//abc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value);<span class=\"comment\">//xyz</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Symbol-iterator-该方法基于ECMAScript-2015（ES6）规范，同-values-方法功能相同。\"><a href=\"#Symbol-iterator-该方法基于ECMAScript-2015（ES6）规范，同-values-方法功能相同。\" class=\"headerlink\" title=\"Symbol.iterator 该方法基于ECMAScript 2015（ES6）规范，同 values 方法功能相同。\"></a>Symbol.iterator 该方法基于ECMAScript 2015（ES6）规范，同 values 方法功能相同。</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">\"abc\"</span>, <span class=\"string\">\"xyz\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = array[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next().value); <span class=\"comment\">// xyz</span></span><br></pre></td></tr></table></figure>\n<p>Array.prototype[Symbol.iterator].call()写法与上面类似，不在阐述</p>\n<p>参考资料1：<a href=\"http://louiszhai.github.io/2017/04/28/array\" target=\"_blank\" rel=\"noopener\">http://louiszhai.github.io/2017/04/28/array</a><br>参考资料2：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>"},{"title":"js复习手记二","date":"2018-01-24T06:04:23.000Z","_content":"### `concat`  `join`  `slice`  `toString`  `toLocateString`  `indexOf`  `lastIndexOf`  都是不会改变自身的数组方法\n\n\n### concat 将传入的数组或元素与原数组合并,组成新的数组并返回\n\n语法：arr.concat(value1, value2, …, valueN)\n\n```javascript\nvar arr = [1,2]\nvar arr2 = arr.concat([3,4],[5,6])\nconsole.log(arr2)\n\n// [1, 2, 3, 4, 5, 6]\n```\n\n若concat不传入参数，那么将基于原数组浅复制生成一个一样的新数组（指向新的地址空间）\n```javascript\nvar arr = [1,2]\nvar arr2 = arr.concat()\narr2.push(1)\nconsole.log(arr,arr2)\n\n// [1, 2] [1, 2, 1]\n```\n<!-- more -->\n\n同样，concat也可以用Array.prototype.concat.call(),但是结果却不是我们想要的\n\n```javascript\nvar arr = {1:'q',2:'w',length:2}\nvar arr2 = Array.prototype.concat.call(arr,'q',{3:'e',length:1})\nconsole.log(arr2)\n\n// 0:{1: \"q\", 2: \"w\", length: 2}\n// 1:\"q\"\n// 2:{3: \"e\", length: 1}\n```\n类数组对象合并后返回的是依然是数组，并不是我们想要的结果\n\n\n### join 将数组中的所有元素连接成一个字符串\n\n语法：arr.join([separator = ‘,’]) separator可选，缺省默认为逗号。\n\n```javascript\nvar arr = ['js','css','jq']\nvar arr2 = arr.join()\nvar arr3 = arr.join('-')\nvar arr4 = arr.join(' 1 ')\nconsole.log(arr2,arr3,arr4)\n\n// js,css,jq js-css-jq js 1 css 1 jq\n```\n\n同样，join也可以用Array.prototype.join.call()\n\n```javascript\nvar arr = ['js','css','jq']\nvar arr2 = Array.prototype.join.call(arr,'-')\nconsole.log(arr2)\n\n// js-css-jq\n```\n\n\n### slice 将数组的一部分浅复制存入新的数组对象里,并且返回这个数组对象\n\n语法：arr.slice([start[, end]])\n\nstart 从数组的索引开始提取元素，如果传入的参数为负数，则表示从原数组中的末尾倒数第几个元素，如果省略，那么slice的索引为0开始。\nend 结束数组的索引位置，并且提取start到end的索引（不包括end）如果被省略或者end大于数组的索引长度，slice会一直提取到原数组的末尾（相当于从start到数组的最后一个元素）\n\n按照MDN的对slice的描述：\n\n```\nslice 不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：\n\n如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。\n\n对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。\n\n如果向两个数组任一中添加了新元素，则另一个不会受到影响。\n```\n\n```javascript\nvar arr = ['js','css','jq']\nvar arr2 = arr.slice(0,1)\narr2.push('vue')\nconsole.log(arr,arr2)\n// [\"js\", \"css\", \"jq\"] (2) [\"js\", \"vue\"]\n```\n\nslice 也适用于Array.prototype.slice.call()\n\n```javascript\nvar arr = [1,2,3]\nvar arr2 = Array.prototype.slice.call(arr,0,1)\nconsole.log(arr2)\n// [1]\n```\n\n另外不支持的可以用polyfill\n\n```javascript\n(function () {\n    'use strict';\n    var _slice = Array.prototype.slice;\n\n    try {\n        // Can't be used with DOM elements in IE < 9\n        _slice.call(document.documentElement);\n    } catch (e) { // Fails in IE < 9\n        // This will work for genuine arrays, array-like objects,\n        // NamedNodeMap (attributes, entities, notations),\n        // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),\n        // and will not fail on other DOM objects (as do DOM elements in IE < 9)\n        Array.prototype.slice = function (begin, end) {\n            // IE < 9 gets unhappy with an undefined end argument\n            end = (typeof end !== 'undefined') ? end : this.length;\n\n            // For native Array objects, we use the native slice function\n            if (Object.prototype.toString.call(this) === '[object Array]'){\n                return _slice.call(this, begin, end);\n            }\n           \n            // For array like object we handle it ourselves.\n            var i, cloned = [],\n                size, len = this.length;\n           \n            // Handle negative value for \"begin\"\n            var start = begin || 0;\n            start = (start >= 0) ? start: len + start;\n           \n            // Handle negative value for \"end\"\n            var upTo = (end) ? end : len;\n            if (end < 0) {\n                upTo = len + end;\n            }\n           \n            // Actual expected size of the slice\n            size = upTo - start;\n           \n            if (size > 0) {\n                cloned = new Array(size);\n                if (this.charAt) {\n                    for (i = 0; i < size; i++) {\n                        cloned[i] = this.charAt(start + i);\n                    }\n                } else {\n                    for (i = 0; i < size; i++) {\n                        cloned[i] = this[start + i];\n                    }\n                }\n            }\n           \n            return cloned;\n        };\n    }\n}());\n```\n\n### toString 返回数组的字符串形式，该字符串由数组中的每个元素的toString()返回值经调用join()方法连接（由逗号隔开）组成。（相当于toString就是用arr.join()实现的）\n\n```javascript\nvar arr = [1,2,3]\nvar arr2 = arr.toString()\nconsole.log(arr2)\n\n// 1,2,3\n```\n\n当数组直接和字符串做连接操作时，会自动调用toString方法\n```js\n[1,2,3,4] + [,5]\n\n// 1,2,3,4,5\n\nvar arr = {1:'q',2:'w',3:'e',length:4}\nvar arr2 = Array.prototype.toString.call(arr)\nconsole.log(arr2)\n// [object Object]\n```\n\n根据ES5语义，toString() 方法是通用的，可被用于任何对象。\n如果对象有一个join() 方法，将会被调用，其返回值将被返回，没有则调用Object.prototype.toString()，为此，我们给o对象添加一个join方法。如下：\n\n```js\nvar o = {\n  0:'Jan', \n  1:'Feb', \n  2:'Mar', \n  length:3, \n  join:function(){\n    return Array.prototype.join.call(this);\n  }\n};\nconsole.log(Array.prototype.toString.call(o));\n```\n\n### <a href=\"#toLocalString\" name=\"toLocalString\">toLocalString</a> 类似toString的变形，该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。\n\n数组不同的元素将调用各自的toLocalString方法\n\n- Object: Object.prototype.toLocalString\n- Number: Number.prototype.toLocalString\n- Date : Date.prototype.toLocalString\n\n\n```js\nvar o = {\n  0:123, \n  1:'abc', \n  2:new Date(), \n  length:3, \n  join:function(){\n    return Array.prototype.join.call(this);\n  }\n};\nconsole.log(Array.prototype.toLocaleString.call(o))\n// 123,abc,2018/1/24 下午4:13:45\n```\n\n### indexOf 查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\n\n语法：arr.indexOf(element, fromIndex=0)\n\nelement 需要查找的元素\n\nfromIndex 为开始查找的位置，缺省默认为0，如果超出数组的长度则返回-1。\n如果为负值，假设数组长度为length，则从数组的第length+fromIndex项开始往末尾查找，如果length+fromIndex<0则整个数组都会被查找。\n\nindexOf使用严格相等（即===去匹配数组中的元素）\n\n\n```js\nvar array = ['abc', 'def', 'ghi','123'];\nconsole.log(array.indexOf('def')); // 1\nconsole.log(array.indexOf('def',-1)); // -1 此时表示从最后一个元素往后查找,因此查找失败返回-1\nconsole.log(array.indexOf('def',-4)); // 1 由于4大于数组长度,此时将查找整个数组,因此返回1\nconsole.log(array.indexOf(123)); // -1, 由于是严格匹配,因此并不会匹配到字符串'123'\n```\n\n同样可以用Array.prototype.indexOf.call()\n\n```js\nvar o = {0:'abc', 1:'def', 2:'ghi', length:3};\nconsole.log(Array.prototype.indexOf.call(o,'ghi',-4));\n\n// 2\n```\n\n如果不支持，可以用polyfill\n```js\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function(searchElement, fromIndex) {\n    var k;\n\n    // 1. Let O be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this == null) {\n      throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n      return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    }\n\n    // 6. If n >= len, return -1.\n    if (n >= len) {\n      return -1;\n    }\n\n    // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      if (k in O && O[k] === searchElement) {\n        return k;\n      }\n      k++;\n    }\n    return -1;\n  };\n}\n```\n\n\n\n### lastIndexOf indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1.\n\n语法：arr.lastIndexOf(element, fromIndex=length-1)\n\nelement 需要查找的元素\n\nfromIndex 开始查找的位置，缺省默认为length-1，如果超过数组长度，犹豫是逆向查找，则查找整个数组，如果为负值，则从数组的第length+fromIndex项往数组开头开始查找，如果length|fromIndex<0数组则不会被查找。（与indexOf相反）\n\n同indexOf一样，lastIndexOf也是严格匹配数组元素\n\n\n```js\nvar arr = [1,2,3,4,5,6,7,8]\nvar arr2 = arr.lastIndexOf(6)\nconsole.log(arr2)\n// 5\n\nvar arr = [1,2,3,6,6,5,7,8]\nvar arr2 = arr.lastIndexOf(6)\nconsole.log(arr2)\n// 4\n\nvar arr = [1,2,3,6,6,6,7,8]\nvar arr2 = arr.lastIndexOf(6)\nconsole.log(arr2)\n// 5\n\nvar o = {0:'abc', 1:'def', 2:'ghi', length:3};\nconsole.log(Array.prototype.lastIndexOf.call(o,'ghi'));\n\n// 2\n```\n\n如果不支持，可以用polyfill\n\n```js\nif (!Array.prototype.lastIndexOf) {\n  Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {\n    'use strict';\n\n    if (this === void 0 || this === null) {\n      throw new TypeError();\n    }\n\n    var n, k,\n      t = Object(this),\n      len = t.length >>> 0;\n    if (len === 0) {\n      return -1;\n    }\n\n    n = len - 1;\n    if (arguments.length > 1) {\n      n = Number(arguments[1]);\n      if (n != n) {\n        n = 0;\n      }\n      else if (n != 0 && n != (1 / 0) && n != -(1 / 0)) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n      }\n    }\n\n    for (k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {\n      if (k in t && t[k] === searchElement) {\n        return k;\n      }\n    }\n    return -1;\n  };\n}\n```\n\n\n\n### includes(ES7) 基于ECMAScript 2016(es7)规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\n\n语法：arr.includes(element, fromIndex=0)\n\nelement 查找的元素\n\nfromIndex 数组索引开始的位置,缺省为0，他是正向查找，即从索引处往数组末尾开始查找。\n\n```js\nvar arr = [-0,1,2,3,4,5]\nvar arr2 = arr.includes(4)\nvar arr3 = arr.includes(-4)\nvar arr4 = arr.includes(2,1)\nvar arr5 = arr.includes(+0)\nconsole.log(arr2,arr3,arr4,arr5)\n\n// true,false,true,true\n```\n\n以上includes 忽略了-0和+0的区别，因为JavaScript一直以来都是不区分 -0 和 +0 的。但是只有0才不区分而已。\n\nincludes 与 indexOf 相似,但是又有一些区别。\n一、index 返回的是数值型，而include返回的是布尔值,在某些时候include更好使用\n```js\nvar ary = [1];\n\nif (ary.indexOf(1) !== -1) {\n\n    console.log(\"数组存在1\")\n\n}\n\nif (ary.includes(1)) {\n\n    console.log(\"数组存在1\")\n\n}\n```\n\n二、如果数组中有NaN，你又正好需要判断数组中是否有NaN的存在，indexOf是无法判断的，而includes却是可以的\n```js\nvar ary1 = [NaN];\n\nconsole.log(ary1.indexOf(NaN))//-1\n\nconsole.log(ary1.includes(NaN))//true\n```\n\n三、当数组中有空的值时候，includeOf会认为空的值是undefined,而indexOf认为是稀疏数组，省略掉的值是不存在的\n```js\nvar ary1 = new Array(3);\n\nconsole.log(ary1.indexOf(undefined));//-1\n\nconsole.log(ary1.includes(undefined))//true\n```\n\n\n同样适用Array.prototype.includes.call()\n```js\nvar o = {0:'a', 1:'b', 2:'c', length:3};\nvar bool = Array.prototype.includes.call(o, 'a');\nconsole.log(bool); \n\n// true\n```\n\npolyfill\n\n```js\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    value: function(searchElement, fromIndex) {\n\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      var n = fromIndex | 0;\n\n      // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      //  6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(searchElement, elementK) is true, return true.\n        if (sameValueZero(o[k], searchElement)) {\n          return true;\n        }\n        // c. Increase k by 1. \n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    }\n  });\n}\n```\n\n\n### toSource（非标准） 返回数组的源代码\n\n```js\nvar array = ['a', 'b', 'c'];\nconsole.log(array.toSource()); // [\"a\", \"b\", \"c\"]\n\n// Array.prototype.toSource.call()\nvar o = {0:'a', 1:'b', 2:'c', length:3};\nconsole.log(Array.prototype.toSource.call(o));\n\n// // [\"a\",\"b\",\"c\"]\n```\n\n\n参考资料1：http://louiszhai.github.io/2017/04/28/array\n参考资料2：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","source":"_posts/js复习手记二.md","raw":"---\ntitle: js复习手记二\ndate: 2018-01-24 14:04:23\ntags: 主页\n---\n### `concat`  `join`  `slice`  `toString`  `toLocateString`  `indexOf`  `lastIndexOf`  都是不会改变自身的数组方法\n\n\n### concat 将传入的数组或元素与原数组合并,组成新的数组并返回\n\n语法：arr.concat(value1, value2, …, valueN)\n\n```javascript\nvar arr = [1,2]\nvar arr2 = arr.concat([3,4],[5,6])\nconsole.log(arr2)\n\n// [1, 2, 3, 4, 5, 6]\n```\n\n若concat不传入参数，那么将基于原数组浅复制生成一个一样的新数组（指向新的地址空间）\n```javascript\nvar arr = [1,2]\nvar arr2 = arr.concat()\narr2.push(1)\nconsole.log(arr,arr2)\n\n// [1, 2] [1, 2, 1]\n```\n<!-- more -->\n\n同样，concat也可以用Array.prototype.concat.call(),但是结果却不是我们想要的\n\n```javascript\nvar arr = {1:'q',2:'w',length:2}\nvar arr2 = Array.prototype.concat.call(arr,'q',{3:'e',length:1})\nconsole.log(arr2)\n\n// 0:{1: \"q\", 2: \"w\", length: 2}\n// 1:\"q\"\n// 2:{3: \"e\", length: 1}\n```\n类数组对象合并后返回的是依然是数组，并不是我们想要的结果\n\n\n### join 将数组中的所有元素连接成一个字符串\n\n语法：arr.join([separator = ‘,’]) separator可选，缺省默认为逗号。\n\n```javascript\nvar arr = ['js','css','jq']\nvar arr2 = arr.join()\nvar arr3 = arr.join('-')\nvar arr4 = arr.join(' 1 ')\nconsole.log(arr2,arr3,arr4)\n\n// js,css,jq js-css-jq js 1 css 1 jq\n```\n\n同样，join也可以用Array.prototype.join.call()\n\n```javascript\nvar arr = ['js','css','jq']\nvar arr2 = Array.prototype.join.call(arr,'-')\nconsole.log(arr2)\n\n// js-css-jq\n```\n\n\n### slice 将数组的一部分浅复制存入新的数组对象里,并且返回这个数组对象\n\n语法：arr.slice([start[, end]])\n\nstart 从数组的索引开始提取元素，如果传入的参数为负数，则表示从原数组中的末尾倒数第几个元素，如果省略，那么slice的索引为0开始。\nend 结束数组的索引位置，并且提取start到end的索引（不包括end）如果被省略或者end大于数组的索引长度，slice会一直提取到原数组的末尾（相当于从start到数组的最后一个元素）\n\n按照MDN的对slice的描述：\n\n```\nslice 不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：\n\n如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。\n\n对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。\n\n如果向两个数组任一中添加了新元素，则另一个不会受到影响。\n```\n\n```javascript\nvar arr = ['js','css','jq']\nvar arr2 = arr.slice(0,1)\narr2.push('vue')\nconsole.log(arr,arr2)\n// [\"js\", \"css\", \"jq\"] (2) [\"js\", \"vue\"]\n```\n\nslice 也适用于Array.prototype.slice.call()\n\n```javascript\nvar arr = [1,2,3]\nvar arr2 = Array.prototype.slice.call(arr,0,1)\nconsole.log(arr2)\n// [1]\n```\n\n另外不支持的可以用polyfill\n\n```javascript\n(function () {\n    'use strict';\n    var _slice = Array.prototype.slice;\n\n    try {\n        // Can't be used with DOM elements in IE < 9\n        _slice.call(document.documentElement);\n    } catch (e) { // Fails in IE < 9\n        // This will work for genuine arrays, array-like objects,\n        // NamedNodeMap (attributes, entities, notations),\n        // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),\n        // and will not fail on other DOM objects (as do DOM elements in IE < 9)\n        Array.prototype.slice = function (begin, end) {\n            // IE < 9 gets unhappy with an undefined end argument\n            end = (typeof end !== 'undefined') ? end : this.length;\n\n            // For native Array objects, we use the native slice function\n            if (Object.prototype.toString.call(this) === '[object Array]'){\n                return _slice.call(this, begin, end);\n            }\n           \n            // For array like object we handle it ourselves.\n            var i, cloned = [],\n                size, len = this.length;\n           \n            // Handle negative value for \"begin\"\n            var start = begin || 0;\n            start = (start >= 0) ? start: len + start;\n           \n            // Handle negative value for \"end\"\n            var upTo = (end) ? end : len;\n            if (end < 0) {\n                upTo = len + end;\n            }\n           \n            // Actual expected size of the slice\n            size = upTo - start;\n           \n            if (size > 0) {\n                cloned = new Array(size);\n                if (this.charAt) {\n                    for (i = 0; i < size; i++) {\n                        cloned[i] = this.charAt(start + i);\n                    }\n                } else {\n                    for (i = 0; i < size; i++) {\n                        cloned[i] = this[start + i];\n                    }\n                }\n            }\n           \n            return cloned;\n        };\n    }\n}());\n```\n\n### toString 返回数组的字符串形式，该字符串由数组中的每个元素的toString()返回值经调用join()方法连接（由逗号隔开）组成。（相当于toString就是用arr.join()实现的）\n\n```javascript\nvar arr = [1,2,3]\nvar arr2 = arr.toString()\nconsole.log(arr2)\n\n// 1,2,3\n```\n\n当数组直接和字符串做连接操作时，会自动调用toString方法\n```js\n[1,2,3,4] + [,5]\n\n// 1,2,3,4,5\n\nvar arr = {1:'q',2:'w',3:'e',length:4}\nvar arr2 = Array.prototype.toString.call(arr)\nconsole.log(arr2)\n// [object Object]\n```\n\n根据ES5语义，toString() 方法是通用的，可被用于任何对象。\n如果对象有一个join() 方法，将会被调用，其返回值将被返回，没有则调用Object.prototype.toString()，为此，我们给o对象添加一个join方法。如下：\n\n```js\nvar o = {\n  0:'Jan', \n  1:'Feb', \n  2:'Mar', \n  length:3, \n  join:function(){\n    return Array.prototype.join.call(this);\n  }\n};\nconsole.log(Array.prototype.toString.call(o));\n```\n\n### <a href=\"#toLocalString\" name=\"toLocalString\">toLocalString</a> 类似toString的变形，该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。\n\n数组不同的元素将调用各自的toLocalString方法\n\n- Object: Object.prototype.toLocalString\n- Number: Number.prototype.toLocalString\n- Date : Date.prototype.toLocalString\n\n\n```js\nvar o = {\n  0:123, \n  1:'abc', \n  2:new Date(), \n  length:3, \n  join:function(){\n    return Array.prototype.join.call(this);\n  }\n};\nconsole.log(Array.prototype.toLocaleString.call(o))\n// 123,abc,2018/1/24 下午4:13:45\n```\n\n### indexOf 查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\n\n语法：arr.indexOf(element, fromIndex=0)\n\nelement 需要查找的元素\n\nfromIndex 为开始查找的位置，缺省默认为0，如果超出数组的长度则返回-1。\n如果为负值，假设数组长度为length，则从数组的第length+fromIndex项开始往末尾查找，如果length+fromIndex<0则整个数组都会被查找。\n\nindexOf使用严格相等（即===去匹配数组中的元素）\n\n\n```js\nvar array = ['abc', 'def', 'ghi','123'];\nconsole.log(array.indexOf('def')); // 1\nconsole.log(array.indexOf('def',-1)); // -1 此时表示从最后一个元素往后查找,因此查找失败返回-1\nconsole.log(array.indexOf('def',-4)); // 1 由于4大于数组长度,此时将查找整个数组,因此返回1\nconsole.log(array.indexOf(123)); // -1, 由于是严格匹配,因此并不会匹配到字符串'123'\n```\n\n同样可以用Array.prototype.indexOf.call()\n\n```js\nvar o = {0:'abc', 1:'def', 2:'ghi', length:3};\nconsole.log(Array.prototype.indexOf.call(o,'ghi',-4));\n\n// 2\n```\n\n如果不支持，可以用polyfill\n```js\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function(searchElement, fromIndex) {\n    var k;\n\n    // 1. Let O be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this == null) {\n      throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n      return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    }\n\n    // 6. If n >= len, return -1.\n    if (n >= len) {\n      return -1;\n    }\n\n    // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      if (k in O && O[k] === searchElement) {\n        return k;\n      }\n      k++;\n    }\n    return -1;\n  };\n}\n```\n\n\n\n### lastIndexOf indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1.\n\n语法：arr.lastIndexOf(element, fromIndex=length-1)\n\nelement 需要查找的元素\n\nfromIndex 开始查找的位置，缺省默认为length-1，如果超过数组长度，犹豫是逆向查找，则查找整个数组，如果为负值，则从数组的第length+fromIndex项往数组开头开始查找，如果length|fromIndex<0数组则不会被查找。（与indexOf相反）\n\n同indexOf一样，lastIndexOf也是严格匹配数组元素\n\n\n```js\nvar arr = [1,2,3,4,5,6,7,8]\nvar arr2 = arr.lastIndexOf(6)\nconsole.log(arr2)\n// 5\n\nvar arr = [1,2,3,6,6,5,7,8]\nvar arr2 = arr.lastIndexOf(6)\nconsole.log(arr2)\n// 4\n\nvar arr = [1,2,3,6,6,6,7,8]\nvar arr2 = arr.lastIndexOf(6)\nconsole.log(arr2)\n// 5\n\nvar o = {0:'abc', 1:'def', 2:'ghi', length:3};\nconsole.log(Array.prototype.lastIndexOf.call(o,'ghi'));\n\n// 2\n```\n\n如果不支持，可以用polyfill\n\n```js\nif (!Array.prototype.lastIndexOf) {\n  Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {\n    'use strict';\n\n    if (this === void 0 || this === null) {\n      throw new TypeError();\n    }\n\n    var n, k,\n      t = Object(this),\n      len = t.length >>> 0;\n    if (len === 0) {\n      return -1;\n    }\n\n    n = len - 1;\n    if (arguments.length > 1) {\n      n = Number(arguments[1]);\n      if (n != n) {\n        n = 0;\n      }\n      else if (n != 0 && n != (1 / 0) && n != -(1 / 0)) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n      }\n    }\n\n    for (k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {\n      if (k in t && t[k] === searchElement) {\n        return k;\n      }\n    }\n    return -1;\n  };\n}\n```\n\n\n\n### includes(ES7) 基于ECMAScript 2016(es7)规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\n\n语法：arr.includes(element, fromIndex=0)\n\nelement 查找的元素\n\nfromIndex 数组索引开始的位置,缺省为0，他是正向查找，即从索引处往数组末尾开始查找。\n\n```js\nvar arr = [-0,1,2,3,4,5]\nvar arr2 = arr.includes(4)\nvar arr3 = arr.includes(-4)\nvar arr4 = arr.includes(2,1)\nvar arr5 = arr.includes(+0)\nconsole.log(arr2,arr3,arr4,arr5)\n\n// true,false,true,true\n```\n\n以上includes 忽略了-0和+0的区别，因为JavaScript一直以来都是不区分 -0 和 +0 的。但是只有0才不区分而已。\n\nincludes 与 indexOf 相似,但是又有一些区别。\n一、index 返回的是数值型，而include返回的是布尔值,在某些时候include更好使用\n```js\nvar ary = [1];\n\nif (ary.indexOf(1) !== -1) {\n\n    console.log(\"数组存在1\")\n\n}\n\nif (ary.includes(1)) {\n\n    console.log(\"数组存在1\")\n\n}\n```\n\n二、如果数组中有NaN，你又正好需要判断数组中是否有NaN的存在，indexOf是无法判断的，而includes却是可以的\n```js\nvar ary1 = [NaN];\n\nconsole.log(ary1.indexOf(NaN))//-1\n\nconsole.log(ary1.includes(NaN))//true\n```\n\n三、当数组中有空的值时候，includeOf会认为空的值是undefined,而indexOf认为是稀疏数组，省略掉的值是不存在的\n```js\nvar ary1 = new Array(3);\n\nconsole.log(ary1.indexOf(undefined));//-1\n\nconsole.log(ary1.includes(undefined))//true\n```\n\n\n同样适用Array.prototype.includes.call()\n```js\nvar o = {0:'a', 1:'b', 2:'c', length:3};\nvar bool = Array.prototype.includes.call(o, 'a');\nconsole.log(bool); \n\n// true\n```\n\npolyfill\n\n```js\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    value: function(searchElement, fromIndex) {\n\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      var n = fromIndex | 0;\n\n      // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      //  6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(searchElement, elementK) is true, return true.\n        if (sameValueZero(o[k], searchElement)) {\n          return true;\n        }\n        // c. Increase k by 1. \n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    }\n  });\n}\n```\n\n\n### toSource（非标准） 返回数组的源代码\n\n```js\nvar array = ['a', 'b', 'c'];\nconsole.log(array.toSource()); // [\"a\", \"b\", \"c\"]\n\n// Array.prototype.toSource.call()\nvar o = {0:'a', 1:'b', 2:'c', length:3};\nconsole.log(Array.prototype.toSource.call(o));\n\n// // [\"a\",\"b\",\"c\"]\n```\n\n\n参考资料1：http://louiszhai.github.io/2017/04/28/array\n参考资料2：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array","slug":"js复习手记二","published":1,"updated":"2018-04-24T14:27:38.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb605j0008a4vb5z3kxd9s","content":"<h3 id=\"concat-join-slice-toString-toLocateString-indexOf-lastIndexOf-都是不会改变自身的数组方法\"><a href=\"#concat-join-slice-toString-toLocateString-indexOf-lastIndexOf-都是不会改变自身的数组方法\" class=\"headerlink\" title=\"concat  join  slice  toString  toLocateString  indexOf  lastIndexOf  都是不会改变自身的数组方法\"></a><code>concat</code>  <code>join</code>  <code>slice</code>  <code>toString</code>  <code>toLocateString</code>  <code>indexOf</code>  <code>lastIndexOf</code>  都是不会改变自身的数组方法</h3><h3 id=\"concat-将传入的数组或元素与原数组合并-组成新的数组并返回\"><a href=\"#concat-将传入的数组或元素与原数组合并-组成新的数组并返回\" class=\"headerlink\" title=\"concat 将传入的数组或元素与原数组合并,组成新的数组并返回\"></a>concat 将传入的数组或元素与原数组合并,组成新的数组并返回</h3><p>语法：arr.concat(value1, value2, …, valueN)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.concat([<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<p>若concat不传入参数，那么将基于原数组浅复制生成一个一样的新数组（指向新的地址空间）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.concat()</span><br><span class=\"line\">arr2.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [1, 2] [1, 2, 1]</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>同样，concat也可以用Array.prototype.concat.call(),但是结果却不是我们想要的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = &#123;<span class=\"number\">1</span>:<span class=\"string\">'q'</span>,<span class=\"number\">2</span>:<span class=\"string\">'w'</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.concat.call(arr,<span class=\"string\">'q'</span>,&#123;<span class=\"number\">3</span>:<span class=\"string\">'e'</span>,<span class=\"attr\">length</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0:&#123;1: \"q\", 2: \"w\", length: 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 1:\"q\"</span></span><br><span class=\"line\"><span class=\"comment\">// 2:&#123;3: \"e\", length: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>类数组对象合并后返回的是依然是数组，并不是我们想要的结果</p>\n<h3 id=\"join-将数组中的所有元素连接成一个字符串\"><a href=\"#join-将数组中的所有元素连接成一个字符串\" class=\"headerlink\" title=\"join 将数组中的所有元素连接成一个字符串\"></a>join 将数组中的所有元素连接成一个字符串</h3><p>语法：arr.join([separator = ‘,’]) separator可选，缺省默认为逗号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.join()</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.join(<span class=\"string\">'-'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr.join(<span class=\"string\">' 1 '</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2,arr3,arr4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js,css,jq js-css-jq js 1 css 1 jq</span></span><br></pre></td></tr></table></figure>\n<p>同样，join也可以用Array.prototype.join.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.join.call(arr,<span class=\"string\">'-'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js-css-jq</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"slice-将数组的一部分浅复制存入新的数组对象里-并且返回这个数组对象\"><a href=\"#slice-将数组的一部分浅复制存入新的数组对象里-并且返回这个数组对象\" class=\"headerlink\" title=\"slice 将数组的一部分浅复制存入新的数组对象里,并且返回这个数组对象\"></a>slice 将数组的一部分浅复制存入新的数组对象里,并且返回这个数组对象</h3><p>语法：arr.slice([start[, end]])</p>\n<p>start 从数组的索引开始提取元素，如果传入的参数为负数，则表示从原数组中的末尾倒数第几个元素，如果省略，那么slice的索引为0开始。<br>end 结束数组的索引位置，并且提取start到end的索引（不包括end）如果被省略或者end大于数组的索引长度，slice会一直提取到原数组的末尾（相当于从start到数组的最后一个元素）</p>\n<p>按照MDN的对slice的描述：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slice 不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：</span><br><span class=\"line\"></span><br><span class=\"line\">如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</span><br><span class=\"line\"></span><br><span class=\"line\">对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</span><br><span class=\"line\"></span><br><span class=\"line\">如果向两个数组任一中添加了新元素，则另一个不会受到影响。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">arr2.push(<span class=\"string\">'vue'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr2)</span><br><span class=\"line\"><span class=\"comment\">// [\"js\", \"css\", \"jq\"] (2) [\"js\", \"vue\"]</span></span><br></pre></td></tr></table></figure>\n<p>slice 也适用于Array.prototype.slice.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.slice.call(arr,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<p>另外不支持的可以用polyfill</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _slice = <span class=\"built_in\">Array</span>.prototype.slice;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can't be used with DOM elements in IE &lt; 9</span></span><br><span class=\"line\">        _slice.call(<span class=\"built_in\">document</span>.documentElement);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123; <span class=\"comment\">// Fails in IE &lt; 9</span></span><br><span class=\"line\">        <span class=\"comment\">// This will work for genuine arrays, array-like objects,</span></span><br><span class=\"line\">        <span class=\"comment\">// NamedNodeMap (attributes, entities, notations),</span></span><br><span class=\"line\">        <span class=\"comment\">// NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),</span></span><br><span class=\"line\">        <span class=\"comment\">// and will not fail on other DOM objects (as do DOM elements in IE &lt; 9)</span></span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.prototype.slice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">begin, end</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// IE &lt; 9 gets unhappy with an undefined end argument</span></span><br><span class=\"line\">            end = (<span class=\"keyword\">typeof</span> end !== <span class=\"string\">'undefined'</span>) ? end : <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// For native Array objects, we use the native slice function</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">this</span>) === <span class=\"string\">'[object Array]'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _slice.call(<span class=\"keyword\">this</span>, begin, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// For array like object we handle it ourselves.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> i, cloned = [],</span><br><span class=\"line\">                size, len = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// Handle negative value for \"begin\"</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> start = begin || <span class=\"number\">0</span>;</span><br><span class=\"line\">            start = (start &gt;= <span class=\"number\">0</span>) ? start: len + start;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// Handle negative value for \"end\"</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> upTo = (end) ? end : len;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                upTo = len + end;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// Actual expected size of the slice</span></span><br><span class=\"line\">            size = upTo - start;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cloned = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                        cloned[i] = <span class=\"keyword\">this</span>.charAt(start + i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                        cloned[i] = <span class=\"keyword\">this</span>[start + i];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"keyword\">return</span> cloned;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<h3 id=\"toString-返回数组的字符串形式，该字符串由数组中的每个元素的toString-返回值经调用join-方法连接（由逗号隔开）组成。（相当于toString就是用arr-join-实现的）\"><a href=\"#toString-返回数组的字符串形式，该字符串由数组中的每个元素的toString-返回值经调用join-方法连接（由逗号隔开）组成。（相当于toString就是用arr-join-实现的）\" class=\"headerlink\" title=\"toString 返回数组的字符串形式，该字符串由数组中的每个元素的toString()返回值经调用join()方法连接（由逗号隔开）组成。（相当于toString就是用arr.join()实现的）\"></a>toString 返回数组的字符串形式，该字符串由数组中的每个元素的toString()返回值经调用join()方法连接（由逗号隔开）组成。（相当于toString就是用arr.join()实现的）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.toString()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1,2,3</span></span><br></pre></td></tr></table></figure>\n<p>当数组直接和字符串做连接操作时，会自动调用toString方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] + [,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = &#123;<span class=\"number\">1</span>:<span class=\"string\">'q'</span>,<span class=\"number\">2</span>:<span class=\"string\">'w'</span>,<span class=\"number\">3</span>:<span class=\"string\">'e'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.toString.call(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [object Object]</span></span><br></pre></td></tr></table></figure></p>\n<p>根据ES5语义，toString() 方法是通用的，可被用于任何对象。<br>如果对象有一个join() 方法，将会被调用，其返回值将被返回，没有则调用Object.prototype.toString()，为此，我们给o对象添加一个join方法。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>:<span class=\"string\">'Jan'</span>, </span><br><span class=\"line\">  <span class=\"number\">1</span>:<span class=\"string\">'Feb'</span>, </span><br><span class=\"line\">  <span class=\"number\">2</span>:<span class=\"string\">'Mar'</span>, </span><br><span class=\"line\">  length:<span class=\"number\">3</span>, </span><br><span class=\"line\">  join:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.toString.call(o));</span><br></pre></td></tr></table></figure>\n<h3 id=\"toLocalString-类似toString的变形，该字符串由数组中的每个元素的-toLocaleString-返回值经调用-join-方法连接（由逗号隔开）组成。\"><a href=\"#toLocalString-类似toString的变形，该字符串由数组中的每个元素的-toLocaleString-返回值经调用-join-方法连接（由逗号隔开）组成。\" class=\"headerlink\" title=\"toLocalString 类似toString的变形，该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。\"></a><a href=\"#toLocalString\" name=\"toLocalString\">toLocalString</a> 类似toString的变形，该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</h3><p>数组不同的元素将调用各自的toLocalString方法</p>\n<ul>\n<li>Object: Object.prototype.toLocalString</li>\n<li>Number: Number.prototype.toLocalString</li>\n<li>Date : Date.prototype.toLocalString</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>:<span class=\"number\">123</span>, </span><br><span class=\"line\">  <span class=\"number\">1</span>:<span class=\"string\">'abc'</span>, </span><br><span class=\"line\">  <span class=\"number\">2</span>:<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), </span><br><span class=\"line\">  length:<span class=\"number\">3</span>, </span><br><span class=\"line\">  join:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.toLocaleString.call(o))</span><br><span class=\"line\"><span class=\"comment\">// 123,abc,2018/1/24 下午4:13:45</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"indexOf-查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\"><a href=\"#indexOf-查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\" class=\"headerlink\" title=\"indexOf 查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\"></a>indexOf 查找元素在数组中第一次出现的索引位置，如果没有，则返回-1</h3><p>语法：arr.indexOf(element, fromIndex=0)</p>\n<p>element 需要查找的元素</p>\n<p>fromIndex 为开始查找的位置，缺省默认为0，如果超出数组的长度则返回-1。<br>如果为负值，假设数组长度为length，则从数组的第length+fromIndex项开始往末尾查找，如果length+fromIndex&lt;0则整个数组都会被查找。</p>\n<p>indexOf使用严格相等（即===去匹配数组中的元素）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">'abc'</span>, <span class=\"string\">'def'</span>, <span class=\"string\">'ghi'</span>,<span class=\"string\">'123'</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"string\">'def'</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"string\">'def'</span>,<span class=\"number\">-1</span>)); <span class=\"comment\">// -1 此时表示从最后一个元素往后查找,因此查找失败返回-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"string\">'def'</span>,<span class=\"number\">-4</span>)); <span class=\"comment\">// 1 由于4大于数组长度,此时将查找整个数组,因此返回1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"number\">123</span>)); <span class=\"comment\">// -1, 由于是严格匹配,因此并不会匹配到字符串'123'</span></span><br></pre></td></tr></table></figure>\n<p>同样可以用Array.prototype.indexOf.call()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'abc'</span>, <span class=\"number\">1</span>:<span class=\"string\">'def'</span>, <span class=\"number\">2</span>:<span class=\"string\">'ghi'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.indexOf.call(o,<span class=\"string\">'ghi'</span>,<span class=\"number\">-4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>如果不支持，可以用polyfill<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.indexOf) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchElement, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. Let O be the result of calling ToObject passing</span></span><br><span class=\"line\">    <span class=\"comment\">//    the this value as the argument.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. Let lenValue be the result of calling the Get</span></span><br><span class=\"line\">    <span class=\"comment\">//    internal method of O with the argument \"length\".</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. Let len be ToUint32(lenValue).</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. If len is 0, return -1.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. If argument fromIndex was passed let n be</span></span><br><span class=\"line\">    <span class=\"comment\">//    ToInteger(fromIndex); else let n be 0.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = +fromIndex || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(n) === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">      n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6. If n &gt;= len, return -1.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= len) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 7. If n &gt;= 0, then Let k be n.</span></span><br><span class=\"line\">    <span class=\"comment\">// 8. Else, n&lt;0, Let k be len - abs(n).</span></span><br><span class=\"line\">    <span class=\"comment\">//    If k is less than 0, then let k be 0.</span></span><br><span class=\"line\">    k = <span class=\"built_in\">Math</span>.max(n &gt;= <span class=\"number\">0</span> ? n : len - <span class=\"built_in\">Math</span>.abs(n), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 9. Repeat, while k &lt; len</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O &amp;&amp; O[k] === searchElement) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"lastIndexOf-indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1\"><a href=\"#lastIndexOf-indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1\" class=\"headerlink\" title=\"lastIndexOf indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1.\"></a>lastIndexOf indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1.</h3><p>语法：arr.lastIndexOf(element, fromIndex=length-1)</p>\n<p>element 需要查找的元素</p>\n<p>fromIndex 开始查找的位置，缺省默认为length-1，如果超过数组长度，犹豫是逆向查找，则查找整个数组，如果为负值，则从数组的第length+fromIndex项往数组开头开始查找，如果length|fromIndex&lt;0数组则不会被查找。（与indexOf相反）</p>\n<p>同indexOf一样，lastIndexOf也是严格匹配数组元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.lastIndexOf(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.lastIndexOf(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.lastIndexOf(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'abc'</span>, <span class=\"number\">1</span>:<span class=\"string\">'def'</span>, <span class=\"number\">2</span>:<span class=\"string\">'ghi'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.lastIndexOf.call(o,<span class=\"string\">'ghi'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>如果不支持，可以用polyfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.lastIndexOf) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.lastIndexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchElement <span class=\"regexp\">/*, fromIndex*/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> n, k,</span><br><span class=\"line\">      t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">      len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    n = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      n = <span class=\"built_in\">Number</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n != n) &#123;</span><br><span class=\"line\">        n = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span> &amp;&amp; n != (<span class=\"number\">1</span> / <span class=\"number\">0</span>) &amp;&amp; n != -(<span class=\"number\">1</span> / <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        n = (n &gt; <span class=\"number\">0</span> || <span class=\"number\">-1</span>) * <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.abs(n));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = n &gt;= <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.min(n, len - <span class=\"number\">1</span>) : len - <span class=\"built_in\">Math</span>.abs(n); k &gt;= <span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> t &amp;&amp; t[k] === searchElement) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"includes-ES7-基于ECMAScript-2016-es7-规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\"><a href=\"#includes-ES7-基于ECMAScript-2016-es7-规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\" class=\"headerlink\" title=\"includes(ES7) 基于ECMAScript 2016(es7)规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\"></a>includes(ES7) 基于ECMAScript 2016(es7)规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false</h3><p>语法：arr.includes(element, fromIndex=0)</p>\n<p>element 查找的元素</p>\n<p>fromIndex 数组索引开始的位置,缺省为0，他是正向查找，即从索引处往数组末尾开始查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">-0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.includes(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.includes(<span class=\"number\">-4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr.includes(<span class=\"number\">2</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr5 = arr.includes(+<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2,arr3,arr4,arr5)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true,false,true,true</span></span><br></pre></td></tr></table></figure>\n<p>以上includes 忽略了-0和+0的区别，因为JavaScript一直以来都是不区分 -0 和 +0 的。但是只有0才不区分而已。</p>\n<p>includes 与 indexOf 相似,但是又有一些区别。<br>一、index 返回的是数值型，而include返回的是布尔值,在某些时候include更好使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ary.indexOf(<span class=\"number\">1</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"数组存在1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ary.includes(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"数组存在1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>二、如果数组中有NaN，你又正好需要判断数组中是否有NaN的存在，indexOf是无法判断的，而includes却是可以的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary1 = [<span class=\"literal\">NaN</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.indexOf(<span class=\"literal\">NaN</span>))<span class=\"comment\">//-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.includes(<span class=\"literal\">NaN</span>))<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>三、当数组中有空的值时候，includeOf会认为空的值是undefined,而indexOf认为是稀疏数组，省略掉的值是不存在的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.indexOf(<span class=\"literal\">undefined</span>));<span class=\"comment\">//-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.includes(<span class=\"literal\">undefined</span>))<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>同样适用Array.prototype.includes.call()<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'a'</span>, <span class=\"number\">1</span>:<span class=\"string\">'b'</span>, <span class=\"number\">2</span>:<span class=\"string\">'c'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"built_in\">Array</span>.prototype.includes.call(o, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>polyfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.includes) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'includes'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchElement, fromIndex</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. If len is 0, return false.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 4. Let n be ? ToInteger(fromIndex).</span></span><br><span class=\"line\">      <span class=\"comment\">//    (If fromIndex is undefined, this step produces the value 0.)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = fromIndex | <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 5. If n ≥ 0, then</span></span><br><span class=\"line\">      <span class=\"comment\">//  a. Let k be n.</span></span><br><span class=\"line\">      <span class=\"comment\">//  6. Else n &lt; 0,</span></span><br><span class=\"line\">      <span class=\"comment\">//  a. Let k be len + n.</span></span><br><span class=\"line\">      <span class=\"comment\">//  b. If k &lt; 0, let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"built_in\">Math</span>.max(n &gt;= <span class=\"number\">0</span> ? n : len - <span class=\"built_in\">Math</span>.abs(n), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sameValueZero</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x === y || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(x) &amp;&amp; <span class=\"built_in\">isNaN</span>(y));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let elementK be the result of ? Get(O, ! ToString(k)).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. If SameValueZero(searchElement, elementK) is true, return true.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sameValueZero(o[k], searchElement)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// c. Increase k by 1. </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Return false</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"toSource（非标准）-返回数组的源代码\"><a href=\"#toSource（非标准）-返回数组的源代码\" class=\"headerlink\" title=\"toSource（非标准） 返回数组的源代码\"></a>toSource（非标准） 返回数组的源代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.toSource()); <span class=\"comment\">// [\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.toSource.call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'a'</span>, <span class=\"number\">1</span>:<span class=\"string\">'b'</span>, <span class=\"number\">2</span>:<span class=\"string\">'c'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.toSource.call(o));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // [\"a\",\"b\",\"c\"]</span></span><br></pre></td></tr></table></figure>\n<p>参考资料1：<a href=\"http://louiszhai.github.io/2017/04/28/array\" target=\"_blank\" rel=\"noopener\">http://louiszhai.github.io/2017/04/28/array</a><br>参考资料2：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"concat-join-slice-toString-toLocateString-indexOf-lastIndexOf-都是不会改变自身的数组方法\"><a href=\"#concat-join-slice-toString-toLocateString-indexOf-lastIndexOf-都是不会改变自身的数组方法\" class=\"headerlink\" title=\"concat  join  slice  toString  toLocateString  indexOf  lastIndexOf  都是不会改变自身的数组方法\"></a><code>concat</code>  <code>join</code>  <code>slice</code>  <code>toString</code>  <code>toLocateString</code>  <code>indexOf</code>  <code>lastIndexOf</code>  都是不会改变自身的数组方法</h3><h3 id=\"concat-将传入的数组或元素与原数组合并-组成新的数组并返回\"><a href=\"#concat-将传入的数组或元素与原数组合并-组成新的数组并返回\" class=\"headerlink\" title=\"concat 将传入的数组或元素与原数组合并,组成新的数组并返回\"></a>concat 将传入的数组或元素与原数组合并,组成新的数组并返回</h3><p>语法：arr.concat(value1, value2, …, valueN)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.concat([<span class=\"number\">3</span>,<span class=\"number\">4</span>],[<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n<p>若concat不传入参数，那么将基于原数组浅复制生成一个一样的新数组（指向新的地址空间）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.concat()</span><br><span class=\"line\">arr2.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [1, 2] [1, 2, 1]</span></span><br></pre></td></tr></table></figure></p>","more":"<p>同样，concat也可以用Array.prototype.concat.call(),但是结果却不是我们想要的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = &#123;<span class=\"number\">1</span>:<span class=\"string\">'q'</span>,<span class=\"number\">2</span>:<span class=\"string\">'w'</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.concat.call(arr,<span class=\"string\">'q'</span>,&#123;<span class=\"number\">3</span>:<span class=\"string\">'e'</span>,<span class=\"attr\">length</span>:<span class=\"number\">1</span>&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0:&#123;1: \"q\", 2: \"w\", length: 2&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 1:\"q\"</span></span><br><span class=\"line\"><span class=\"comment\">// 2:&#123;3: \"e\", length: 1&#125;</span></span><br></pre></td></tr></table></figure>\n<p>类数组对象合并后返回的是依然是数组，并不是我们想要的结果</p>\n<h3 id=\"join-将数组中的所有元素连接成一个字符串\"><a href=\"#join-将数组中的所有元素连接成一个字符串\" class=\"headerlink\" title=\"join 将数组中的所有元素连接成一个字符串\"></a>join 将数组中的所有元素连接成一个字符串</h3><p>语法：arr.join([separator = ‘,’]) separator可选，缺省默认为逗号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.join()</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.join(<span class=\"string\">'-'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr.join(<span class=\"string\">' 1 '</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2,arr3,arr4)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js,css,jq js-css-jq js 1 css 1 jq</span></span><br></pre></td></tr></table></figure>\n<p>同样，join也可以用Array.prototype.join.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.join.call(arr,<span class=\"string\">'-'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js-css-jq</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"slice-将数组的一部分浅复制存入新的数组对象里-并且返回这个数组对象\"><a href=\"#slice-将数组的一部分浅复制存入新的数组对象里-并且返回这个数组对象\" class=\"headerlink\" title=\"slice 将数组的一部分浅复制存入新的数组对象里,并且返回这个数组对象\"></a>slice 将数组的一部分浅复制存入新的数组对象里,并且返回这个数组对象</h3><p>语法：arr.slice([start[, end]])</p>\n<p>start 从数组的索引开始提取元素，如果传入的参数为负数，则表示从原数组中的末尾倒数第几个元素，如果省略，那么slice的索引为0开始。<br>end 结束数组的索引位置，并且提取start到end的索引（不包括end）如果被省略或者end大于数组的索引长度，slice会一直提取到原数组的末尾（相当于从start到数组的最后一个元素）</p>\n<p>按照MDN的对slice的描述：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slice 不修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：</span><br><span class=\"line\"></span><br><span class=\"line\">如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</span><br><span class=\"line\"></span><br><span class=\"line\">对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</span><br><span class=\"line\"></span><br><span class=\"line\">如果向两个数组任一中添加了新元素，则另一个不会受到影响。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'js'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'jq'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">arr2.push(<span class=\"string\">'vue'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr,arr2)</span><br><span class=\"line\"><span class=\"comment\">// [\"js\", \"css\", \"jq\"] (2) [\"js\", \"vue\"]</span></span><br></pre></td></tr></table></figure>\n<p>slice 也适用于Array.prototype.slice.call()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.slice.call(arr,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<p>另外不支持的可以用polyfill</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _slice = <span class=\"built_in\">Array</span>.prototype.slice;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can't be used with DOM elements in IE &lt; 9</span></span><br><span class=\"line\">        _slice.call(<span class=\"built_in\">document</span>.documentElement);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123; <span class=\"comment\">// Fails in IE &lt; 9</span></span><br><span class=\"line\">        <span class=\"comment\">// This will work for genuine arrays, array-like objects,</span></span><br><span class=\"line\">        <span class=\"comment\">// NamedNodeMap (attributes, entities, notations),</span></span><br><span class=\"line\">        <span class=\"comment\">// NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),</span></span><br><span class=\"line\">        <span class=\"comment\">// and will not fail on other DOM objects (as do DOM elements in IE &lt; 9)</span></span><br><span class=\"line\">        <span class=\"built_in\">Array</span>.prototype.slice = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">begin, end</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// IE &lt; 9 gets unhappy with an undefined end argument</span></span><br><span class=\"line\">            end = (<span class=\"keyword\">typeof</span> end !== <span class=\"string\">'undefined'</span>) ? end : <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// For native Array objects, we use the native slice function</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"keyword\">this</span>) === <span class=\"string\">'[object Array]'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _slice.call(<span class=\"keyword\">this</span>, begin, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// For array like object we handle it ourselves.</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> i, cloned = [],</span><br><span class=\"line\">                size, len = <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// Handle negative value for \"begin\"</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> start = begin || <span class=\"number\">0</span>;</span><br><span class=\"line\">            start = (start &gt;= <span class=\"number\">0</span>) ? start: len + start;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// Handle negative value for \"end\"</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> upTo = (end) ? end : len;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                upTo = len + end;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"comment\">// Actual expected size of the slice</span></span><br><span class=\"line\">            size = upTo - start;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                cloned = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                        cloned[i] = <span class=\"keyword\">this</span>.charAt(start + i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                        cloned[i] = <span class=\"keyword\">this</span>[start + i];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           </span><br><span class=\"line\">            <span class=\"keyword\">return</span> cloned;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n<h3 id=\"toString-返回数组的字符串形式，该字符串由数组中的每个元素的toString-返回值经调用join-方法连接（由逗号隔开）组成。（相当于toString就是用arr-join-实现的）\"><a href=\"#toString-返回数组的字符串形式，该字符串由数组中的每个元素的toString-返回值经调用join-方法连接（由逗号隔开）组成。（相当于toString就是用arr-join-实现的）\" class=\"headerlink\" title=\"toString 返回数组的字符串形式，该字符串由数组中的每个元素的toString()返回值经调用join()方法连接（由逗号隔开）组成。（相当于toString就是用arr.join()实现的）\"></a>toString 返回数组的字符串形式，该字符串由数组中的每个元素的toString()返回值经调用join()方法连接（由逗号隔开）组成。（相当于toString就是用arr.join()实现的）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.toString()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1,2,3</span></span><br></pre></td></tr></table></figure>\n<p>当数组直接和字符串做连接操作时，会自动调用toString方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] + [,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = &#123;<span class=\"number\">1</span>:<span class=\"string\">'q'</span>,<span class=\"number\">2</span>:<span class=\"string\">'w'</span>,<span class=\"number\">3</span>:<span class=\"string\">'e'</span>,<span class=\"attr\">length</span>:<span class=\"number\">4</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"built_in\">Array</span>.prototype.toString.call(arr)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// [object Object]</span></span><br></pre></td></tr></table></figure></p>\n<p>根据ES5语义，toString() 方法是通用的，可被用于任何对象。<br>如果对象有一个join() 方法，将会被调用，其返回值将被返回，没有则调用Object.prototype.toString()，为此，我们给o对象添加一个join方法。如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>:<span class=\"string\">'Jan'</span>, </span><br><span class=\"line\">  <span class=\"number\">1</span>:<span class=\"string\">'Feb'</span>, </span><br><span class=\"line\">  <span class=\"number\">2</span>:<span class=\"string\">'Mar'</span>, </span><br><span class=\"line\">  length:<span class=\"number\">3</span>, </span><br><span class=\"line\">  join:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.toString.call(o));</span><br></pre></td></tr></table></figure>\n<h3 id=\"toLocalString-类似toString的变形，该字符串由数组中的每个元素的-toLocaleString-返回值经调用-join-方法连接（由逗号隔开）组成。\"><a href=\"#toLocalString-类似toString的变形，该字符串由数组中的每个元素的-toLocaleString-返回值经调用-join-方法连接（由逗号隔开）组成。\" class=\"headerlink\" title=\"toLocalString 类似toString的变形，该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。\"></a><a href=\"#toLocalString\" name=\"toLocalString\">toLocalString</a> 类似toString的变形，该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</h3><p>数组不同的元素将调用各自的toLocalString方法</p>\n<ul>\n<li>Object: Object.prototype.toLocalString</li>\n<li>Number: Number.prototype.toLocalString</li>\n<li>Date : Date.prototype.toLocalString</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>:<span class=\"number\">123</span>, </span><br><span class=\"line\">  <span class=\"number\">1</span>:<span class=\"string\">'abc'</span>, </span><br><span class=\"line\">  <span class=\"number\">2</span>:<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), </span><br><span class=\"line\">  length:<span class=\"number\">3</span>, </span><br><span class=\"line\">  join:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.join.call(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.toLocaleString.call(o))</span><br><span class=\"line\"><span class=\"comment\">// 123,abc,2018/1/24 下午4:13:45</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"indexOf-查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\"><a href=\"#indexOf-查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\" class=\"headerlink\" title=\"indexOf 查找元素在数组中第一次出现的索引位置，如果没有，则返回-1\"></a>indexOf 查找元素在数组中第一次出现的索引位置，如果没有，则返回-1</h3><p>语法：arr.indexOf(element, fromIndex=0)</p>\n<p>element 需要查找的元素</p>\n<p>fromIndex 为开始查找的位置，缺省默认为0，如果超出数组的长度则返回-1。<br>如果为负值，假设数组长度为length，则从数组的第length+fromIndex项开始往末尾查找，如果length+fromIndex&lt;0则整个数组都会被查找。</p>\n<p>indexOf使用严格相等（即===去匹配数组中的元素）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">'abc'</span>, <span class=\"string\">'def'</span>, <span class=\"string\">'ghi'</span>,<span class=\"string\">'123'</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"string\">'def'</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"string\">'def'</span>,<span class=\"number\">-1</span>)); <span class=\"comment\">// -1 此时表示从最后一个元素往后查找,因此查找失败返回-1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"string\">'def'</span>,<span class=\"number\">-4</span>)); <span class=\"comment\">// 1 由于4大于数组长度,此时将查找整个数组,因此返回1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.indexOf(<span class=\"number\">123</span>)); <span class=\"comment\">// -1, 由于是严格匹配,因此并不会匹配到字符串'123'</span></span><br></pre></td></tr></table></figure>\n<p>同样可以用Array.prototype.indexOf.call()</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'abc'</span>, <span class=\"number\">1</span>:<span class=\"string\">'def'</span>, <span class=\"number\">2</span>:<span class=\"string\">'ghi'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.indexOf.call(o,<span class=\"string\">'ghi'</span>,<span class=\"number\">-4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>如果不支持，可以用polyfill<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.indexOf) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.indexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchElement, fromIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. Let O be the result of calling ToObject passing</span></span><br><span class=\"line\">    <span class=\"comment\">//    the this value as the argument.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. Let lenValue be the result of calling the Get</span></span><br><span class=\"line\">    <span class=\"comment\">//    internal method of O with the argument \"length\".</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. Let len be ToUint32(lenValue).</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. If len is 0, return -1.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. If argument fromIndex was passed let n be</span></span><br><span class=\"line\">    <span class=\"comment\">//    ToInteger(fromIndex); else let n be 0.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = +fromIndex || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.abs(n) === <span class=\"literal\">Infinity</span>) &#123;</span><br><span class=\"line\">      n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6. If n &gt;= len, return -1.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= len) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 7. If n &gt;= 0, then Let k be n.</span></span><br><span class=\"line\">    <span class=\"comment\">// 8. Else, n&lt;0, Let k be len - abs(n).</span></span><br><span class=\"line\">    <span class=\"comment\">//    If k is less than 0, then let k be 0.</span></span><br><span class=\"line\">    k = <span class=\"built_in\">Math</span>.max(n &gt;= <span class=\"number\">0</span> ? n : len - <span class=\"built_in\">Math</span>.abs(n), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 9. Repeat, while k &lt; len</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O &amp;&amp; O[k] === searchElement) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"lastIndexOf-indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1\"><a href=\"#lastIndexOf-indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1\" class=\"headerlink\" title=\"lastIndexOf indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1.\"></a>lastIndexOf indexOf的逆向查找，即从数组的末尾处一直到数组的开头开始查找，查找元素最后一次出现时的索引位置，如果没有则返回-1.</h3><p>语法：arr.lastIndexOf(element, fromIndex=length-1)</p>\n<p>element 需要查找的元素</p>\n<p>fromIndex 开始查找的位置，缺省默认为length-1，如果超过数组长度，犹豫是逆向查找，则查找整个数组，如果为负值，则从数组的第length+fromIndex项往数组开头开始查找，如果length|fromIndex&lt;0数组则不会被查找。（与indexOf相反）</p>\n<p>同indexOf一样，lastIndexOf也是严格匹配数组元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.lastIndexOf(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.lastIndexOf(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.lastIndexOf(<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'abc'</span>, <span class=\"number\">1</span>:<span class=\"string\">'def'</span>, <span class=\"number\">2</span>:<span class=\"string\">'ghi'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.lastIndexOf.call(o,<span class=\"string\">'ghi'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>如果不支持，可以用polyfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.lastIndexOf) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.lastIndexOf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchElement <span class=\"regexp\">/*, fromIndex*/</span></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">    'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> === <span class=\"keyword\">void</span> <span class=\"number\">0</span> || <span class=\"keyword\">this</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> n, k,</span><br><span class=\"line\">      t = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">      len = t.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    n = len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      n = <span class=\"built_in\">Number</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n != n) &#123;</span><br><span class=\"line\">        n = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n != <span class=\"number\">0</span> &amp;&amp; n != (<span class=\"number\">1</span> / <span class=\"number\">0</span>) &amp;&amp; n != -(<span class=\"number\">1</span> / <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">        n = (n &gt; <span class=\"number\">0</span> || <span class=\"number\">-1</span>) * <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.abs(n));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (k = n &gt;= <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.min(n, len - <span class=\"number\">1</span>) : len - <span class=\"built_in\">Math</span>.abs(n); k &gt;= <span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> t &amp;&amp; t[k] === searchElement) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"includes-ES7-基于ECMAScript-2016-es7-规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\"><a href=\"#includes-ES7-基于ECMAScript-2016-es7-规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\" class=\"headerlink\" title=\"includes(ES7) 基于ECMAScript 2016(es7)规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false\"></a>includes(ES7) 基于ECMAScript 2016(es7)规范，他用于查找数组中是否包含某个指定的值，如果是则返回true，否则返回false</h3><p>语法：arr.includes(element, fromIndex=0)</p>\n<p>element 查找的元素</p>\n<p>fromIndex 数组索引开始的位置,缺省为0，他是正向查找，即从索引处往数组末尾开始查找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">-0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.includes(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = arr.includes(<span class=\"number\">-4</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr.includes(<span class=\"number\">2</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr5 = arr.includes(+<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2,arr3,arr4,arr5)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true,false,true,true</span></span><br></pre></td></tr></table></figure>\n<p>以上includes 忽略了-0和+0的区别，因为JavaScript一直以来都是不区分 -0 和 +0 的。但是只有0才不区分而已。</p>\n<p>includes 与 indexOf 相似,但是又有一些区别。<br>一、index 返回的是数值型，而include返回的是布尔值,在某些时候include更好使用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ary.indexOf(<span class=\"number\">1</span>) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"数组存在1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ary.includes(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"数组存在1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>二、如果数组中有NaN，你又正好需要判断数组中是否有NaN的存在，indexOf是无法判断的，而includes却是可以的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary1 = [<span class=\"literal\">NaN</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.indexOf(<span class=\"literal\">NaN</span>))<span class=\"comment\">//-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.includes(<span class=\"literal\">NaN</span>))<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>三、当数组中有空的值时候，includeOf会认为空的值是undefined,而indexOf认为是稀疏数组，省略掉的值是不存在的<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ary1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.indexOf(<span class=\"literal\">undefined</span>));<span class=\"comment\">//-1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ary1.includes(<span class=\"literal\">undefined</span>))<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></p>\n<p>同样适用Array.prototype.includes.call()<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'a'</span>, <span class=\"number\">1</span>:<span class=\"string\">'b'</span>, <span class=\"number\">2</span>:<span class=\"string\">'c'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bool = <span class=\"built_in\">Array</span>.prototype.includes.call(o, <span class=\"string\">'a'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bool); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n<p>polyfill</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.includes) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'includes'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchElement, fromIndex</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'\"this\" is null or not defined'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 1. Let O be ? ToObject(this value).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> o = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 2. Let len be ? ToLength(? Get(O, \"length\")).</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> len = o.length &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 3. If len is 0, return false.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 4. Let n be ? ToInteger(fromIndex).</span></span><br><span class=\"line\">      <span class=\"comment\">//    (If fromIndex is undefined, this step produces the value 0.)</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = fromIndex | <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 5. If n ≥ 0, then</span></span><br><span class=\"line\">      <span class=\"comment\">//  a. Let k be n.</span></span><br><span class=\"line\">      <span class=\"comment\">//  6. Else n &lt; 0,</span></span><br><span class=\"line\">      <span class=\"comment\">//  a. Let k be len + n.</span></span><br><span class=\"line\">      <span class=\"comment\">//  b. If k &lt; 0, let k be 0.</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> k = <span class=\"built_in\">Math</span>.max(n &gt;= <span class=\"number\">0</span> ? n : len - <span class=\"built_in\">Math</span>.abs(n), <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sameValueZero</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x === y || (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"built_in\">isNaN</span>(x) &amp;&amp; <span class=\"built_in\">isNaN</span>(y));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 7. Repeat, while k &lt; len</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (k &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// a. Let elementK be the result of ? Get(O, ! ToString(k)).</span></span><br><span class=\"line\">        <span class=\"comment\">// b. If SameValueZero(searchElement, elementK) is true, return true.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sameValueZero(o[k], searchElement)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// c. Increase k by 1. </span></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 8. Return false</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"toSource（非标准）-返回数组的源代码\"><a href=\"#toSource（非标准）-返回数组的源代码\" class=\"headerlink\" title=\"toSource（非标准） 返回数组的源代码\"></a>toSource（非标准） 返回数组的源代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.toSource()); <span class=\"comment\">// [\"a\", \"b\", \"c\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.prototype.toSource.call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"number\">0</span>:<span class=\"string\">'a'</span>, <span class=\"number\">1</span>:<span class=\"string\">'b'</span>, <span class=\"number\">2</span>:<span class=\"string\">'c'</span>, <span class=\"attr\">length</span>:<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype.toSource.call(o));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // [\"a\",\"b\",\"c\"]</span></span><br></pre></td></tr></table></figure>\n<p>参考资料1：<a href=\"http://louiszhai.github.io/2017/04/28/array\" target=\"_blank\" rel=\"noopener\">http://louiszhai.github.io/2017/04/28/array</a><br>参考资料2：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>"},{"title":"js复习手记六","date":"2018-04-19T10:40:27.000Z","_content":"\n## js作用域链\n\n<!-- more -->\n\n当js代码执行的时候，都会生成一个作用域链。作用域链的作用是保证有权访问执行环境里的变量和函数是有序访问。访问作用域链的变量只能在包含他的函数中向上访问，直到全局执行环境为止（window对象），整个作用域链是由不同执行位置上的变量对象按照规则所构建一个链表\n\n作用域链就是在内部函数中，可以访问外部函数变量的这种机制，用链式查找决定那些数据能被内部函数访问。\n\n![123](http://files.jb51.net/file_images/article/201605/201655141623615.png?201645141635)\n\n## 闭包的理解\n\n闭包是指有权访问另一个函数的作用域中变量的函数，创建闭包最常见的方式就是在函数中创建另一个函数，通过创建的这个闭包函数访问外层的局部变量，利用闭包可以突破作用域链，将变量缓存在内存中，简单来说闭包就是外部想访问一个函数内部参数或变量的桥梁，并且访问结束后将引用的变量保存在内存中供下次使用。\n\n##### 闭包的特性：\n\n- 函数中嵌套函数\n\n- 闭包函数可以访问外层作用域的参数和变量 （沿着作用域链寻找）\n\n- 闭包内的参数和变量不会被垃圾回收机制回收\n\n- 封装变量，类似其他语言的私有变量，来限制变量的作用域\n\n##### 闭包的优缺\n\n- 创建是为了封装和缓存变量，以供外部使用。可以避免全局变量污染\n\n- 但是闭包会保存在内存中，会增大内存的占有率，使用不当容易造成内存泄漏，\n\n- 在js中，函数就是闭包，只有函数才能产生作用域的概念\n\n- 在退出函数之前，将不使用的局部变量全部删除\n\n- 闭包和循环如果同时使用的话有时会有问题，因为闭包内的变量是保存变化的，如果创建闭包之后再使用函数的话，循环里的 i 可能会一直是最后一个值（比如最大值）。\n\n![js闭包图解](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524246978601&di=d940f06269611579008d091b87b1d945&imgtype=0&src=http%3A%2F%2Fs15.sinaimg.cn%2Fmw690%2F0066XBEogy6SH2GHjdQ6e%26690)\n\n\n## js作用域\n\n`全局作用域`:\n\n在js中，最外层定义的变量拥有全局作用域，对任何内容来说，都是可以访问的。\n\n```js\nvar a = 'js';\nfunction b(){\n    console.log(a)\n}\n\nb(); // js\n```\n\n`局部作用域`:\n\n局部作用域在函数内部定义的变量，一般只有在当前作用域内下可以访问，而对于函数外部是不可以访问的，但是函数内部定义变量一定要写var命令，不然等同于生成了全局作用域。\n\n```js\n\nfunction a(){\n    var b = 'js'\n}\na()\nconsole.log(b) // ReferenceError: b is not defined\n\n\nfunction a(){\n    b = 'js'\n}\na()\nconsole.log(b) // js\n```\n\n- javascript的作用域是相对函数而言的，可以称为函数作用域\n\n- 所以并不是用var声明的变量作用范围起止于花括号之间，javascript并没有块级作用域\n\n\n## javascript原型链（prototype）\n\n每一个对象内部都有一个prototype属性，当查找一个对象属性的时候，如果这个属性不存在这个对象中，就会通过这个prototype去查找这个属性，这个prototype又会有自己protoype属性，这样一层一层查找，直到Object内建对象中，如果Object中也不存在，就会返回undefined。\n\n- javascript对象赋值给新的变量的时候，实际上只是通过引用来传递的，新的变量中没有属于自己的原型副本。当我们修改原型的时候，与之相关的对象也会跟随改变，因为他们都指向同一个内存地址。\n\n![原型图解](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524246781051&di=de48a70f756cd6ac7fb1e93d86dda1c2&imgtype=jpg&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D4057629261%2C3288707102%26fm%3D214%26gp%3D0.jpg)\n\n\n## 事件代理\n\n事件代理又称事件委托，是把原本需要绑定在元素的事件委托给父元素或包含他的其他元素，让委托的元素监听并处理事件。\n\n- 事件代理的原理是利用dom元素的时间冒泡机制\n\n- 使用事件代理能够提高性能\n\n- 大量节省内存，减少事件注册，（比如在table中代理所有tr元素的click事件）\n\n- 一般新增元素事件是没有添加进去的，这时就可以在父元素上用事件代理能很好解决这个问题\n\n\n## this的理解\n\nthis的指向在函数定义的时候是不确定的，只有在执行函数的时候才能确定this指向谁，实际上this的最终指向的是哪个调用他的对象内\n\n```js\nfunction a(){\n    this.name = 'js'\n    console.log(this.name,this) // undefined , window\n}\na() // 相当于是window.a()\n\n\n\nvar o = {\n    name: 'js',\n    fn: function (){\n        console.log(this.name,this) // 'js' , fn\n    }\n}\no.fn() // 相当于window.o.fn()\n```\no.fn()是通过o调用的，this自然指向了o\n\n1. 如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，严格模式除外。\n\n2. 如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象\n\n```js \nvar o = {\n    a:10,\n    b:{\n        a:12,\n        fn:function(){\n            console.log(this.a); // 12\n        }\n    }\n}\no.b.fn();\n```\n\n尽管被多个对象调用，但是this依然指向他上一级对象\n\n\n### 当this遇到return时的问题\n\n如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。\n\n```js \nfunction fn()  \n{  \n    this.name = 'js';  \n    return {};  \n}\nvar a = new fn;  \nconsole.log(a.name); //undefined\n// 返回值返回的是对象\n\n\nfunction fn()  \n{  \n    this.name = 'js';  \n    return function(){};\n}\nvar a = new fn;  \nconsole.log(a.name); //undefined\n// 返回值返回的是匿名函数\n\n\nfunction fn()  \n{  \n    this.name = 'js';  \n    return undefined;\n}\nvar a = new fn;  \nconsole.log(a.name); //js\n// 返回值返回的是不是对象\n\n\n\nfunction fn()  \n{  \n    this.name = 'js';  \n    return undefined;\n}\nvar a = new fn;  \nconsole.log(a); //fn {name: \"js\"}\n// 返回值返回的是不是对象\n```\n\n\n还有null比较特殊，虽然null也是对象，但是this指向的还是函数的实例\n\n```js\nfunction fn()  \n{  \n    this.name = 'js';  \n    return null;\n}\nvar a = new fn;  \nconsole.log(a.name); //js\n```\n\n\n总结：\n\n- 在严格模式下，默认的this不是window，而是undefined。在node中，是Global对象\n\n- new 会改变this的对象，就好像用了call或apply方法（但实际上可能并不是）\n\n\n参考文献：https://www.cnblogs.com/pssp/p/5216085.html\n参考文献：https://www.cnblogs.com/humin/p/4556820.html\n参考文献：https://www.cnblogs.com/liugang-vip/p/5616484.html","source":"_posts/js复习手记六.md","raw":"---\ntitle: js复习手记六\ndate: 2018-04-19 18:40:27\ntags:\n---\n\n## js作用域链\n\n<!-- more -->\n\n当js代码执行的时候，都会生成一个作用域链。作用域链的作用是保证有权访问执行环境里的变量和函数是有序访问。访问作用域链的变量只能在包含他的函数中向上访问，直到全局执行环境为止（window对象），整个作用域链是由不同执行位置上的变量对象按照规则所构建一个链表\n\n作用域链就是在内部函数中，可以访问外部函数变量的这种机制，用链式查找决定那些数据能被内部函数访问。\n\n![123](http://files.jb51.net/file_images/article/201605/201655141623615.png?201645141635)\n\n## 闭包的理解\n\n闭包是指有权访问另一个函数的作用域中变量的函数，创建闭包最常见的方式就是在函数中创建另一个函数，通过创建的这个闭包函数访问外层的局部变量，利用闭包可以突破作用域链，将变量缓存在内存中，简单来说闭包就是外部想访问一个函数内部参数或变量的桥梁，并且访问结束后将引用的变量保存在内存中供下次使用。\n\n##### 闭包的特性：\n\n- 函数中嵌套函数\n\n- 闭包函数可以访问外层作用域的参数和变量 （沿着作用域链寻找）\n\n- 闭包内的参数和变量不会被垃圾回收机制回收\n\n- 封装变量，类似其他语言的私有变量，来限制变量的作用域\n\n##### 闭包的优缺\n\n- 创建是为了封装和缓存变量，以供外部使用。可以避免全局变量污染\n\n- 但是闭包会保存在内存中，会增大内存的占有率，使用不当容易造成内存泄漏，\n\n- 在js中，函数就是闭包，只有函数才能产生作用域的概念\n\n- 在退出函数之前，将不使用的局部变量全部删除\n\n- 闭包和循环如果同时使用的话有时会有问题，因为闭包内的变量是保存变化的，如果创建闭包之后再使用函数的话，循环里的 i 可能会一直是最后一个值（比如最大值）。\n\n![js闭包图解](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524246978601&di=d940f06269611579008d091b87b1d945&imgtype=0&src=http%3A%2F%2Fs15.sinaimg.cn%2Fmw690%2F0066XBEogy6SH2GHjdQ6e%26690)\n\n\n## js作用域\n\n`全局作用域`:\n\n在js中，最外层定义的变量拥有全局作用域，对任何内容来说，都是可以访问的。\n\n```js\nvar a = 'js';\nfunction b(){\n    console.log(a)\n}\n\nb(); // js\n```\n\n`局部作用域`:\n\n局部作用域在函数内部定义的变量，一般只有在当前作用域内下可以访问，而对于函数外部是不可以访问的，但是函数内部定义变量一定要写var命令，不然等同于生成了全局作用域。\n\n```js\n\nfunction a(){\n    var b = 'js'\n}\na()\nconsole.log(b) // ReferenceError: b is not defined\n\n\nfunction a(){\n    b = 'js'\n}\na()\nconsole.log(b) // js\n```\n\n- javascript的作用域是相对函数而言的，可以称为函数作用域\n\n- 所以并不是用var声明的变量作用范围起止于花括号之间，javascript并没有块级作用域\n\n\n## javascript原型链（prototype）\n\n每一个对象内部都有一个prototype属性，当查找一个对象属性的时候，如果这个属性不存在这个对象中，就会通过这个prototype去查找这个属性，这个prototype又会有自己protoype属性，这样一层一层查找，直到Object内建对象中，如果Object中也不存在，就会返回undefined。\n\n- javascript对象赋值给新的变量的时候，实际上只是通过引用来传递的，新的变量中没有属于自己的原型副本。当我们修改原型的时候，与之相关的对象也会跟随改变，因为他们都指向同一个内存地址。\n\n![原型图解](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524246781051&di=de48a70f756cd6ac7fb1e93d86dda1c2&imgtype=jpg&src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D4057629261%2C3288707102%26fm%3D214%26gp%3D0.jpg)\n\n\n## 事件代理\n\n事件代理又称事件委托，是把原本需要绑定在元素的事件委托给父元素或包含他的其他元素，让委托的元素监听并处理事件。\n\n- 事件代理的原理是利用dom元素的时间冒泡机制\n\n- 使用事件代理能够提高性能\n\n- 大量节省内存，减少事件注册，（比如在table中代理所有tr元素的click事件）\n\n- 一般新增元素事件是没有添加进去的，这时就可以在父元素上用事件代理能很好解决这个问题\n\n\n## this的理解\n\nthis的指向在函数定义的时候是不确定的，只有在执行函数的时候才能确定this指向谁，实际上this的最终指向的是哪个调用他的对象内\n\n```js\nfunction a(){\n    this.name = 'js'\n    console.log(this.name,this) // undefined , window\n}\na() // 相当于是window.a()\n\n\n\nvar o = {\n    name: 'js',\n    fn: function (){\n        console.log(this.name,this) // 'js' , fn\n    }\n}\no.fn() // 相当于window.o.fn()\n```\no.fn()是通过o调用的，this自然指向了o\n\n1. 如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，严格模式除外。\n\n2. 如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象\n\n```js \nvar o = {\n    a:10,\n    b:{\n        a:12,\n        fn:function(){\n            console.log(this.a); // 12\n        }\n    }\n}\no.b.fn();\n```\n\n尽管被多个对象调用，但是this依然指向他上一级对象\n\n\n### 当this遇到return时的问题\n\n如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。\n\n```js \nfunction fn()  \n{  \n    this.name = 'js';  \n    return {};  \n}\nvar a = new fn;  \nconsole.log(a.name); //undefined\n// 返回值返回的是对象\n\n\nfunction fn()  \n{  \n    this.name = 'js';  \n    return function(){};\n}\nvar a = new fn;  \nconsole.log(a.name); //undefined\n// 返回值返回的是匿名函数\n\n\nfunction fn()  \n{  \n    this.name = 'js';  \n    return undefined;\n}\nvar a = new fn;  \nconsole.log(a.name); //js\n// 返回值返回的是不是对象\n\n\n\nfunction fn()  \n{  \n    this.name = 'js';  \n    return undefined;\n}\nvar a = new fn;  \nconsole.log(a); //fn {name: \"js\"}\n// 返回值返回的是不是对象\n```\n\n\n还有null比较特殊，虽然null也是对象，但是this指向的还是函数的实例\n\n```js\nfunction fn()  \n{  \n    this.name = 'js';  \n    return null;\n}\nvar a = new fn;  \nconsole.log(a.name); //js\n```\n\n\n总结：\n\n- 在严格模式下，默认的this不是window，而是undefined。在node中，是Global对象\n\n- new 会改变this的对象，就好像用了call或apply方法（但实际上可能并不是）\n\n\n参考文献：https://www.cnblogs.com/pssp/p/5216085.html\n参考文献：https://www.cnblogs.com/humin/p/4556820.html\n参考文献：https://www.cnblogs.com/liugang-vip/p/5616484.html","slug":"js复习手记六","published":1,"updated":"2018-04-25T16:22:56.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb605p000aa4vbl6le46vk","content":"<h2 id=\"js作用域链\"><a href=\"#js作用域链\" class=\"headerlink\" title=\"js作用域链\"></a>js作用域链</h2><a id=\"more\"></a>\n<p>当js代码执行的时候，都会生成一个作用域链。作用域链的作用是保证有权访问执行环境里的变量和函数是有序访问。访问作用域链的变量只能在包含他的函数中向上访问，直到全局执行环境为止（window对象），整个作用域链是由不同执行位置上的变量对象按照规则所构建一个链表</p>\n<p>作用域链就是在内部函数中，可以访问外部函数变量的这种机制，用链式查找决定那些数据能被内部函数访问。</p>\n<p><img src=\"http://files.jb51.net/file_images/article/201605/201655141623615.png?201645141635\" alt=\"123\"></p>\n<h2 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h2><p>闭包是指有权访问另一个函数的作用域中变量的函数，创建闭包最常见的方式就是在函数中创建另一个函数，通过创建的这个闭包函数访问外层的局部变量，利用闭包可以突破作用域链，将变量缓存在内存中，简单来说闭包就是外部想访问一个函数内部参数或变量的桥梁，并且访问结束后将引用的变量保存在内存中供下次使用。</p>\n<h5 id=\"闭包的特性：\"><a href=\"#闭包的特性：\" class=\"headerlink\" title=\"闭包的特性：\"></a>闭包的特性：</h5><ul>\n<li><p>函数中嵌套函数</p>\n</li>\n<li><p>闭包函数可以访问外层作用域的参数和变量 （沿着作用域链寻找）</p>\n</li>\n<li><p>闭包内的参数和变量不会被垃圾回收机制回收</p>\n</li>\n<li><p>封装变量，类似其他语言的私有变量，来限制变量的作用域</p>\n</li>\n</ul>\n<h5 id=\"闭包的优缺\"><a href=\"#闭包的优缺\" class=\"headerlink\" title=\"闭包的优缺\"></a>闭包的优缺</h5><ul>\n<li><p>创建是为了封装和缓存变量，以供外部使用。可以避免全局变量污染</p>\n</li>\n<li><p>但是闭包会保存在内存中，会增大内存的占有率，使用不当容易造成内存泄漏，</p>\n</li>\n<li><p>在js中，函数就是闭包，只有函数才能产生作用域的概念</p>\n</li>\n<li><p>在退出函数之前，将不使用的局部变量全部删除</p>\n</li>\n<li><p>闭包和循环如果同时使用的话有时会有问题，因为闭包内的变量是保存变化的，如果创建闭包之后再使用函数的话，循环里的 i 可能会一直是最后一个值（比如最大值）。</p>\n</li>\n</ul>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524246978601&amp;di=d940f06269611579008d091b87b1d945&amp;imgtype=0&amp;src=http%3A%2F%2Fs15.sinaimg.cn%2Fmw690%2F0066XBEogy6SH2GHjdQ6e%26690\" alt=\"js闭包图解\"></p>\n<h2 id=\"js作用域\"><a href=\"#js作用域\" class=\"headerlink\" title=\"js作用域\"></a>js作用域</h2><p><code>全局作用域</code>:</p>\n<p>在js中，最外层定义的变量拥有全局作用域，对任何内容来说，都是可以访问的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'js'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b(); <span class=\"comment\">// js</span></span><br></pre></td></tr></table></figure>\n<p><code>局部作用域</code>:</p>\n<p>局部作用域在函数内部定义的变量，一般只有在当前作用域内下可以访问，而对于函数外部是不可以访问的，但是函数内部定义变量一定要写var命令，不然等同于生成了全局作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">'js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// ReferenceError: b is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b = <span class=\"string\">'js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// js</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>javascript的作用域是相对函数而言的，可以称为函数作用域</p>\n</li>\n<li><p>所以并不是用var声明的变量作用范围起止于花括号之间，javascript并没有块级作用域</p>\n</li>\n</ul>\n<h2 id=\"javascript原型链（prototype）\"><a href=\"#javascript原型链（prototype）\" class=\"headerlink\" title=\"javascript原型链（prototype）\"></a>javascript原型链（prototype）</h2><p>每一个对象内部都有一个prototype属性，当查找一个对象属性的时候，如果这个属性不存在这个对象中，就会通过这个prototype去查找这个属性，这个prototype又会有自己protoype属性，这样一层一层查找，直到Object内建对象中，如果Object中也不存在，就会返回undefined。</p>\n<ul>\n<li>javascript对象赋值给新的变量的时候，实际上只是通过引用来传递的，新的变量中没有属于自己的原型副本。当我们修改原型的时候，与之相关的对象也会跟随改变，因为他们都指向同一个内存地址。</li>\n</ul>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524246781051&amp;di=de48a70f756cd6ac7fb1e93d86dda1c2&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D4057629261%2C3288707102%26fm%3D214%26gp%3D0.jpg\" alt=\"原型图解\"></p>\n<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>事件代理又称事件委托，是把原本需要绑定在元素的事件委托给父元素或包含他的其他元素，让委托的元素监听并处理事件。</p>\n<ul>\n<li><p>事件代理的原理是利用dom元素的时间冒泡机制</p>\n</li>\n<li><p>使用事件代理能够提高性能</p>\n</li>\n<li><p>大量节省内存，减少事件注册，（比如在table中代理所有tr元素的click事件）</p>\n</li>\n<li><p>一般新增元素事件是没有添加进去的，这时就可以在父元素上用事件代理能很好解决这个问题</p>\n</li>\n</ul>\n<h2 id=\"this的理解\"><a href=\"#this的理解\" class=\"headerlink\" title=\"this的理解\"></a>this的理解</h2><p>this的指向在函数定义的时候是不确定的，只有在执行函数的时候才能确定this指向谁，实际上this的最终指向的是哪个调用他的对象内</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,<span class=\"keyword\">this</span>) <span class=\"comment\">// undefined , window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a() <span class=\"comment\">// 相当于是window.a()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'js'</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,<span class=\"keyword\">this</span>) <span class=\"comment\">// 'js' , fn</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.fn() <span class=\"comment\">// 相当于window.o.fn()</span></span><br></pre></td></tr></table></figure>\n<p>o.fn()是通过o调用的，this自然指向了o</p>\n<ol>\n<li><p>如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，严格模式除外。</p>\n</li>\n<li><p>如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">10</span>,</span><br><span class=\"line\">    b:&#123;</span><br><span class=\"line\">        a:<span class=\"number\">12</span>,</span><br><span class=\"line\">        fn:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// 12</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.b.fn();</span><br></pre></td></tr></table></figure>\n<p>尽管被多个对象调用，但是this依然指向他上一级对象</p>\n<h3 id=\"当this遇到return时的问题\"><a href=\"#当this遇到return时的问题\" class=\"headerlink\" title=\"当this遇到return时的问题\"></a>当this遇到return时的问题</h3><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是匿名函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是不是对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//fn &#123;name: \"js\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是不是对象</span></span><br></pre></td></tr></table></figure>\n<p>还有null比较特殊，虽然null也是对象，但是this指向的还是函数的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//js</span></span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li><p>在严格模式下，默认的this不是window，而是undefined。在node中，是Global对象</p>\n</li>\n<li><p>new 会改变this的对象，就好像用了call或apply方法（但实际上可能并不是）</p>\n</li>\n</ul>\n<p>参考文献：<a href=\"https://www.cnblogs.com/pssp/p/5216085.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pssp/p/5216085.html</a><br>参考文献：<a href=\"https://www.cnblogs.com/humin/p/4556820.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/humin/p/4556820.html</a><br>参考文献：<a href=\"https://www.cnblogs.com/liugang-vip/p/5616484.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liugang-vip/p/5616484.html</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"js作用域链\"><a href=\"#js作用域链\" class=\"headerlink\" title=\"js作用域链\"></a>js作用域链</h2>","more":"<p>当js代码执行的时候，都会生成一个作用域链。作用域链的作用是保证有权访问执行环境里的变量和函数是有序访问。访问作用域链的变量只能在包含他的函数中向上访问，直到全局执行环境为止（window对象），整个作用域链是由不同执行位置上的变量对象按照规则所构建一个链表</p>\n<p>作用域链就是在内部函数中，可以访问外部函数变量的这种机制，用链式查找决定那些数据能被内部函数访问。</p>\n<p><img src=\"http://files.jb51.net/file_images/article/201605/201655141623615.png?201645141635\" alt=\"123\"></p>\n<h2 id=\"闭包的理解\"><a href=\"#闭包的理解\" class=\"headerlink\" title=\"闭包的理解\"></a>闭包的理解</h2><p>闭包是指有权访问另一个函数的作用域中变量的函数，创建闭包最常见的方式就是在函数中创建另一个函数，通过创建的这个闭包函数访问外层的局部变量，利用闭包可以突破作用域链，将变量缓存在内存中，简单来说闭包就是外部想访问一个函数内部参数或变量的桥梁，并且访问结束后将引用的变量保存在内存中供下次使用。</p>\n<h5 id=\"闭包的特性：\"><a href=\"#闭包的特性：\" class=\"headerlink\" title=\"闭包的特性：\"></a>闭包的特性：</h5><ul>\n<li><p>函数中嵌套函数</p>\n</li>\n<li><p>闭包函数可以访问外层作用域的参数和变量 （沿着作用域链寻找）</p>\n</li>\n<li><p>闭包内的参数和变量不会被垃圾回收机制回收</p>\n</li>\n<li><p>封装变量，类似其他语言的私有变量，来限制变量的作用域</p>\n</li>\n</ul>\n<h5 id=\"闭包的优缺\"><a href=\"#闭包的优缺\" class=\"headerlink\" title=\"闭包的优缺\"></a>闭包的优缺</h5><ul>\n<li><p>创建是为了封装和缓存变量，以供外部使用。可以避免全局变量污染</p>\n</li>\n<li><p>但是闭包会保存在内存中，会增大内存的占有率，使用不当容易造成内存泄漏，</p>\n</li>\n<li><p>在js中，函数就是闭包，只有函数才能产生作用域的概念</p>\n</li>\n<li><p>在退出函数之前，将不使用的局部变量全部删除</p>\n</li>\n<li><p>闭包和循环如果同时使用的话有时会有问题，因为闭包内的变量是保存变化的，如果创建闭包之后再使用函数的话，循环里的 i 可能会一直是最后一个值（比如最大值）。</p>\n</li>\n</ul>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524246978601&amp;di=d940f06269611579008d091b87b1d945&amp;imgtype=0&amp;src=http%3A%2F%2Fs15.sinaimg.cn%2Fmw690%2F0066XBEogy6SH2GHjdQ6e%26690\" alt=\"js闭包图解\"></p>\n<h2 id=\"js作用域\"><a href=\"#js作用域\" class=\"headerlink\" title=\"js作用域\"></a>js作用域</h2><p><code>全局作用域</code>:</p>\n<p>在js中，最外层定义的变量拥有全局作用域，对任何内容来说，都是可以访问的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'js'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b(); <span class=\"comment\">// js</span></span><br></pre></td></tr></table></figure>\n<p><code>局部作用域</code>:</p>\n<p>局部作用域在函数内部定义的变量，一般只有在当前作用域内下可以访问，而对于函数外部是不可以访问的，但是函数内部定义变量一定要写var命令，不然等同于生成了全局作用域。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">'js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// ReferenceError: b is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    b = <span class=\"string\">'js'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b) <span class=\"comment\">// js</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>javascript的作用域是相对函数而言的，可以称为函数作用域</p>\n</li>\n<li><p>所以并不是用var声明的变量作用范围起止于花括号之间，javascript并没有块级作用域</p>\n</li>\n</ul>\n<h2 id=\"javascript原型链（prototype）\"><a href=\"#javascript原型链（prototype）\" class=\"headerlink\" title=\"javascript原型链（prototype）\"></a>javascript原型链（prototype）</h2><p>每一个对象内部都有一个prototype属性，当查找一个对象属性的时候，如果这个属性不存在这个对象中，就会通过这个prototype去查找这个属性，这个prototype又会有自己protoype属性，这样一层一层查找，直到Object内建对象中，如果Object中也不存在，就会返回undefined。</p>\n<ul>\n<li>javascript对象赋值给新的变量的时候，实际上只是通过引用来传递的，新的变量中没有属于自己的原型副本。当我们修改原型的时候，与之相关的对象也会跟随改变，因为他们都指向同一个内存地址。</li>\n</ul>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524246781051&amp;di=de48a70f756cd6ac7fb1e93d86dda1c2&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg1.imgtn.bdimg.com%2Fit%2Fu%3D4057629261%2C3288707102%26fm%3D214%26gp%3D0.jpg\" alt=\"原型图解\"></p>\n<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>事件代理又称事件委托，是把原本需要绑定在元素的事件委托给父元素或包含他的其他元素，让委托的元素监听并处理事件。</p>\n<ul>\n<li><p>事件代理的原理是利用dom元素的时间冒泡机制</p>\n</li>\n<li><p>使用事件代理能够提高性能</p>\n</li>\n<li><p>大量节省内存，减少事件注册，（比如在table中代理所有tr元素的click事件）</p>\n</li>\n<li><p>一般新增元素事件是没有添加进去的，这时就可以在父元素上用事件代理能很好解决这个问题</p>\n</li>\n</ul>\n<h2 id=\"this的理解\"><a href=\"#this的理解\" class=\"headerlink\" title=\"this的理解\"></a>this的理解</h2><p>this的指向在函数定义的时候是不确定的，只有在执行函数的时候才能确定this指向谁，实际上this的最终指向的是哪个调用他的对象内</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,<span class=\"keyword\">this</span>) <span class=\"comment\">// undefined , window</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a() <span class=\"comment\">// 相当于是window.a()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'js'</span>,</span><br><span class=\"line\">    fn: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name,<span class=\"keyword\">this</span>) <span class=\"comment\">// 'js' , fn</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.fn() <span class=\"comment\">// 相当于window.o.fn()</span></span><br></pre></td></tr></table></figure>\n<p>o.fn()是通过o调用的，this自然指向了o</p>\n<ol>\n<li><p>如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，严格模式除外。</p>\n</li>\n<li><p>如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    a:<span class=\"number\">10</span>,</span><br><span class=\"line\">    b:&#123;</span><br><span class=\"line\">        a:<span class=\"number\">12</span>,</span><br><span class=\"line\">        fn:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.a); <span class=\"comment\">// 12</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.b.fn();</span><br></pre></td></tr></table></figure>\n<p>尽管被多个对象调用，但是this依然指向他上一级对象</p>\n<h3 id=\"当this遇到return时的问题\"><a href=\"#当this遇到return时的问题\" class=\"headerlink\" title=\"当this遇到return时的问题\"></a>当this遇到return时的问题</h3><p>如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是匿名函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//js</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是不是对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">//fn &#123;name: \"js\"&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 返回值返回的是不是对象</span></span><br></pre></td></tr></table></figure>\n<p>还有null比较特殊，虽然null也是对象，但是this指向的还是函数的实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'js'</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> fn;  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">//js</span></span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<ul>\n<li><p>在严格模式下，默认的this不是window，而是undefined。在node中，是Global对象</p>\n</li>\n<li><p>new 会改变this的对象，就好像用了call或apply方法（但实际上可能并不是）</p>\n</li>\n</ul>\n<p>参考文献：<a href=\"https://www.cnblogs.com/pssp/p/5216085.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/pssp/p/5216085.html</a><br>参考文献：<a href=\"https://www.cnblogs.com/humin/p/4556820.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/humin/p/4556820.html</a><br>参考文献：<a href=\"https://www.cnblogs.com/liugang-vip/p/5616484.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liugang-vip/p/5616484.html</a></p>"},{"title":"js复习手记五","date":"2018-03-31T09:18:22.000Z","_content":"\n### css3新增的伪类\n\n<!-- more -->\n\n```css\n[class ^=val] 属性值以val开头的class节点元素\n\n[class $=val] 属性值以val结尾的class节点元素\n\n[class *=val] 属性值包含了val的class节点元素\n\np:first-of-type  在父元素的子元素中选择第一个p元素\n\np:last-of-type  在父元素的子元素中选择最后一个p元素\n\np:only-of-type(n)  在父元素的子元素中选择唯一的p元素\n\np:nth-last-of-type(n)  在父元素中的子元素中选择倒数的第n个p元素\n\n\np:only-child ：在父元素中选择只有一个子元素，并且一定要是p元素\n\np:last-child  在父元素中选择的最后一个子元素，并且一定要是p元素\n\np:nth-child(n || even || odd)  在父元素中选择第n个p元素 || 偶数 || 基数\n\np:nth-last-child(n)  在父元素中选择倒数的第n个子元素，并且一定要是p元素\n\n\n:root 选择文本的根元素\n\np:empty  选择没有子元素的p元素\n\np:enable  选择每个未禁用的p元素\n\np:disable  选择每个被禁用的p元素\n\np:checked  选择每个被选中的p元素\n\np:target  选择当前活动的p元素\n\n\n:not(p) 选择不包括p元素的 每一个元素\n\n::selection  用户选取的部分\n\n:focus 获得焦点的元素器\n\n\n\np:first-line 对p元素的第一行文本进行格式化，只能用于块级元素\n\np:first-letter 对p元素的首字母设置特殊样式，只能用于块级元素\n\np:before 在p元素的内容前面插入新内容,\n\np:after  在p元素的后面插入新内容\n```\n\n\n### link 和 @import 的区别\n\n1. 诞生的关系不同\n\n`link` 是xhtml提供的标签，不仅可以加载css文件，还可以定义RSS,rel连接属性等等。 `@import` css提供的语法规则，只能导入样式表的作用，\n\n\n2. 加载顺序不同\n\n加载页面时，`link`标签引入的css文件被同时加载. `@import`引入的css将在页面加载完成后执行加载。\n\n\n3. 兼容性区别\n\n`@import`是css2.1才有的语法，只能在ie5以上才能识别；`link`标签作为xhtml的元素，不存在兼容问题\n\n\n4. 可操作Dom区别\n\n可以通过js 动态操作dom ， 插入`link` 标签来改变样式；由于dom方法是基于文档的，无法使用js操控`@import`的方式插入样式\n\n\n5. 权重区别\n\n 引入的样式权重大于`@import`引入的样式\n\n\nCSS 权重优先级顺序简单表示为：\n\n`!important` > `行内样式` > `ID` > `类、伪类、属性` > `标签名` > `继承` > `通配符`\n\n最大   >   1000   >    100    >     10    >     1     >     0\n\n\n`@import` 的性能优于`link`,因为`@import`在页面加载完后才执行，所以在页面加载的同时不会去并行加载这个css文件，适合加载未来需要的文件。\n\n`link` 在页面加载的同时就会同时加载，浏览器对并行下载有限制，适合 马上就需要加载的文件，并且要放置页面头部。\n\n\n### `display` , `float` , `position` 之间的关系\n\n当display：none的时候，就会忽略掉float和position的值，因为此时元素已经消失在渲染树中，元素不产生框\n\n否则，当position为absolute或fixed的时候，元素就是绝对定位，此时float的值为none。\n\n否则，当float不是none的时候，此时元素是浮动元素。\n\n否则，如果元素是根元素，，其它情况下display的值为指定值。\n\n总结来说，绝对定位，浮动，根元素都需要调整display\n\n而且，当元素设置了position：absolute或fixed，，或float不为none的时候，隐式的会将元素的display转为inline-block,即使指定了display除none之外的其它值的时候也是如此，而且也会将z-index增大为1.\n\n\n### 如何创建块级格式化上下文,BFC有什么用？\n\n如果创建：\n\n- 根元素\n\n- 浮动元素 （float不为`none`）\n\n- 绝对定位元素 （position取值为`absolute`或`fixed`）\n\n- 元素display取值为`inline-block`,`inline-flex`,`flex`,`table-caption`,`table-cell`之一\n\n- overflow 除`visible`以外的元素\n\n作用：\n\n- 可以包含浮动元素\n\n- 不被浮动元素覆盖\n\n- 阻止父子元素`margin`值的折叠\n\n\n### css的盒子模型\n\n有两种盒子模型，`IE盒子模型` ， `W3C盒子模型`.\n\n盒子模型： `content`内容 ， `padding`内边距 ， `margin`外边距 ， `border`边框   组成\n\n区别在于 ： IE盒子模型： 高 或 宽 = content + padding + border\n\n\n### 去除inline-block元素间的缝隙\n\ninline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距（html中元素间空格，回车，html注释都会造成缝隙）\n\n- 使用margin负值，不过对于12像素大小的上下文，Arial字体的margin负值为-3像素，Tahoma和Verdana就是-4像素，而Geneva为-6像素\n\n- 使用无闭合标签，（但是为了兼容ie6/7，最后一个列表的结束标签需要加上）\n\n- font-size:0\n\n- letter-spacing为负值，但是有些有浏览器最小间距1像素，在小就会还原了\n\n- word-spacing为负值\n\n- 移除空格\n\n\n### png，gif，jpeg的区别及如何选\n\n`gif`\n\n- 8位像素，256色\n\n- 无损压缩\n\n- 支持简单动画\n\n- 支持boolean透明\n\n- 适合简单动画\n\n- 体积小\n\n\n`jpeg`\n\n- 颜色限于256\n\n- 有损压缩\n\n- 可控制压缩质量\n\n- 不支持透明\n\n- 适合颜色丰富的照片\n\n- 体积小\n\n- 打开速度快\n\n\n`png`\n\n- 有png8和truecolor png\n\n- png8类似gif颜色上限256，体积大，支持alpha透明度，无动画\n\n- 适合图标，背景，按钮\n\n- 压缩效率比bmp高，比jpeg低\n\n- 无损压缩\n\n\n`jpeg / png / gif`\n\n- jpeg属于有损压缩，每次保存都会产生数据损失，不适合多次编辑保存，压缩过高图像会失真，模糊\n\n- png一般体积比同尺寸90%压缩率的jpeg大的多，但是人眼看起来差不多，适合小图标，透明背景，在IE6不支持，但是可以用js的hack\n\n- gif 色域不广，只有256中颜色，不适合做太复杂的动画，正在被goole的webm格式取代\n\n\n\n参考文献：https://www.zhihu.com/question/20028452\n参考文献：http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\n参考文献：https://juejin.im/entry/58c60601da2f605dc5a90282?from=groupmessage&isappinstalled=0","source":"_posts/js复习手记五.md","raw":"---\ntitle: js复习手记五\ndate: 2018-03-31 17:18:22\ntags: 复习\n---\n\n### css3新增的伪类\n\n<!-- more -->\n\n```css\n[class ^=val] 属性值以val开头的class节点元素\n\n[class $=val] 属性值以val结尾的class节点元素\n\n[class *=val] 属性值包含了val的class节点元素\n\np:first-of-type  在父元素的子元素中选择第一个p元素\n\np:last-of-type  在父元素的子元素中选择最后一个p元素\n\np:only-of-type(n)  在父元素的子元素中选择唯一的p元素\n\np:nth-last-of-type(n)  在父元素中的子元素中选择倒数的第n个p元素\n\n\np:only-child ：在父元素中选择只有一个子元素，并且一定要是p元素\n\np:last-child  在父元素中选择的最后一个子元素，并且一定要是p元素\n\np:nth-child(n || even || odd)  在父元素中选择第n个p元素 || 偶数 || 基数\n\np:nth-last-child(n)  在父元素中选择倒数的第n个子元素，并且一定要是p元素\n\n\n:root 选择文本的根元素\n\np:empty  选择没有子元素的p元素\n\np:enable  选择每个未禁用的p元素\n\np:disable  选择每个被禁用的p元素\n\np:checked  选择每个被选中的p元素\n\np:target  选择当前活动的p元素\n\n\n:not(p) 选择不包括p元素的 每一个元素\n\n::selection  用户选取的部分\n\n:focus 获得焦点的元素器\n\n\n\np:first-line 对p元素的第一行文本进行格式化，只能用于块级元素\n\np:first-letter 对p元素的首字母设置特殊样式，只能用于块级元素\n\np:before 在p元素的内容前面插入新内容,\n\np:after  在p元素的后面插入新内容\n```\n\n\n### link 和 @import 的区别\n\n1. 诞生的关系不同\n\n`link` 是xhtml提供的标签，不仅可以加载css文件，还可以定义RSS,rel连接属性等等。 `@import` css提供的语法规则，只能导入样式表的作用，\n\n\n2. 加载顺序不同\n\n加载页面时，`link`标签引入的css文件被同时加载. `@import`引入的css将在页面加载完成后执行加载。\n\n\n3. 兼容性区别\n\n`@import`是css2.1才有的语法，只能在ie5以上才能识别；`link`标签作为xhtml的元素，不存在兼容问题\n\n\n4. 可操作Dom区别\n\n可以通过js 动态操作dom ， 插入`link` 标签来改变样式；由于dom方法是基于文档的，无法使用js操控`@import`的方式插入样式\n\n\n5. 权重区别\n\n 引入的样式权重大于`@import`引入的样式\n\n\nCSS 权重优先级顺序简单表示为：\n\n`!important` > `行内样式` > `ID` > `类、伪类、属性` > `标签名` > `继承` > `通配符`\n\n最大   >   1000   >    100    >     10    >     1     >     0\n\n\n`@import` 的性能优于`link`,因为`@import`在页面加载完后才执行，所以在页面加载的同时不会去并行加载这个css文件，适合加载未来需要的文件。\n\n`link` 在页面加载的同时就会同时加载，浏览器对并行下载有限制，适合 马上就需要加载的文件，并且要放置页面头部。\n\n\n### `display` , `float` , `position` 之间的关系\n\n当display：none的时候，就会忽略掉float和position的值，因为此时元素已经消失在渲染树中，元素不产生框\n\n否则，当position为absolute或fixed的时候，元素就是绝对定位，此时float的值为none。\n\n否则，当float不是none的时候，此时元素是浮动元素。\n\n否则，如果元素是根元素，，其它情况下display的值为指定值。\n\n总结来说，绝对定位，浮动，根元素都需要调整display\n\n而且，当元素设置了position：absolute或fixed，，或float不为none的时候，隐式的会将元素的display转为inline-block,即使指定了display除none之外的其它值的时候也是如此，而且也会将z-index增大为1.\n\n\n### 如何创建块级格式化上下文,BFC有什么用？\n\n如果创建：\n\n- 根元素\n\n- 浮动元素 （float不为`none`）\n\n- 绝对定位元素 （position取值为`absolute`或`fixed`）\n\n- 元素display取值为`inline-block`,`inline-flex`,`flex`,`table-caption`,`table-cell`之一\n\n- overflow 除`visible`以外的元素\n\n作用：\n\n- 可以包含浮动元素\n\n- 不被浮动元素覆盖\n\n- 阻止父子元素`margin`值的折叠\n\n\n### css的盒子模型\n\n有两种盒子模型，`IE盒子模型` ， `W3C盒子模型`.\n\n盒子模型： `content`内容 ， `padding`内边距 ， `margin`外边距 ， `border`边框   组成\n\n区别在于 ： IE盒子模型： 高 或 宽 = content + padding + border\n\n\n### 去除inline-block元素间的缝隙\n\ninline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距（html中元素间空格，回车，html注释都会造成缝隙）\n\n- 使用margin负值，不过对于12像素大小的上下文，Arial字体的margin负值为-3像素，Tahoma和Verdana就是-4像素，而Geneva为-6像素\n\n- 使用无闭合标签，（但是为了兼容ie6/7，最后一个列表的结束标签需要加上）\n\n- font-size:0\n\n- letter-spacing为负值，但是有些有浏览器最小间距1像素，在小就会还原了\n\n- word-spacing为负值\n\n- 移除空格\n\n\n### png，gif，jpeg的区别及如何选\n\n`gif`\n\n- 8位像素，256色\n\n- 无损压缩\n\n- 支持简单动画\n\n- 支持boolean透明\n\n- 适合简单动画\n\n- 体积小\n\n\n`jpeg`\n\n- 颜色限于256\n\n- 有损压缩\n\n- 可控制压缩质量\n\n- 不支持透明\n\n- 适合颜色丰富的照片\n\n- 体积小\n\n- 打开速度快\n\n\n`png`\n\n- 有png8和truecolor png\n\n- png8类似gif颜色上限256，体积大，支持alpha透明度，无动画\n\n- 适合图标，背景，按钮\n\n- 压缩效率比bmp高，比jpeg低\n\n- 无损压缩\n\n\n`jpeg / png / gif`\n\n- jpeg属于有损压缩，每次保存都会产生数据损失，不适合多次编辑保存，压缩过高图像会失真，模糊\n\n- png一般体积比同尺寸90%压缩率的jpeg大的多，但是人眼看起来差不多，适合小图标，透明背景，在IE6不支持，但是可以用js的hack\n\n- gif 色域不广，只有256中颜色，不适合做太复杂的动画，正在被goole的webm格式取代\n\n\n\n参考文献：https://www.zhihu.com/question/20028452\n参考文献：http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\n参考文献：https://juejin.im/entry/58c60601da2f605dc5a90282?from=groupmessage&isappinstalled=0","slug":"js复习手记五","published":1,"updated":"2018-04-24T14:27:38.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb605s000ca4vbofhqfkpk","content":"<h3 id=\"css3新增的伪类\"><a href=\"#css3新增的伪类\" class=\"headerlink\" title=\"css3新增的伪类\"></a>css3新增的伪类</h3><a id=\"more\"></a>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[class ^=val]</span> 属性值以<span class=\"selector-tag\">val</span>开头的<span class=\"selector-tag\">class</span>节点元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[class $=val]</span> 属性值以<span class=\"selector-tag\">val</span>结尾的<span class=\"selector-tag\">class</span>节点元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[class *=val]</span> 属性值包含了<span class=\"selector-tag\">val</span>的<span class=\"selector-tag\">class</span>节点元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-of-type</span>  在父元素的子元素中选择第一个<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:last-of-type</span>  在父元素的子元素中选择最后一个<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-of-type(n)</span>  在父元素的子元素中选择唯一的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-last-of-type(n)</span>  在父元素中的子元素中选择倒数的第<span class=\"selector-tag\">n</span>个<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-child</span> ：在父元素中选择只有一个子元素，并且一定要是<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:last-child</span>  在父元素中选择的最后一个子元素，并且一定要是<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\">p:nth-child(n || even || odd)  在父元素中选择第n个p元素 || 偶数 || 基数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-last-child(n)</span>  在父元素中选择倒数的第<span class=\"selector-tag\">n</span>个子元素，并且一定要是<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> 选择文本的根元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:empty</span>  选择没有子元素的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:enable</span>  选择每个未禁用的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:disable</span>  选择每个被禁用的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:checked</span>  选择每个被选中的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:target</span>  选择当前活动的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:not(p)</span> 选择不包括<span class=\"selector-tag\">p</span>元素的 每一个元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">::selection</span>  用户选取的部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:focus</span> 获得焦点的元素器</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-line</span> 对<span class=\"selector-tag\">p</span>元素的第一行文本进行格式化，只能用于块级元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-letter</span> 对<span class=\"selector-tag\">p</span>元素的首字母设置特殊样式，只能用于块级元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:before</span> 在<span class=\"selector-tag\">p</span>元素的内容前面插入新内容,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:after</span>  在<span class=\"selector-tag\">p</span>元素的后面插入新内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"link-和-import-的区别\"><a href=\"#link-和-import-的区别\" class=\"headerlink\" title=\"link 和 @import 的区别\"></a>link 和 @import 的区别</h3><ol>\n<li>诞生的关系不同</li>\n</ol>\n<p><code>link</code> 是xhtml提供的标签，不仅可以加载css文件，还可以定义RSS,rel连接属性等等。 <code>@import</code> css提供的语法规则，只能导入样式表的作用，</p>\n<ol start=\"2\">\n<li>加载顺序不同</li>\n</ol>\n<p>加载页面时，<code>link</code>标签引入的css文件被同时加载. <code>@import</code>引入的css将在页面加载完成后执行加载。</p>\n<ol start=\"3\">\n<li>兼容性区别</li>\n</ol>\n<p><code>@import</code>是css2.1才有的语法，只能在ie5以上才能识别；<code>link</code>标签作为xhtml的元素，不存在兼容问题</p>\n<ol start=\"4\">\n<li>可操作Dom区别</li>\n</ol>\n<p>可以通过js 动态操作dom ， 插入<code>link</code> 标签来改变样式；由于dom方法是基于文档的，无法使用js操控<code>@import</code>的方式插入样式</p>\n<ol start=\"5\">\n<li><p>权重区别</p>\n<p>引入的样式权重大于<code>@import</code>引入的样式</p>\n</li>\n</ol>\n<p>CSS 权重优先级顺序简单表示为：</p>\n<p><code>!important</code> &gt; <code>行内样式</code> &gt; <code>ID</code> &gt; <code>类、伪类、属性</code> &gt; <code>标签名</code> &gt; <code>继承</code> &gt; <code>通配符</code></p>\n<p>最大   &gt;   1000   &gt;    100    &gt;     10    &gt;     1     &gt;     0</p>\n<p><code>@import</code> 的性能优于<code>link</code>,因为<code>@import</code>在页面加载完后才执行，所以在页面加载的同时不会去并行加载这个css文件，适合加载未来需要的文件。</p>\n<p><code>link</code> 在页面加载的同时就会同时加载，浏览器对并行下载有限制，适合 马上就需要加载的文件，并且要放置页面头部。</p>\n<h3 id=\"display-float-position-之间的关系\"><a href=\"#display-float-position-之间的关系\" class=\"headerlink\" title=\"display , float , position 之间的关系\"></a><code>display</code> , <code>float</code> , <code>position</code> 之间的关系</h3><p>当display：none的时候，就会忽略掉float和position的值，因为此时元素已经消失在渲染树中，元素不产生框</p>\n<p>否则，当position为absolute或fixed的时候，元素就是绝对定位，此时float的值为none。</p>\n<p>否则，当float不是none的时候，此时元素是浮动元素。</p>\n<p>否则，如果元素是根元素，，其它情况下display的值为指定值。</p>\n<p>总结来说，绝对定位，浮动，根元素都需要调整display</p>\n<p>而且，当元素设置了position：absolute或fixed，，或float不为none的时候，隐式的会将元素的display转为inline-block,即使指定了display除none之外的其它值的时候也是如此，而且也会将z-index增大为1.</p>\n<h3 id=\"如何创建块级格式化上下文-BFC有什么用？\"><a href=\"#如何创建块级格式化上下文-BFC有什么用？\" class=\"headerlink\" title=\"如何创建块级格式化上下文,BFC有什么用？\"></a>如何创建块级格式化上下文,BFC有什么用？</h3><p>如果创建：</p>\n<ul>\n<li><p>根元素</p>\n</li>\n<li><p>浮动元素 （float不为<code>none</code>）</p>\n</li>\n<li><p>绝对定位元素 （position取值为<code>absolute</code>或<code>fixed</code>）</p>\n</li>\n<li><p>元素display取值为<code>inline-block</code>,<code>inline-flex</code>,<code>flex</code>,<code>table-caption</code>,<code>table-cell</code>之一</p>\n</li>\n<li><p>overflow 除<code>visible</code>以外的元素</p>\n</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li><p>可以包含浮动元素</p>\n</li>\n<li><p>不被浮动元素覆盖</p>\n</li>\n<li><p>阻止父子元素<code>margin</code>值的折叠</p>\n</li>\n</ul>\n<h3 id=\"css的盒子模型\"><a href=\"#css的盒子模型\" class=\"headerlink\" title=\"css的盒子模型\"></a>css的盒子模型</h3><p>有两种盒子模型，<code>IE盒子模型</code> ， <code>W3C盒子模型</code>.</p>\n<p>盒子模型： <code>content</code>内容 ， <code>padding</code>内边距 ， <code>margin</code>外边距 ， <code>border</code>边框   组成</p>\n<p>区别在于 ： IE盒子模型： 高 或 宽 = content + padding + border</p>\n<h3 id=\"去除inline-block元素间的缝隙\"><a href=\"#去除inline-block元素间的缝隙\" class=\"headerlink\" title=\"去除inline-block元素间的缝隙\"></a>去除inline-block元素间的缝隙</h3><p>inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距（html中元素间空格，回车，html注释都会造成缝隙）</p>\n<ul>\n<li><p>使用margin负值，不过对于12像素大小的上下文，Arial字体的margin负值为-3像素，Tahoma和Verdana就是-4像素，而Geneva为-6像素</p>\n</li>\n<li><p>使用无闭合标签，（但是为了兼容ie6/7，最后一个列表的结束标签需要加上）</p>\n</li>\n<li><p>font-size:0</p>\n</li>\n<li><p>letter-spacing为负值，但是有些有浏览器最小间距1像素，在小就会还原了</p>\n</li>\n<li><p>word-spacing为负值</p>\n</li>\n<li><p>移除空格</p>\n</li>\n</ul>\n<h3 id=\"png，gif，jpeg的区别及如何选\"><a href=\"#png，gif，jpeg的区别及如何选\" class=\"headerlink\" title=\"png，gif，jpeg的区别及如何选\"></a>png，gif，jpeg的区别及如何选</h3><p><code>gif</code></p>\n<ul>\n<li><p>8位像素，256色</p>\n</li>\n<li><p>无损压缩</p>\n</li>\n<li><p>支持简单动画</p>\n</li>\n<li><p>支持boolean透明</p>\n</li>\n<li><p>适合简单动画</p>\n</li>\n<li><p>体积小</p>\n</li>\n</ul>\n<p><code>jpeg</code></p>\n<ul>\n<li><p>颜色限于256</p>\n</li>\n<li><p>有损压缩</p>\n</li>\n<li><p>可控制压缩质量</p>\n</li>\n<li><p>不支持透明</p>\n</li>\n<li><p>适合颜色丰富的照片</p>\n</li>\n<li><p>体积小</p>\n</li>\n<li><p>打开速度快</p>\n</li>\n</ul>\n<p><code>png</code></p>\n<ul>\n<li><p>有png8和truecolor png</p>\n</li>\n<li><p>png8类似gif颜色上限256，体积大，支持alpha透明度，无动画</p>\n</li>\n<li><p>适合图标，背景，按钮</p>\n</li>\n<li><p>压缩效率比bmp高，比jpeg低</p>\n</li>\n<li><p>无损压缩</p>\n</li>\n</ul>\n<p><code>jpeg / png / gif</code></p>\n<ul>\n<li><p>jpeg属于有损压缩，每次保存都会产生数据损失，不适合多次编辑保存，压缩过高图像会失真，模糊</p>\n</li>\n<li><p>png一般体积比同尺寸90%压缩率的jpeg大的多，但是人眼看起来差不多，适合小图标，透明背景，在IE6不支持，但是可以用js的hack</p>\n</li>\n<li><p>gif 色域不广，只有256中颜色，不适合做太复杂的动画，正在被goole的webm格式取代</p>\n</li>\n</ul>\n<p>参考文献：<a href=\"https://www.zhihu.com/question/20028452\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20028452</a><br>参考文献：<a href=\"http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\" target=\"_blank\" rel=\"noopener\">http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a><br>参考文献：<a href=\"https://juejin.im/entry/58c60601da2f605dc5a90282?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58c60601da2f605dc5a90282?from=groupmessage&amp;isappinstalled=0</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"css3新增的伪类\"><a href=\"#css3新增的伪类\" class=\"headerlink\" title=\"css3新增的伪类\"></a>css3新增的伪类</h3>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[class ^=val]</span> 属性值以<span class=\"selector-tag\">val</span>开头的<span class=\"selector-tag\">class</span>节点元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[class $=val]</span> 属性值以<span class=\"selector-tag\">val</span>结尾的<span class=\"selector-tag\">class</span>节点元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[class *=val]</span> 属性值包含了<span class=\"selector-tag\">val</span>的<span class=\"selector-tag\">class</span>节点元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-of-type</span>  在父元素的子元素中选择第一个<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:last-of-type</span>  在父元素的子元素中选择最后一个<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-of-type(n)</span>  在父元素的子元素中选择唯一的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-last-of-type(n)</span>  在父元素中的子元素中选择倒数的第<span class=\"selector-tag\">n</span>个<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:only-child</span> ：在父元素中选择只有一个子元素，并且一定要是<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:last-child</span>  在父元素中选择的最后一个子元素，并且一定要是<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\">p:nth-child(n || even || odd)  在父元素中选择第n个p元素 || 偶数 || 基数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-last-child(n)</span>  在父元素中选择倒数的第<span class=\"selector-tag\">n</span>个子元素，并且一定要是<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> 选择文本的根元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:empty</span>  选择没有子元素的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:enable</span>  选择每个未禁用的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:disable</span>  选择每个被禁用的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:checked</span>  选择每个被选中的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:target</span>  选择当前活动的<span class=\"selector-tag\">p</span>元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:not(p)</span> 选择不包括<span class=\"selector-tag\">p</span>元素的 每一个元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">::selection</span>  用户选取的部分</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:focus</span> 获得焦点的元素器</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-line</span> 对<span class=\"selector-tag\">p</span>元素的第一行文本进行格式化，只能用于块级元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:first-letter</span> 对<span class=\"selector-tag\">p</span>元素的首字母设置特殊样式，只能用于块级元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:before</span> 在<span class=\"selector-tag\">p</span>元素的内容前面插入新内容,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:after</span>  在<span class=\"selector-tag\">p</span>元素的后面插入新内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"link-和-import-的区别\"><a href=\"#link-和-import-的区别\" class=\"headerlink\" title=\"link 和 @import 的区别\"></a>link 和 @import 的区别</h3><ol>\n<li>诞生的关系不同</li>\n</ol>\n<p><code>link</code> 是xhtml提供的标签，不仅可以加载css文件，还可以定义RSS,rel连接属性等等。 <code>@import</code> css提供的语法规则，只能导入样式表的作用，</p>\n<ol start=\"2\">\n<li>加载顺序不同</li>\n</ol>\n<p>加载页面时，<code>link</code>标签引入的css文件被同时加载. <code>@import</code>引入的css将在页面加载完成后执行加载。</p>\n<ol start=\"3\">\n<li>兼容性区别</li>\n</ol>\n<p><code>@import</code>是css2.1才有的语法，只能在ie5以上才能识别；<code>link</code>标签作为xhtml的元素，不存在兼容问题</p>\n<ol start=\"4\">\n<li>可操作Dom区别</li>\n</ol>\n<p>可以通过js 动态操作dom ， 插入<code>link</code> 标签来改变样式；由于dom方法是基于文档的，无法使用js操控<code>@import</code>的方式插入样式</p>\n<ol start=\"5\">\n<li><p>权重区别</p>\n<p>引入的样式权重大于<code>@import</code>引入的样式</p>\n</li>\n</ol>\n<p>CSS 权重优先级顺序简单表示为：</p>\n<p><code>!important</code> &gt; <code>行内样式</code> &gt; <code>ID</code> &gt; <code>类、伪类、属性</code> &gt; <code>标签名</code> &gt; <code>继承</code> &gt; <code>通配符</code></p>\n<p>最大   &gt;   1000   &gt;    100    &gt;     10    &gt;     1     &gt;     0</p>\n<p><code>@import</code> 的性能优于<code>link</code>,因为<code>@import</code>在页面加载完后才执行，所以在页面加载的同时不会去并行加载这个css文件，适合加载未来需要的文件。</p>\n<p><code>link</code> 在页面加载的同时就会同时加载，浏览器对并行下载有限制，适合 马上就需要加载的文件，并且要放置页面头部。</p>\n<h3 id=\"display-float-position-之间的关系\"><a href=\"#display-float-position-之间的关系\" class=\"headerlink\" title=\"display , float , position 之间的关系\"></a><code>display</code> , <code>float</code> , <code>position</code> 之间的关系</h3><p>当display：none的时候，就会忽略掉float和position的值，因为此时元素已经消失在渲染树中，元素不产生框</p>\n<p>否则，当position为absolute或fixed的时候，元素就是绝对定位，此时float的值为none。</p>\n<p>否则，当float不是none的时候，此时元素是浮动元素。</p>\n<p>否则，如果元素是根元素，，其它情况下display的值为指定值。</p>\n<p>总结来说，绝对定位，浮动，根元素都需要调整display</p>\n<p>而且，当元素设置了position：absolute或fixed，，或float不为none的时候，隐式的会将元素的display转为inline-block,即使指定了display除none之外的其它值的时候也是如此，而且也会将z-index增大为1.</p>\n<h3 id=\"如何创建块级格式化上下文-BFC有什么用？\"><a href=\"#如何创建块级格式化上下文-BFC有什么用？\" class=\"headerlink\" title=\"如何创建块级格式化上下文,BFC有什么用？\"></a>如何创建块级格式化上下文,BFC有什么用？</h3><p>如果创建：</p>\n<ul>\n<li><p>根元素</p>\n</li>\n<li><p>浮动元素 （float不为<code>none</code>）</p>\n</li>\n<li><p>绝对定位元素 （position取值为<code>absolute</code>或<code>fixed</code>）</p>\n</li>\n<li><p>元素display取值为<code>inline-block</code>,<code>inline-flex</code>,<code>flex</code>,<code>table-caption</code>,<code>table-cell</code>之一</p>\n</li>\n<li><p>overflow 除<code>visible</code>以外的元素</p>\n</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li><p>可以包含浮动元素</p>\n</li>\n<li><p>不被浮动元素覆盖</p>\n</li>\n<li><p>阻止父子元素<code>margin</code>值的折叠</p>\n</li>\n</ul>\n<h3 id=\"css的盒子模型\"><a href=\"#css的盒子模型\" class=\"headerlink\" title=\"css的盒子模型\"></a>css的盒子模型</h3><p>有两种盒子模型，<code>IE盒子模型</code> ， <code>W3C盒子模型</code>.</p>\n<p>盒子模型： <code>content</code>内容 ， <code>padding</code>内边距 ， <code>margin</code>外边距 ， <code>border</code>边框   组成</p>\n<p>区别在于 ： IE盒子模型： 高 或 宽 = content + padding + border</p>\n<h3 id=\"去除inline-block元素间的缝隙\"><a href=\"#去除inline-block元素间的缝隙\" class=\"headerlink\" title=\"去除inline-block元素间的缝隙\"></a>去除inline-block元素间的缝隙</h3><p>inline-block水平呈现的元素间，换行显示或空格分隔的情况下会有间距（html中元素间空格，回车，html注释都会造成缝隙）</p>\n<ul>\n<li><p>使用margin负值，不过对于12像素大小的上下文，Arial字体的margin负值为-3像素，Tahoma和Verdana就是-4像素，而Geneva为-6像素</p>\n</li>\n<li><p>使用无闭合标签，（但是为了兼容ie6/7，最后一个列表的结束标签需要加上）</p>\n</li>\n<li><p>font-size:0</p>\n</li>\n<li><p>letter-spacing为负值，但是有些有浏览器最小间距1像素，在小就会还原了</p>\n</li>\n<li><p>word-spacing为负值</p>\n</li>\n<li><p>移除空格</p>\n</li>\n</ul>\n<h3 id=\"png，gif，jpeg的区别及如何选\"><a href=\"#png，gif，jpeg的区别及如何选\" class=\"headerlink\" title=\"png，gif，jpeg的区别及如何选\"></a>png，gif，jpeg的区别及如何选</h3><p><code>gif</code></p>\n<ul>\n<li><p>8位像素，256色</p>\n</li>\n<li><p>无损压缩</p>\n</li>\n<li><p>支持简单动画</p>\n</li>\n<li><p>支持boolean透明</p>\n</li>\n<li><p>适合简单动画</p>\n</li>\n<li><p>体积小</p>\n</li>\n</ul>\n<p><code>jpeg</code></p>\n<ul>\n<li><p>颜色限于256</p>\n</li>\n<li><p>有损压缩</p>\n</li>\n<li><p>可控制压缩质量</p>\n</li>\n<li><p>不支持透明</p>\n</li>\n<li><p>适合颜色丰富的照片</p>\n</li>\n<li><p>体积小</p>\n</li>\n<li><p>打开速度快</p>\n</li>\n</ul>\n<p><code>png</code></p>\n<ul>\n<li><p>有png8和truecolor png</p>\n</li>\n<li><p>png8类似gif颜色上限256，体积大，支持alpha透明度，无动画</p>\n</li>\n<li><p>适合图标，背景，按钮</p>\n</li>\n<li><p>压缩效率比bmp高，比jpeg低</p>\n</li>\n<li><p>无损压缩</p>\n</li>\n</ul>\n<p><code>jpeg / png / gif</code></p>\n<ul>\n<li><p>jpeg属于有损压缩，每次保存都会产生数据损失，不适合多次编辑保存，压缩过高图像会失真，模糊</p>\n</li>\n<li><p>png一般体积比同尺寸90%压缩率的jpeg大的多，但是人眼看起来差不多，适合小图标，透明背景，在IE6不支持，但是可以用js的hack</p>\n</li>\n<li><p>gif 色域不广，只有256中颜色，不适合做太复杂的动画，正在被goole的webm格式取代</p>\n</li>\n</ul>\n<p>参考文献：<a href=\"https://www.zhihu.com/question/20028452\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/20028452</a><br>参考文献：<a href=\"http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\" target=\"_blank\" rel=\"noopener\">http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a><br>参考文献：<a href=\"https://juejin.im/entry/58c60601da2f605dc5a90282?from=groupmessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/entry/58c60601da2f605dc5a90282?from=groupmessage&amp;isappinstalled=0</a></p>"},{"title":"js复习手记四","date":"2018-02-04T07:56:16.000Z","_content":"\n### 闭包 会持有父方法的局部变量并且不会随着父方法的销毁而销毁,闭包就\n\n是在提供了一个在外部访问另一个函数内部局部变量的方式。\n<!-- more -->\n\n```js\n// 不使用闭包\nfunction add(){\n    var cont = 0;\n    return cont += 1;\n}\nadd()\nadd()\nadd()\n// 1\n// 1\n// 1\n\n// 闭包\nvar tin;\nvar add = function(){\n    var cont = 0;\n    tin = function(){return cont += 1;};\n    return tin\n}();\n\nadd()\nadd()\nadd()\n// 1\n// 2\n// 3\n```\n\n### Element.matches() 如果元素包含指定的选择器字符串，存在返回true，\n\n不存在则返回false\n\n#### 目前在非标准名称 `matchesSelector()` 实现了这个方法，并且不同浏览\n\n器使用前需要前缀。\n\n- el.matchesSelector( DOMElement element, String selector )\n\n```js\n<div class=\"main\"></div>\n\n....\n// chrome 下\nvar body = document.querySelector('.main')\nvar ifAtt = body.webkitMatchesSelector('.main')\nconsole.log(ifAtt)\n// true\n```\n\n为了方便兼容IE8+既低版本的浏览器使用，可以重写matchesSelector方法\n\n```js\nif (!Element.prototype.matchesSelector) {\n    Element.prototype.matchesSelector = \n    Element.prototype.matchesSelector || \n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector || \n    Element.prototype.oMatchesSelector || \n    Element.prototype.webkitMatchesSelector ||\n    (function(){\n            var matches = (this.document || this.ownerDocument).querySelectorAll\n\n(s),\n            i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return !!i;\n     }\n    )();\n}\n\n\nvar body = document.querySelector('.main')\nvar ifAtt = body.matchesSelector('.main')\nconsole.log(ifAtt)\n```\n\n需要注意的是：如果指定的选择器是数字开头的则会报错，如\n\nclass=\"1mian\",id=\"1main\"\n\n参考文献：https://www.lyblog.net/detail/601.html  ,   \n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches\n\n\n### getComputedStyle和currentStyle\n\nelement.style 获取的是内联样式或设置样式 , 如果获取指定的属性名  style中\n\n不存在则返回空\n\nelement.currentStyle 这是ie专有的属性，只在ie下支持，在获取未设置的属性\n\n值时,currentStyle会读取浏览器的默认值\n\ndocument.defaultView.getComputedStyle(element,null) ie6~ie8是不支持的，\n\n获取属性和currentStyle类似\n\n```js\n<div style=\"height:100px\"></div>\n\n// js\nvar div = document.querySelector('div')\ndiv.style.height\n// \"100px\"\ndiv.style.width\n// \"\"\n\n\ndiv.currentStyle['height']\n// \"100px\"\ndiv.currentStyle['width']\n// \"0px\"\n\ndocument.defaultView.getComputedStyle(div,null).height\n// \"100px\"\ndocument.defaultView.getComputedStyle(div,null).backgroundColor\n// \"rgba(0, 0, 0, 0)\",js中属性名是需要驼峰写法\ndocument.defaultView.getComputedStyle(div,null)['background-color']\n// \"rgba(0, 0, 0, 0)\"，数组中字符串可以不用驼峰写法\n\n\n// 兼容写法\nElement.prototype.getComputedStyle = function(x){\n    return getComputedStyle(this)[x] || this.currentStyle[x] || this.style[x]\n}\ndiv.getComputedStyle('height')\n// \"100px\"\n```\n\n\n### CSS 实现水平垂直居中\n```html\n<div class=\"wrapper\">\n    <div class=\"slide\">1</div>\n</div>\n```\n\n##### 1.position+auto\n```css\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width:50px;height:50px;\n    position:absolute;top:0;left:0;right:0;bottom:0;margin:auto;\n    background:#ff0000;\n}\n```\n\n这个居中方案比较简单常用，IE8及以上支持\n但是有一点需要注意：宽度和高度不能是auto，否则高宽会继承 限制他的元素（relative）;下一个方案解决这问题：\n\n##### 2. table-cell\n```css\n.wrapper{\n    width:100px;height:100px;\n    display:table-cell;/* 让 vertical-align: middle; 生效 */\n    background:#ddd;vertical-align: middle;\n    text-align: center;\n}\n\n.slide{\n    display:inline-block;\n    vertical-align:middle;\n    background:#ff0000;\n}\n```\n\n这个方案可以解决上一个需要设置高宽的问题，IE8及以上支持。这里除了给父父元素一个vertical-align: middle;之外，我们还需要给需要水平垂直居中的元素也添加vertical-align: middle;属性。如果不添加，那么在垂直方向上会有几个像素的误差。\n\n##### 3.position+margin/absolute/translate\n\n```css\n// 形式一\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width: 50px;\n    height: 50px;\n    background: #ff0000;\n    position: absolute;\n    top: 50px;\n    left: 50px;\n    margin-top:-25px;margin-left:-25px;\n}\n\n\n\n// 形式二\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width: 50px;\n    height: 50px;\n    background: #ff0000;\n    position: absolute;\n    top:25px;left:25px;\n}\n\n\n\n// 形式三\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width: 50px;\n    height: 50px;\n    background: #ff0000;\n    position: absolute;\n    top: 50px;\n    left: 50px;\n    transform: translate(-50%,-50%);\n}\n```\n前两个都差不多，需要自己计算数值并且需要设置宽高，IE5及以上支持推荐使用第三个方案，利用translate按自身的高宽百分比移动，达到居中效果,IE9及以上支持\n\n##### 4.Flex\n```css\n.wrapper{\n    width:100px;height:100px;\n    background:#ddd;display:flex;\n    align-items: center; /* 垂直居中 */\n    justify-content: center;/* 水平居中 */\n}\n\n.slide{\n    background: #ff0000;\n}\n```\n不需要设置元素高宽，且简单，就可以达到居中效果，但是….IE10及以上才支持。移动端兼容良好，推荐在移动端使用\n\n##### 5.Flex+margin\n\n```css\n.wrapper{\n    width:100px;height:100px;\n    background:#ddd;display:flex;\n}\n\n.slide{\n    background: #ff0000;margin:auto;\n}\n```\n兼容性：IE10及以上 ,这种方法跟第4种方法比较起来代码也更加简洁。\n\n##### 网上终极法\n\n```css\n.demo-wrap{height: 200px;\n    width: 200px;\n    display: table;\n    position: relative;\n    background: #eee;\n}\n.demo-center{\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n   *position: absolute;\n   *top: 50%;\n   *left: 50%;\n}\n.center{\n    background: #ccc;\n    display: inline-block;\n   *position:relative;\n   *top: -50%;\n   *left: -50%;\n }\n```\n参考：https://juejin.im/post/58f818bbb123db006233ab2a\nhttps://segmentfault.com/a/1190000011942746?_ea=2818653","source":"_posts/js复习手记四.md","raw":"---\ntitle: js复习手记四\ndate: 2018-02-04 15:56:16\ntags: 主页\n---\n\n### 闭包 会持有父方法的局部变量并且不会随着父方法的销毁而销毁,闭包就\n\n是在提供了一个在外部访问另一个函数内部局部变量的方式。\n<!-- more -->\n\n```js\n// 不使用闭包\nfunction add(){\n    var cont = 0;\n    return cont += 1;\n}\nadd()\nadd()\nadd()\n// 1\n// 1\n// 1\n\n// 闭包\nvar tin;\nvar add = function(){\n    var cont = 0;\n    tin = function(){return cont += 1;};\n    return tin\n}();\n\nadd()\nadd()\nadd()\n// 1\n// 2\n// 3\n```\n\n### Element.matches() 如果元素包含指定的选择器字符串，存在返回true，\n\n不存在则返回false\n\n#### 目前在非标准名称 `matchesSelector()` 实现了这个方法，并且不同浏览\n\n器使用前需要前缀。\n\n- el.matchesSelector( DOMElement element, String selector )\n\n```js\n<div class=\"main\"></div>\n\n....\n// chrome 下\nvar body = document.querySelector('.main')\nvar ifAtt = body.webkitMatchesSelector('.main')\nconsole.log(ifAtt)\n// true\n```\n\n为了方便兼容IE8+既低版本的浏览器使用，可以重写matchesSelector方法\n\n```js\nif (!Element.prototype.matchesSelector) {\n    Element.prototype.matchesSelector = \n    Element.prototype.matchesSelector || \n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector || \n    Element.prototype.oMatchesSelector || \n    Element.prototype.webkitMatchesSelector ||\n    (function(){\n            var matches = (this.document || this.ownerDocument).querySelectorAll\n\n(s),\n            i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return !!i;\n     }\n    )();\n}\n\n\nvar body = document.querySelector('.main')\nvar ifAtt = body.matchesSelector('.main')\nconsole.log(ifAtt)\n```\n\n需要注意的是：如果指定的选择器是数字开头的则会报错，如\n\nclass=\"1mian\",id=\"1main\"\n\n参考文献：https://www.lyblog.net/detail/601.html  ,   \n\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches\n\n\n### getComputedStyle和currentStyle\n\nelement.style 获取的是内联样式或设置样式 , 如果获取指定的属性名  style中\n\n不存在则返回空\n\nelement.currentStyle 这是ie专有的属性，只在ie下支持，在获取未设置的属性\n\n值时,currentStyle会读取浏览器的默认值\n\ndocument.defaultView.getComputedStyle(element,null) ie6~ie8是不支持的，\n\n获取属性和currentStyle类似\n\n```js\n<div style=\"height:100px\"></div>\n\n// js\nvar div = document.querySelector('div')\ndiv.style.height\n// \"100px\"\ndiv.style.width\n// \"\"\n\n\ndiv.currentStyle['height']\n// \"100px\"\ndiv.currentStyle['width']\n// \"0px\"\n\ndocument.defaultView.getComputedStyle(div,null).height\n// \"100px\"\ndocument.defaultView.getComputedStyle(div,null).backgroundColor\n// \"rgba(0, 0, 0, 0)\",js中属性名是需要驼峰写法\ndocument.defaultView.getComputedStyle(div,null)['background-color']\n// \"rgba(0, 0, 0, 0)\"，数组中字符串可以不用驼峰写法\n\n\n// 兼容写法\nElement.prototype.getComputedStyle = function(x){\n    return getComputedStyle(this)[x] || this.currentStyle[x] || this.style[x]\n}\ndiv.getComputedStyle('height')\n// \"100px\"\n```\n\n\n### CSS 实现水平垂直居中\n```html\n<div class=\"wrapper\">\n    <div class=\"slide\">1</div>\n</div>\n```\n\n##### 1.position+auto\n```css\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width:50px;height:50px;\n    position:absolute;top:0;left:0;right:0;bottom:0;margin:auto;\n    background:#ff0000;\n}\n```\n\n这个居中方案比较简单常用，IE8及以上支持\n但是有一点需要注意：宽度和高度不能是auto，否则高宽会继承 限制他的元素（relative）;下一个方案解决这问题：\n\n##### 2. table-cell\n```css\n.wrapper{\n    width:100px;height:100px;\n    display:table-cell;/* 让 vertical-align: middle; 生效 */\n    background:#ddd;vertical-align: middle;\n    text-align: center;\n}\n\n.slide{\n    display:inline-block;\n    vertical-align:middle;\n    background:#ff0000;\n}\n```\n\n这个方案可以解决上一个需要设置高宽的问题，IE8及以上支持。这里除了给父父元素一个vertical-align: middle;之外，我们还需要给需要水平垂直居中的元素也添加vertical-align: middle;属性。如果不添加，那么在垂直方向上会有几个像素的误差。\n\n##### 3.position+margin/absolute/translate\n\n```css\n// 形式一\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width: 50px;\n    height: 50px;\n    background: #ff0000;\n    position: absolute;\n    top: 50px;\n    left: 50px;\n    margin-top:-25px;margin-left:-25px;\n}\n\n\n\n// 形式二\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width: 50px;\n    height: 50px;\n    background: #ff0000;\n    position: absolute;\n    top:25px;left:25px;\n}\n\n\n\n// 形式三\n.wrapper{\n    width:100px;height:100px;\n    position:relative;background:#ddd;\n}\n\n.slide{\n    width: 50px;\n    height: 50px;\n    background: #ff0000;\n    position: absolute;\n    top: 50px;\n    left: 50px;\n    transform: translate(-50%,-50%);\n}\n```\n前两个都差不多，需要自己计算数值并且需要设置宽高，IE5及以上支持推荐使用第三个方案，利用translate按自身的高宽百分比移动，达到居中效果,IE9及以上支持\n\n##### 4.Flex\n```css\n.wrapper{\n    width:100px;height:100px;\n    background:#ddd;display:flex;\n    align-items: center; /* 垂直居中 */\n    justify-content: center;/* 水平居中 */\n}\n\n.slide{\n    background: #ff0000;\n}\n```\n不需要设置元素高宽，且简单，就可以达到居中效果，但是….IE10及以上才支持。移动端兼容良好，推荐在移动端使用\n\n##### 5.Flex+margin\n\n```css\n.wrapper{\n    width:100px;height:100px;\n    background:#ddd;display:flex;\n}\n\n.slide{\n    background: #ff0000;margin:auto;\n}\n```\n兼容性：IE10及以上 ,这种方法跟第4种方法比较起来代码也更加简洁。\n\n##### 网上终极法\n\n```css\n.demo-wrap{height: 200px;\n    width: 200px;\n    display: table;\n    position: relative;\n    background: #eee;\n}\n.demo-center{\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n   *position: absolute;\n   *top: 50%;\n   *left: 50%;\n}\n.center{\n    background: #ccc;\n    display: inline-block;\n   *position:relative;\n   *top: -50%;\n   *left: -50%;\n }\n```\n参考：https://juejin.im/post/58f818bbb123db006233ab2a\nhttps://segmentfault.com/a/1190000011942746?_ea=2818653","slug":"js复习手记四","published":1,"updated":"2018-04-24T14:27:38.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb605x000ea4vbfx8fg1c6","content":"<h3 id=\"闭包-会持有父方法的局部变量并且不会随着父方法的销毁而销毁-闭包就\"><a href=\"#闭包-会持有父方法的局部变量并且不会随着父方法的销毁而销毁-闭包就\" class=\"headerlink\" title=\"闭包 会持有父方法的局部变量并且不会随着父方法的销毁而销毁,闭包就\"></a>闭包 会持有父方法的局部变量并且不会随着父方法的销毁而销毁,闭包就</h3><p>是在提供了一个在外部访问另一个函数内部局部变量的方式。<br><a id=\"more\"></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用闭包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cont = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cont += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tin;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cont = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> cont += <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tin</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Element-matches-如果元素包含指定的选择器字符串，存在返回true，\"><a href=\"#Element-matches-如果元素包含指定的选择器字符串，存在返回true，\" class=\"headerlink\" title=\"Element.matches() 如果元素包含指定的选择器字符串，存在返回true，\"></a>Element.matches() 如果元素包含指定的选择器字符串，存在返回true，</h3><p>不存在则返回false</p>\n<h4 id=\"目前在非标准名称-matchesSelector-实现了这个方法，并且不同浏览\"><a href=\"#目前在非标准名称-matchesSelector-实现了这个方法，并且不同浏览\" class=\"headerlink\" title=\"目前在非标准名称 matchesSelector() 实现了这个方法，并且不同浏览\"></a>目前在非标准名称 <code>matchesSelector()</code> 实现了这个方法，并且不同浏览</h4><p>器使用前需要前缀。</p>\n<ul>\n<li>el.matchesSelector( DOMElement element, String selector )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"main\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"comment\">// chrome 下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> ifAtt = body.webkitMatchesSelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ifAtt)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>为了方便兼容IE8+既低版本的浏览器使用，可以重写matchesSelector方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!Element.prototype.matchesSelector) &#123;</span><br><span class=\"line\">    Element.prototype.matchesSelector = </span><br><span class=\"line\">    Element.prototype.matchesSelector || </span><br><span class=\"line\">    Element.prototype.mozMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.msMatchesSelector || </span><br><span class=\"line\">    Element.prototype.oMatchesSelector || </span><br><span class=\"line\">    Element.prototype.webkitMatchesSelector ||</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> matches = (<span class=\"keyword\">this</span>.document || <span class=\"keyword\">this</span>.ownerDocument).querySelectorAll</span><br><span class=\"line\"></span><br><span class=\"line\">(s),</span><br><span class=\"line\">            i = matches.length;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (--i &gt;= <span class=\"number\">0</span> &amp;&amp; matches.item(i) !== <span class=\"keyword\">this</span>) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !!i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    )();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> ifAtt = body.matchesSelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ifAtt)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是：如果指定的选择器是数字开头的则会报错，如</p>\n<p>class=”1mian”,id=”1main”</p>\n<p>参考文献：<a href=\"https://www.lyblog.net/detail/601.html\" target=\"_blank\" rel=\"noopener\">https://www.lyblog.net/detail/601.html</a>  ,   </p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches</a></p>\n<h3 id=\"getComputedStyle和currentStyle\"><a href=\"#getComputedStyle和currentStyle\" class=\"headerlink\" title=\"getComputedStyle和currentStyle\"></a>getComputedStyle和currentStyle</h3><p>element.style 获取的是内联样式或设置样式 , 如果获取指定的属性名  style中</p>\n<p>不存在则返回空</p>\n<p>element.currentStyle 这是ie专有的属性，只在ie下支持，在获取未设置的属性</p>\n<p>值时,currentStyle会读取浏览器的默认值</p>\n<p>document.defaultView.getComputedStyle(element,null) ie6~ie8是不支持的，</p>\n<p>获取属性和currentStyle类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"height:100px\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">div.style.height</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br><span class=\"line\">div.style.width</span><br><span class=\"line\"><span class=\"comment\">// \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">div.currentStyle[<span class=\"string\">'height'</span>]</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br><span class=\"line\">div.currentStyle[<span class=\"string\">'width'</span>]</span><br><span class=\"line\"><span class=\"comment\">// \"0px\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.defaultView.getComputedStyle(div,<span class=\"literal\">null</span>).height</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.defaultView.getComputedStyle(div,<span class=\"literal\">null</span>).backgroundColor</span><br><span class=\"line\"><span class=\"comment\">// \"rgba(0, 0, 0, 0)\",js中属性名是需要驼峰写法</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.defaultView.getComputedStyle(div,<span class=\"literal\">null</span>)[<span class=\"string\">'background-color'</span>]</span><br><span class=\"line\"><span class=\"comment\">// \"rgba(0, 0, 0, 0)\"，数组中字符串可以不用驼峰写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容写法</span></span><br><span class=\"line\">Element.prototype.getComputedStyle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getComputedStyle(<span class=\"keyword\">this</span>)[x] || <span class=\"keyword\">this</span>.currentStyle[x] || <span class=\"keyword\">this</span>.style[x]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.getComputedStyle(<span class=\"string\">'height'</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS-实现水平垂直居中\"><a href=\"#CSS-实现水平垂直居中\" class=\"headerlink\" title=\"CSS 实现水平垂直居中\"></a>CSS 实现水平垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-position-auto\"><a href=\"#1-position-auto\" class=\"headerlink\" title=\"1.position+auto\"></a>1.position+auto</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;<span class=\"attribute\">right</span>:<span class=\"number\">0</span>;<span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个居中方案比较简单常用，IE8及以上支持<br>但是有一点需要注意：宽度和高度不能是auto，否则高宽会继承 限制他的元素（relative）;下一个方案解决这问题：</p>\n<h5 id=\"2-table-cell\"><a href=\"#2-table-cell\" class=\"headerlink\" title=\"2. table-cell\"></a>2. table-cell</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table-cell;<span class=\"comment\">/* 让 vertical-align: middle; 生效 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方案可以解决上一个需要设置高宽的问题，IE8及以上支持。这里除了给父父元素一个vertical-align: middle;之外，我们还需要给需要水平垂直居中的元素也添加vertical-align: middle;属性。如果不添加，那么在垂直方向上会有几个像素的误差。</p>\n<h5 id=\"3-position-margin-absolute-translate\"><a href=\"#3-position-margin-absolute-translate\" class=\"headerlink\" title=\"3.position+margin/absolute/translate\"></a>3.position+margin/absolute/translate</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 形式一</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">25px</span>;<span class=\"attribute\">margin-left</span>:-<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 形式二</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">25px</span>;<span class=\"attribute\">left</span>:<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 形式三</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前两个都差不多，需要自己计算数值并且需要设置宽高，IE5及以上支持推荐使用第三个方案，利用translate按自身的高宽百分比移动，达到居中效果,IE9及以上支持</p>\n<h5 id=\"4-Flex\"><a href=\"#4-Flex\" class=\"headerlink\" title=\"4.Flex\"></a>4.Flex</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;<span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center; <span class=\"comment\">/* 垂直居中 */</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;<span class=\"comment\">/* 水平居中 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不需要设置元素高宽，且简单，就可以达到居中效果，但是….IE10及以上才支持。移动端兼容良好，推荐在移动端使用</p>\n<h5 id=\"5-Flex-margin\"><a href=\"#5-Flex-margin\" class=\"headerlink\" title=\"5.Flex+margin\"></a>5.Flex+margin</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;<span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兼容性：IE10及以上 ,这种方法跟第4种方法比较起来代码也更加简洁。</p>\n<h5 id=\"网上终极法\"><a href=\"#网上终极法\" class=\"headerlink\" title=\"网上终极法\"></a>网上终极法</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo-wrap</span>&#123;<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo-center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">   *position: absolute;</span><br><span class=\"line\">   *<span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\">   *<span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">   *position:relative;</span><br><span class=\"line\">   *<span class=\"selector-tag\">top</span>: <span class=\"selector-tag\">-50</span>%;</span><br><span class=\"line\">   *<span class=\"selector-tag\">left</span>: <span class=\"selector-tag\">-50</span>%;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://juejin.im/post/58f818bbb123db006233ab2a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58f818bbb123db006233ab2a</a><br><a href=\"https://segmentfault.com/a/1190000011942746?_ea=2818653\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011942746?_ea=2818653</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"闭包-会持有父方法的局部变量并且不会随着父方法的销毁而销毁-闭包就\"><a href=\"#闭包-会持有父方法的局部变量并且不会随着父方法的销毁而销毁-闭包就\" class=\"headerlink\" title=\"闭包 会持有父方法的局部变量并且不会随着父方法的销毁而销毁,闭包就\"></a>闭包 会持有父方法的局部变量并且不会随着父方法的销毁而销毁,闭包就</h3><p>是在提供了一个在外部访问另一个函数内部局部变量的方式。<br>","more":"</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不使用闭包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cont = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cont += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tin;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cont = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> cont += <span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tin</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\">add()</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Element-matches-如果元素包含指定的选择器字符串，存在返回true，\"><a href=\"#Element-matches-如果元素包含指定的选择器字符串，存在返回true，\" class=\"headerlink\" title=\"Element.matches() 如果元素包含指定的选择器字符串，存在返回true，\"></a>Element.matches() 如果元素包含指定的选择器字符串，存在返回true，</h3><p>不存在则返回false</p>\n<h4 id=\"目前在非标准名称-matchesSelector-实现了这个方法，并且不同浏览\"><a href=\"#目前在非标准名称-matchesSelector-实现了这个方法，并且不同浏览\" class=\"headerlink\" title=\"目前在非标准名称 matchesSelector() 实现了这个方法，并且不同浏览\"></a>目前在非标准名称 <code>matchesSelector()</code> 实现了这个方法，并且不同浏览</h4><p>器使用前需要前缀。</p>\n<ul>\n<li>el.matchesSelector( DOMElement element, String selector )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"main\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"comment\">// chrome 下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> ifAtt = body.webkitMatchesSelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ifAtt)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>为了方便兼容IE8+既低版本的浏览器使用，可以重写matchesSelector方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!Element.prototype.matchesSelector) &#123;</span><br><span class=\"line\">    Element.prototype.matchesSelector = </span><br><span class=\"line\">    Element.prototype.matchesSelector || </span><br><span class=\"line\">    Element.prototype.mozMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.msMatchesSelector || </span><br><span class=\"line\">    Element.prototype.oMatchesSelector || </span><br><span class=\"line\">    Element.prototype.webkitMatchesSelector ||</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> matches = (<span class=\"keyword\">this</span>.document || <span class=\"keyword\">this</span>.ownerDocument).querySelectorAll</span><br><span class=\"line\"></span><br><span class=\"line\">(s),</span><br><span class=\"line\">            i = matches.length;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (--i &gt;= <span class=\"number\">0</span> &amp;&amp; matches.item(i) !== <span class=\"keyword\">this</span>) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !!i;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    )();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> ifAtt = body.matchesSelector(<span class=\"string\">'.main'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ifAtt)</span><br></pre></td></tr></table></figure>\n<p>需要注意的是：如果指定的选择器是数字开头的则会报错，如</p>\n<p>class=”1mian”,id=”1main”</p>\n<p>参考文献：<a href=\"https://www.lyblog.net/detail/601.html\" target=\"_blank\" rel=\"noopener\">https://www.lyblog.net/detail/601.html</a>  ,   </p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/matches</a></p>\n<h3 id=\"getComputedStyle和currentStyle\"><a href=\"#getComputedStyle和currentStyle\" class=\"headerlink\" title=\"getComputedStyle和currentStyle\"></a>getComputedStyle和currentStyle</h3><p>element.style 获取的是内联样式或设置样式 , 如果获取指定的属性名  style中</p>\n<p>不存在则返回空</p>\n<p>element.currentStyle 这是ie专有的属性，只在ie下支持，在获取未设置的属性</p>\n<p>值时,currentStyle会读取浏览器的默认值</p>\n<p>document.defaultView.getComputedStyle(element,null) ie6~ie8是不支持的，</p>\n<p>获取属性和currentStyle类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div style=<span class=\"string\">\"height:100px\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">div.style.height</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br><span class=\"line\">div.style.width</span><br><span class=\"line\"><span class=\"comment\">// \"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">div.currentStyle[<span class=\"string\">'height'</span>]</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br><span class=\"line\">div.currentStyle[<span class=\"string\">'width'</span>]</span><br><span class=\"line\"><span class=\"comment\">// \"0px\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.defaultView.getComputedStyle(div,<span class=\"literal\">null</span>).height</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.defaultView.getComputedStyle(div,<span class=\"literal\">null</span>).backgroundColor</span><br><span class=\"line\"><span class=\"comment\">// \"rgba(0, 0, 0, 0)\",js中属性名是需要驼峰写法</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.defaultView.getComputedStyle(div,<span class=\"literal\">null</span>)[<span class=\"string\">'background-color'</span>]</span><br><span class=\"line\"><span class=\"comment\">// \"rgba(0, 0, 0, 0)\"，数组中字符串可以不用驼峰写法</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 兼容写法</span></span><br><span class=\"line\">Element.prototype.getComputedStyle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getComputedStyle(<span class=\"keyword\">this</span>)[x] || <span class=\"keyword\">this</span>.currentStyle[x] || <span class=\"keyword\">this</span>.style[x]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div.getComputedStyle(<span class=\"string\">'height'</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"100px\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"CSS-实现水平垂直居中\"><a href=\"#CSS-实现水平垂直居中\" class=\"headerlink\" title=\"CSS 实现水平垂直居中\"></a>CSS 实现水平垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-position-auto\"><a href=\"#1-position-auto\" class=\"headerlink\" title=\"1.position+auto\"></a>1.position+auto</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">50px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;<span class=\"attribute\">top</span>:<span class=\"number\">0</span>;<span class=\"attribute\">left</span>:<span class=\"number\">0</span>;<span class=\"attribute\">right</span>:<span class=\"number\">0</span>;<span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个居中方案比较简单常用，IE8及以上支持<br>但是有一点需要注意：宽度和高度不能是auto，否则高宽会继承 限制他的元素（relative）;下一个方案解决这问题：</p>\n<h5 id=\"2-table-cell\"><a href=\"#2-table-cell\" class=\"headerlink\" title=\"2. table-cell\"></a>2. table-cell</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:table-cell;<span class=\"comment\">/* 让 vertical-align: middle; 生效 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方案可以解决上一个需要设置高宽的问题，IE8及以上支持。这里除了给父父元素一个vertical-align: middle;之外，我们还需要给需要水平垂直居中的元素也添加vertical-align: middle;属性。如果不添加，那么在垂直方向上会有几个像素的误差。</p>\n<h5 id=\"3-position-margin-absolute-translate\"><a href=\"#3-position-margin-absolute-translate\" class=\"headerlink\" title=\"3.position+margin/absolute/translate\"></a>3.position+margin/absolute/translate</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 形式一</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">25px</span>;<span class=\"attribute\">margin-left</span>:-<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 形式二</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">25px</span>;<span class=\"attribute\">left</span>:<span class=\"number\">25px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 形式三</span><br><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:relative;<span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%,-50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前两个都差不多，需要自己计算数值并且需要设置宽高，IE5及以上支持推荐使用第三个方案，利用translate按自身的高宽百分比移动，达到居中效果,IE9及以上支持</p>\n<h5 id=\"4-Flex\"><a href=\"#4-Flex\" class=\"headerlink\" title=\"4.Flex\"></a>4.Flex</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;<span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center; <span class=\"comment\">/* 垂直居中 */</span></span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;<span class=\"comment\">/* 水平居中 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不需要设置元素高宽，且简单，就可以达到居中效果，但是….IE10及以上才支持。移动端兼容良好，推荐在移动端使用</p>\n<h5 id=\"5-Flex-margin\"><a href=\"#5-Flex-margin\" class=\"headerlink\" title=\"5.Flex+margin\"></a>5.Flex+margin</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrapper</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;<span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ddd</span>;<span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.slide</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ff0000</span>;<span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兼容性：IE10及以上 ,这种方法跟第4种方法比较起来代码也更加简洁。</p>\n<h5 id=\"网上终极法\"><a href=\"#网上终极法\" class=\"headerlink\" title=\"网上终极法\"></a>网上终极法</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo-wrap</span>&#123;<span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.demo-center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">   *position: absolute;</span><br><span class=\"line\">   *<span class=\"selector-tag\">top</span>: 50%;</span><br><span class=\"line\">   *<span class=\"selector-tag\">left</span>: 50%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">   *position:relative;</span><br><span class=\"line\">   *<span class=\"selector-tag\">top</span>: <span class=\"selector-tag\">-50</span>%;</span><br><span class=\"line\">   *<span class=\"selector-tag\">left</span>: <span class=\"selector-tag\">-50</span>%;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://juejin.im/post/58f818bbb123db006233ab2a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/58f818bbb123db006233ab2a</a><br><a href=\"https://segmentfault.com/a/1190000011942746?_ea=2818653\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011942746?_ea=2818653</a></p>"},{"title":"js实现继承方式及特点","date":"2018-04-21T04:49:25.000Z","_content":"\n## js实现继承及特点\n\n<!-- more -->\n\n\n##### 原型链继承（prototype）\n\n当子函数的prototype对象指向父函数，那么子函数就能继承父函数，最常见的一种方式\n\n```js\nfunction a(){\n\tthis.name = ['js']\n}\nfunction b(){\n\tthis.age = 123\n}\nb.prototype = new a()\nb.prototype.constructor = b\n// 最好也加上\nc = new b()\nconsole.log(c.name,c.age) // ['js'] 123\n```\n\n简单继承\n\n缺点明显：new一个新的实例的时候，所有引用类型（数组，对象，函数等等）的属性被修改后，其它所继承原型的都会受到影响\n\n```js\n// ...上面省略\n\nc = new b()\nd = new b()\nc.name.push('qwe')\nconsole.log(c.name,d.name) // [\"js\", \"qwe\"]  [\"js\", \"qwe\"]\n```\n\n\n##### 构造函数绑定（子函数内使用apply或call）\n\n借用父类的构造函数来增强子类实例，等于是把父类的实例属性复制了给子类\n\n```js\nfunction a(){\n\tthis.name = ['js']\n}\nfunction b(){\n\ta.apply(this,arguments)\n\tthis.age = 123\n}\nc = new b()\nd = new b()\nc.name.push(1)\nconsole.log(c.name,d.name) // [\"js\", 1] [\"js\"]\n```\n\n可以向父类的函数传参\n\n解决了子类实例共享父类引用属性的问题\n\n缺点：\n\n函数无法复用，每个子类实例都有一个新的函数，太多影响性能\n\n\n##### 组合式继承 （构造函数+原型链）\n\n把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点，\n\na.call(this);继承父类的基本属性和引用属性并保留能传参的优点；\n\na.prototype = new Super();继承父类函数，实现函数复用\n\n```js\nfunction a(){\n\tthis.name = ['js'];\n\tthis.age = function(q){\n\t\tconsole.log(q)\n\t}\n}\nfunction b(){\n\ta.call(this)\n}\nb.prototype = new a()\nb.prototype.constructor = b\nc = new b()\nd = new b()\nc.name.push(2)\nconsole.log(c.name,d.name) // [\"js\", 2] [\"js\"]\n```\n\n- 解决了子类实例共享父类引用属性的问题\n\n- 可以向父类的函数传参\n\n- 函数可复用\n\n缺点：\n\n子类原型有多余的父类实例属性，因为父类构造函数了调用了两次\n\n依然浪费内存，不过比构造函数继承 好些\n\n\n##### 新对象组合继承（也叫寄生组合式继承）\n\n看了阮一峰的博客明白许多.\n\n需要在子类上添加 `b.uber.constructor.call(this)` , b.uber在定义extend方式时定义了，等同于继承了父类的prototype (a.prototype)。\n\n如果父类需要传入参数，可以在子类这样写：b.uber.constructor.call(this,name)\n\n（uber是一个德语词，意思是\"向上\"、\"上一层\"。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。\n\n```js\nfunction extend(Child, Parent) {\n\tvar F = function(){};\n\tF.prototype = Parent.prototype;\n\tChild.prototype = new F();\n\tChild.prototype.constructor = Child;\n\tChild.uber = Parent.prototype; // 此处是一个自定义扩展属性，不一定非得用uber，目的是在定义子类时调用\n}\n\n\nfunction a(){\n\tthis.name = ['js']\n}\nfunction b(){\n\tb.uber.constructor.call(this) \n\tthis.age = '123'\n}\nextend(b,a)\nc = new b()\nd = new b()\nc.name.push(12)\nconsole.log(c.name,d.name) // [\"js\", 12] [\"js\"]\n```\n\n\n参考文献：https://www.zhihu.com/question/22232912\n参考文献：https://www.cnblogs.com/ayqy/p/4471638.html\n参考文献：http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\n参考文献：https://segmentfault.com/a/1190000008457844\n参考文献：http://web.zhaicool.net/443.html","source":"_posts/js实现继承方式及特点.md","raw":"---\ntitle: js实现继承方式及特点\ndate: 2018-04-21 12:49:25\ntags: 主页\n---\n\n## js实现继承及特点\n\n<!-- more -->\n\n\n##### 原型链继承（prototype）\n\n当子函数的prototype对象指向父函数，那么子函数就能继承父函数，最常见的一种方式\n\n```js\nfunction a(){\n\tthis.name = ['js']\n}\nfunction b(){\n\tthis.age = 123\n}\nb.prototype = new a()\nb.prototype.constructor = b\n// 最好也加上\nc = new b()\nconsole.log(c.name,c.age) // ['js'] 123\n```\n\n简单继承\n\n缺点明显：new一个新的实例的时候，所有引用类型（数组，对象，函数等等）的属性被修改后，其它所继承原型的都会受到影响\n\n```js\n// ...上面省略\n\nc = new b()\nd = new b()\nc.name.push('qwe')\nconsole.log(c.name,d.name) // [\"js\", \"qwe\"]  [\"js\", \"qwe\"]\n```\n\n\n##### 构造函数绑定（子函数内使用apply或call）\n\n借用父类的构造函数来增强子类实例，等于是把父类的实例属性复制了给子类\n\n```js\nfunction a(){\n\tthis.name = ['js']\n}\nfunction b(){\n\ta.apply(this,arguments)\n\tthis.age = 123\n}\nc = new b()\nd = new b()\nc.name.push(1)\nconsole.log(c.name,d.name) // [\"js\", 1] [\"js\"]\n```\n\n可以向父类的函数传参\n\n解决了子类实例共享父类引用属性的问题\n\n缺点：\n\n函数无法复用，每个子类实例都有一个新的函数，太多影响性能\n\n\n##### 组合式继承 （构造函数+原型链）\n\n把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点，\n\na.call(this);继承父类的基本属性和引用属性并保留能传参的优点；\n\na.prototype = new Super();继承父类函数，实现函数复用\n\n```js\nfunction a(){\n\tthis.name = ['js'];\n\tthis.age = function(q){\n\t\tconsole.log(q)\n\t}\n}\nfunction b(){\n\ta.call(this)\n}\nb.prototype = new a()\nb.prototype.constructor = b\nc = new b()\nd = new b()\nc.name.push(2)\nconsole.log(c.name,d.name) // [\"js\", 2] [\"js\"]\n```\n\n- 解决了子类实例共享父类引用属性的问题\n\n- 可以向父类的函数传参\n\n- 函数可复用\n\n缺点：\n\n子类原型有多余的父类实例属性，因为父类构造函数了调用了两次\n\n依然浪费内存，不过比构造函数继承 好些\n\n\n##### 新对象组合继承（也叫寄生组合式继承）\n\n看了阮一峰的博客明白许多.\n\n需要在子类上添加 `b.uber.constructor.call(this)` , b.uber在定义extend方式时定义了，等同于继承了父类的prototype (a.prototype)。\n\n如果父类需要传入参数，可以在子类这样写：b.uber.constructor.call(this,name)\n\n（uber是一个德语词，意思是\"向上\"、\"上一层\"。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。\n\n```js\nfunction extend(Child, Parent) {\n\tvar F = function(){};\n\tF.prototype = Parent.prototype;\n\tChild.prototype = new F();\n\tChild.prototype.constructor = Child;\n\tChild.uber = Parent.prototype; // 此处是一个自定义扩展属性，不一定非得用uber，目的是在定义子类时调用\n}\n\n\nfunction a(){\n\tthis.name = ['js']\n}\nfunction b(){\n\tb.uber.constructor.call(this) \n\tthis.age = '123'\n}\nextend(b,a)\nc = new b()\nd = new b()\nc.name.push(12)\nconsole.log(c.name,d.name) // [\"js\", 12] [\"js\"]\n```\n\n\n参考文献：https://www.zhihu.com/question/22232912\n参考文献：https://www.cnblogs.com/ayqy/p/4471638.html\n参考文献：http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\n参考文献：https://segmentfault.com/a/1190000008457844\n参考文献：http://web.zhaicool.net/443.html","slug":"js实现继承方式及特点","published":1,"updated":"2018-04-24T14:27:38.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb6060000ha4vbf98i7kzo","content":"<h2 id=\"js实现继承及特点\"><a href=\"#js实现继承及特点\" class=\"headerlink\" title=\"js实现继承及特点\"></a>js实现继承及特点</h2><a id=\"more\"></a>\n<h5 id=\"原型链继承（prototype）\"><a href=\"#原型链继承（prototype）\" class=\"headerlink\" title=\"原型链继承（prototype）\"></a>原型链继承（prototype）</h5><p>当子函数的prototype对象指向父函数，那么子函数就能继承父函数，最常见的一种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.prototype = <span class=\"keyword\">new</span> a()</span><br><span class=\"line\">b.prototype.constructor = b</span><br><span class=\"line\"><span class=\"comment\">// 最好也加上</span></span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,c.age) <span class=\"comment\">// ['js'] 123</span></span><br></pre></td></tr></table></figure>\n<p>简单继承</p>\n<p>缺点明显：new一个新的实例的时候，所有引用类型（数组，对象，函数等等）的属性被修改后，其它所继承原型的都会受到影响</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...上面省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"string\">'qwe'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", \"qwe\"]  [\"js\", \"qwe\"]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"构造函数绑定（子函数内使用apply或call）\"><a href=\"#构造函数绑定（子函数内使用apply或call）\" class=\"headerlink\" title=\"构造函数绑定（子函数内使用apply或call）\"></a>构造函数绑定（子函数内使用apply或call）</h5><p>借用父类的构造函数来增强子类实例，等于是把父类的实例属性复制了给子类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ta.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", 1] [\"js\"]</span></span><br></pre></td></tr></table></figure>\n<p>可以向父类的函数传参</p>\n<p>解决了子类实例共享父类引用属性的问题</p>\n<p>缺点：</p>\n<p>函数无法复用，每个子类实例都有一个新的函数，太多影响性能</p>\n<h5 id=\"组合式继承-（构造函数-原型链）\"><a href=\"#组合式继承-（构造函数-原型链）\" class=\"headerlink\" title=\"组合式继承 （构造函数+原型链）\"></a>组合式继承 （构造函数+原型链）</h5><p>把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点，</p>\n<p>a.call(this);继承父类的基本属性和引用属性并保留能传参的优点；</p>\n<p>a.prototype = new Super();继承父类函数，实现函数复用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">q</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(q)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ta.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.prototype = <span class=\"keyword\">new</span> a()</span><br><span class=\"line\">b.prototype.constructor = b</span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", 2] [\"js\"]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>解决了子类实例共享父类引用属性的问题</p>\n</li>\n<li><p>可以向父类的函数传参</p>\n</li>\n<li><p>函数可复用</p>\n</li>\n</ul>\n<p>缺点：</p>\n<p>子类原型有多余的父类实例属性，因为父类构造函数了调用了两次</p>\n<p>依然浪费内存，不过比构造函数继承 好些</p>\n<h5 id=\"新对象组合继承（也叫寄生组合式继承）\"><a href=\"#新对象组合继承（也叫寄生组合式继承）\" class=\"headerlink\" title=\"新对象组合继承（也叫寄生组合式继承）\"></a>新对象组合继承（也叫寄生组合式继承）</h5><p>看了阮一峰的博客明白许多.</p>\n<p>需要在子类上添加 <code>b.uber.constructor.call(this)</code> , b.uber在定义extend方式时定义了，等同于继承了父类的prototype (a.prototype)。</p>\n<p>如果父类需要传入参数，可以在子类这样写：b.uber.constructor.call(this,name)</p>\n<p>（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">\tF.prototype = Parent.prototype;</span><br><span class=\"line\">\tChild.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">\tChild.prototype.constructor = Child;</span><br><span class=\"line\">\tChild.uber = Parent.prototype; <span class=\"comment\">// 此处是一个自定义扩展属性，不一定非得用uber，目的是在定义子类时调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tb.uber.constructor.call(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"string\">'123'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">extend(b,a)</span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", 12] [\"js\"]</span></span><br></pre></td></tr></table></figure>\n<p>参考文献：<a href=\"https://www.zhihu.com/question/22232912\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/22232912</a><br>参考文献：<a href=\"https://www.cnblogs.com/ayqy/p/4471638.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ayqy/p/4471638.html</a><br>参考文献：<a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html</a><br>参考文献：<a href=\"https://segmentfault.com/a/1190000008457844\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008457844</a><br>参考文献：<a href=\"http://web.zhaicool.net/443.html\" target=\"_blank\" rel=\"noopener\">http://web.zhaicool.net/443.html</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"js实现继承及特点\"><a href=\"#js实现继承及特点\" class=\"headerlink\" title=\"js实现继承及特点\"></a>js实现继承及特点</h2>","more":"<h5 id=\"原型链继承（prototype）\"><a href=\"#原型链继承（prototype）\" class=\"headerlink\" title=\"原型链继承（prototype）\"></a>原型链继承（prototype）</h5><p>当子函数的prototype对象指向父函数，那么子函数就能继承父函数，最常见的一种方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.prototype = <span class=\"keyword\">new</span> a()</span><br><span class=\"line\">b.prototype.constructor = b</span><br><span class=\"line\"><span class=\"comment\">// 最好也加上</span></span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,c.age) <span class=\"comment\">// ['js'] 123</span></span><br></pre></td></tr></table></figure>\n<p>简单继承</p>\n<p>缺点明显：new一个新的实例的时候，所有引用类型（数组，对象，函数等等）的属性被修改后，其它所继承原型的都会受到影响</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...上面省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"string\">'qwe'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", \"qwe\"]  [\"js\", \"qwe\"]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"构造函数绑定（子函数内使用apply或call）\"><a href=\"#构造函数绑定（子函数内使用apply或call）\" class=\"headerlink\" title=\"构造函数绑定（子函数内使用apply或call）\"></a>构造函数绑定（子函数内使用apply或call）</h5><p>借用父类的构造函数来增强子类实例，等于是把父类的实例属性复制了给子类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ta.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", 1] [\"js\"]</span></span><br></pre></td></tr></table></figure>\n<p>可以向父类的函数传参</p>\n<p>解决了子类实例共享父类引用属性的问题</p>\n<p>缺点：</p>\n<p>函数无法复用，每个子类实例都有一个新的函数，太多影响性能</p>\n<h5 id=\"组合式继承-（构造函数-原型链）\"><a href=\"#组合式继承-（构造函数-原型链）\" class=\"headerlink\" title=\"组合式继承 （构造函数+原型链）\"></a>组合式继承 （构造函数+原型链）</h5><p>把实例函数都放在原型对象上，以实现函数复用。同时还要保留借用构造函数方式的优点，</p>\n<p>a.call(this);继承父类的基本属性和引用属性并保留能传参的优点；</p>\n<p>a.prototype = new Super();继承父类函数，实现函数复用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">q</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(q)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\ta.call(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b.prototype = <span class=\"keyword\">new</span> a()</span><br><span class=\"line\">b.prototype.constructor = b</span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", 2] [\"js\"]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>解决了子类实例共享父类引用属性的问题</p>\n</li>\n<li><p>可以向父类的函数传参</p>\n</li>\n<li><p>函数可复用</p>\n</li>\n</ul>\n<p>缺点：</p>\n<p>子类原型有多余的父类实例属性，因为父类构造函数了调用了两次</p>\n<p>依然浪费内存，不过比构造函数继承 好些</p>\n<h5 id=\"新对象组合继承（也叫寄生组合式继承）\"><a href=\"#新对象组合继承（也叫寄生组合式继承）\" class=\"headerlink\" title=\"新对象组合继承（也叫寄生组合式继承）\"></a>新对象组合继承（也叫寄生组合式继承）</h5><p>看了阮一峰的博客明白许多.</p>\n<p>需要在子类上添加 <code>b.uber.constructor.call(this)</code> , b.uber在定义extend方式时定义了，等同于继承了父类的prototype (a.prototype)。</p>\n<p>如果父类需要传入参数，可以在子类这样写：b.uber.constructor.call(this,name)</p>\n<p>（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">\tF.prototype = Parent.prototype;</span><br><span class=\"line\">\tChild.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">\tChild.prototype.constructor = Child;</span><br><span class=\"line\">\tChild.uber = Parent.prototype; <span class=\"comment\">// 此处是一个自定义扩展属性，不一定非得用uber，目的是在定义子类时调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = [<span class=\"string\">'js'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tb.uber.constructor.call(<span class=\"keyword\">this</span>) </span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"string\">'123'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">extend(b,a)</span><br><span class=\"line\">c = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">d = <span class=\"keyword\">new</span> b()</span><br><span class=\"line\">c.name.push(<span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.name,d.name) <span class=\"comment\">// [\"js\", 12] [\"js\"]</span></span><br></pre></td></tr></table></figure>\n<p>参考文献：<a href=\"https://www.zhihu.com/question/22232912\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/22232912</a><br>参考文献：<a href=\"https://www.cnblogs.com/ayqy/p/4471638.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ayqy/p/4471638.html</a><br>参考文献：<a href=\"http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html</a><br>参考文献：<a href=\"https://segmentfault.com/a/1190000008457844\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008457844</a><br>参考文献：<a href=\"http://web.zhaicool.net/443.html\" target=\"_blank\" rel=\"noopener\">http://web.zhaicool.net/443.html</a></p>"},{"title":"Hello World ！ 我的第一个博客","date":"2017-12-09T01:20:00.000Z","_content":"\n总算是建了一个博客，后续申请个域名","source":"_posts/my-blog.md","raw":"---\ntitle: Hello World ！ 我的第一个博客\ndate: 2017-12-09 09:20:00\ntags: 2017\n---\n\n总算是建了一个博客，后续申请个域名","slug":"my-blog","published":1,"updated":"2018-04-24T14:27:38.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb6067000ja4vb56eat7ed","content":"<p>总算是建了一个博客，后续申请个域名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>总算是建了一个博客，后续申请个域名</p>\n"},{"title":"webpack 打包后font-awesome路径错误","date":"2018-01-23T07:01:16.000Z","_content":"类似与这种：\n![1](1-23-1.png)\n\n解决方法是：\n在 `build/webpack.base.conf.js`文件内找到：\n\n<!-- more -->\n\n```javascript\n{\n    test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n    loader: 'url-loader',\n    options: {\n        limit: 10000,\n        name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n    }\n}\n```\n把limit尽量调大一点：例如 limit:80000\n\n然后在次打包访问，应该就没问题了\n","source":"_posts/webpack-打包后font-awesome路径错误.md","raw":"---\ntitle: webpack 打包后font-awesome路径错误\ndate: 2018-01-23 15:01:16\ntags: 主页\n---\n类似与这种：\n![1](1-23-1.png)\n\n解决方法是：\n在 `build/webpack.base.conf.js`文件内找到：\n\n<!-- more -->\n\n```javascript\n{\n    test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n    loader: 'url-loader',\n    options: {\n        limit: 10000,\n        name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n    }\n}\n```\n把limit尽量调大一点：例如 limit:80000\n\n然后在次打包访问，应该就没问题了\n","slug":"webpack-打包后font-awesome路径错误","published":1,"updated":"2018-04-24T14:27:38.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb606b000la4vbv5md34e7","content":"<p>类似与这种：<br><img src=\"1-23-1.png\" alt=\"1\"></p>\n<p>解决方法是：<br>在 <code>build/webpack.base.conf.js</code>文件内找到：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">        limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">        name: utils.assetsPath(<span class=\"string\">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把limit尽量调大一点：例如 limit:80000</p>\n<p>然后在次打包访问，应该就没问题了</p>\n","site":{"data":{}},"excerpt":"<p>类似与这种：<br><img src=\"1-23-1.png\" alt=\"1\"></p>\n<p>解决方法是：<br>在 <code>build/webpack.base.conf.js</code>文件内找到：</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/</span>,</span><br><span class=\"line\">    loader: <span class=\"string\">'url-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">        limit: <span class=\"number\">10000</span>,</span><br><span class=\"line\">        name: utils.assetsPath(<span class=\"string\">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把limit尽量调大一点：例如 limit:80000</p>\n<p>然后在次打包访问，应该就没问题了</p>"},{"title":"web性能优化（持续更新）","date":"2018-01-25T08:19:18.000Z","_content":"\n#### DNS Prefetch 即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\n\n#### DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\n\n浏览器对网站第一次的域名DNS解析查找流程一次为：\n`浏览器缓存`-`系统缓存`-`路由器缓存`-`ISP`-`DNS缓存`-`递归搜索`\n\n### DNS-prefetch目前主流浏览器都支持\n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<link rel=\"dns-prefetch\" href=\"//www.spreadfirefox.com/\">\n<link rel=\"dns-prefetch\" href=\"//img1.jpg\">\n```\n\n<!-- more -->\n\n强制查询特定主机名，在这个例子中，浏览器将预解析域名\"www.spreadfirefox.com\"。\n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<link rel=\"dns-prefetch\" href=\"http://www.spreadfirefox.com/\">\n```\n\n\n### 需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\n\n如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：\n\n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"off\">\n```\n\n除此外还有：\n```html\n预连接 <link rel=\"preconnect\" href=\"//jirengu.com\">\n预获取 <link rel=\"prefetch\" href=\"image.png\">\n预渲染 <link rel=\"prerender\" href=\"//xiedaimala.com\">\n```\n\n","source":"_posts/web性能优化（持续更新）.md","raw":"---\ntitle: web性能优化（持续更新）\ndate: 2018-01-25 16:19:18\ntags: 主页\n---\n\n#### DNS Prefetch 即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\n\n#### DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\n\n浏览器对网站第一次的域名DNS解析查找流程一次为：\n`浏览器缓存`-`系统缓存`-`路由器缓存`-`ISP`-`DNS缓存`-`递归搜索`\n\n### DNS-prefetch目前主流浏览器都支持\n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<link rel=\"dns-prefetch\" href=\"//www.spreadfirefox.com/\">\n<link rel=\"dns-prefetch\" href=\"//img1.jpg\">\n```\n\n<!-- more -->\n\n强制查询特定主机名，在这个例子中，浏览器将预解析域名\"www.spreadfirefox.com\"。\n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<link rel=\"dns-prefetch\" href=\"http://www.spreadfirefox.com/\">\n```\n\n\n### 需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\n\n如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：\n\n```html\n<meta http-equiv=\"x-dns-prefetch-control\" content=\"off\">\n```\n\n除此外还有：\n```html\n预连接 <link rel=\"preconnect\" href=\"//jirengu.com\">\n预获取 <link rel=\"prefetch\" href=\"image.png\">\n预渲染 <link rel=\"prerender\" href=\"//xiedaimala.com\">\n```\n\n","slug":"web性能优化（持续更新）","published":1,"updated":"2018-04-24T14:27:38.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb606g000oa4vbuk8w4a3v","content":"<h4 id=\"DNS-Prefetch-即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\"><a href=\"#DNS-Prefetch-即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\" class=\"headerlink\" title=\"DNS Prefetch 即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\"></a>DNS Prefetch 即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分</h4><h4 id=\"DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\"><a href=\"#DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\" class=\"headerlink\" title=\"DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\"></a>DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。</h4><p>浏览器对网站第一次的域名DNS解析查找流程一次为：<br><code>浏览器缓存</code>-<code>系统缓存</code>-<code>路由器缓存</code>-<code>ISP</code>-<code>DNS缓存</code>-<code>递归搜索</code></p>\n<h3 id=\"DNS-prefetch目前主流浏览器都支持\"><a href=\"#DNS-prefetch目前主流浏览器都支持\" class=\"headerlink\" title=\"DNS-prefetch目前主流浏览器都支持\"></a>DNS-prefetch目前主流浏览器都支持</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.spreadfirefox.com/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//img1.jpg\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>强制查询特定主机名，在这个例子中，浏览器将预解析域名”<a href=\"http://www.spreadfirefox.com&quot;。\" target=\"_blank\" rel=\"noopener\">www.spreadfirefox.com&quot;。</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.spreadfirefox.com/\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\"><a href=\"#需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\" class=\"headerlink\" title=\"需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\"></a>需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。</h3><p>如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>除此外还有：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">预连接 <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"preconnect\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//jirengu.com\"</span>&gt;</span></span><br><span class=\"line\">预获取 <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"image.png\"</span>&gt;</span></span><br><span class=\"line\">预渲染 <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prerender\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//xiedaimala.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"DNS-Prefetch-即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\"><a href=\"#DNS-Prefetch-即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\" class=\"headerlink\" title=\"DNS Prefetch 即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分\"></a>DNS Prefetch 即DNS预获取，可以有效的减少DNS解析时间和次数。是优化网页性能的一部分</h4><h4 id=\"DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\"><a href=\"#DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\" class=\"headerlink\" title=\"DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。\"></a>DNS-prefetch​作用简单说明就是当你浏览网页时，浏览器会加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页链接无需DNS解析，减少浏览者等待时间，提高用户体验。</h4><p>浏览器对网站第一次的域名DNS解析查找流程一次为：<br><code>浏览器缓存</code>-<code>系统缓存</code>-<code>路由器缓存</code>-<code>ISP</code>-<code>DNS缓存</code>-<code>递归搜索</code></p>\n<h3 id=\"DNS-prefetch目前主流浏览器都支持\"><a href=\"#DNS-prefetch目前主流浏览器都支持\" class=\"headerlink\" title=\"DNS-prefetch目前主流浏览器都支持\"></a>DNS-prefetch目前主流浏览器都支持</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//www.spreadfirefox.com/\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//img1.jpg\"</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>强制查询特定主机名，在这个例子中，浏览器将预解析域名”<a href=\"http://www.spreadfirefox.com&quot;。\" target=\"_blank\" rel=\"noopener\">www.spreadfirefox.com&quot;。</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"on\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"dns-prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.spreadfirefox.com/\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\"><a href=\"#需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\" class=\"headerlink\" title=\"需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。\"></a>需要注意的是，虽然dns-prefetch能够加快网页解析速度，但是也不能随便滥用，因为多页面重复DNS预解析会增加重复DNS查询的次数。</h3><p>如果需要禁止隐式的 DNS Prefetch，可以使用以下的标签：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-dns-prefetch-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"off\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>除此外还有：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">预连接 <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"preconnect\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//jirengu.com\"</span>&gt;</span></span><br><span class=\"line\">预获取 <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prefetch\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"image.png\"</span>&gt;</span></span><br><span class=\"line\">预渲染 <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"prerender\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//xiedaimala.com\"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"书籍时间记录","date":"2018-01-09T05:17:46.000Z","_content":"# 坚持每年看6本书\n\n### bootstrap 完成：2018-1-5\n### Vue实践解密 \n### 高性能响应式Web开发实战及实际案例 完成：2018-1-20\n### 创意VC\n### 李彦宏:百度与智能时代的畅想151.101.229.147","source":"_posts/书籍时间记录.md","raw":"---\ntitle: 书籍时间记录\ndate: 2018-01-09 13:17:46\ntags:\n---\n# 坚持每年看6本书\n\n### bootstrap 完成：2018-1-5\n### Vue实践解密 \n### 高性能响应式Web开发实战及实际案例 完成：2018-1-20\n### 创意VC\n### 李彦宏:百度与智能时代的畅想151.101.229.147","slug":"书籍时间记录","published":1,"updated":"2018-04-24T14:27:38.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb606n000qa4vbm6j8bsxc","content":"<h1 id=\"坚持每年看6本书\"><a href=\"#坚持每年看6本书\" class=\"headerlink\" title=\"坚持每年看6本书\"></a>坚持每年看6本书</h1><h3 id=\"bootstrap-完成：2018-1-5\"><a href=\"#bootstrap-完成：2018-1-5\" class=\"headerlink\" title=\"bootstrap 完成：2018-1-5\"></a>bootstrap 完成：2018-1-5</h3><h3 id=\"Vue实践解密\"><a href=\"#Vue实践解密\" class=\"headerlink\" title=\"Vue实践解密\"></a>Vue实践解密</h3><h3 id=\"高性能响应式Web开发实战及实际案例-完成：2018-1-20\"><a href=\"#高性能响应式Web开发实战及实际案例-完成：2018-1-20\" class=\"headerlink\" title=\"高性能响应式Web开发实战及实际案例 完成：2018-1-20\"></a>高性能响应式Web开发实战及实际案例 完成：2018-1-20</h3><h3 id=\"创意VC\"><a href=\"#创意VC\" class=\"headerlink\" title=\"创意VC\"></a>创意VC</h3><h3 id=\"李彦宏-百度与智能时代的畅想151-101-229-147\"><a href=\"#李彦宏-百度与智能时代的畅想151-101-229-147\" class=\"headerlink\" title=\"李彦宏:百度与智能时代的畅想151.101.229.147\"></a>李彦宏:百度与智能时代的畅想151.101.229.147</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"坚持每年看6本书\"><a href=\"#坚持每年看6本书\" class=\"headerlink\" title=\"坚持每年看6本书\"></a>坚持每年看6本书</h1><h3 id=\"bootstrap-完成：2018-1-5\"><a href=\"#bootstrap-完成：2018-1-5\" class=\"headerlink\" title=\"bootstrap 完成：2018-1-5\"></a>bootstrap 完成：2018-1-5</h3><h3 id=\"Vue实践解密\"><a href=\"#Vue实践解密\" class=\"headerlink\" title=\"Vue实践解密\"></a>Vue实践解密</h3><h3 id=\"高性能响应式Web开发实战及实际案例-完成：2018-1-20\"><a href=\"#高性能响应式Web开发实战及实际案例-完成：2018-1-20\" class=\"headerlink\" title=\"高性能响应式Web开发实战及实际案例 完成：2018-1-20\"></a>高性能响应式Web开发实战及实际案例 完成：2018-1-20</h3><h3 id=\"创意VC\"><a href=\"#创意VC\" class=\"headerlink\" title=\"创意VC\"></a>创意VC</h3><h3 id=\"李彦宏-百度与智能时代的畅想151-101-229-147\"><a href=\"#李彦宏-百度与智能时代的畅想151-101-229-147\" class=\"headerlink\" title=\"李彦宏:百度与智能时代的畅想151.101.229.147\"></a>李彦宏:百度与智能时代的畅想151.101.229.147</h3>"},{"title":"从输入url到页面加载时发生了什么？","date":"2018-03-31T09:18:22.000Z","_content":"\n可以分为六个过程：\n`1、DNS解析` -> `2、TCP连接` -> `3、发送HTTP请求` -> `4、服务器处理请求并返回HTTP报文` -> `5、浏览器解析并渲染页面` -> `6、连接结束`\n\n<!-- more -->\n\n#### dns解析\n\n每一个计算机实际上都有一个ip地址，但是用户不太方便记忆ip地址，所有就有了网址替换ip地址，dns解析就充当了一个翻译官，当用户在浏览器输入网址并打开的时候，实际上就是网址到ip地址的转换。\n\n##### dns解析过程\n\ndns解析实际上是递归查询ip地址的过程\n\n输入地址打开后告诉本地dns服务器，如果没找到，则会进入下一级域名服务器查看，如此重复，比如：www.baidu.com,首先在本地域名服务器中查找ip地址，如果没有找到，本地域名服务器会向根域名服务器发送一个请求，如果跟域名服务器也不存在该域名的ip地址时，本地域名会向com顶级域名服务器发送一个请求，依次类推循环下去，直到最后本地域名服务器得到baidu的ip地址并缓存到本地，供下次使用，所有网址的解析过程为：\n`.` -> `.com` -> `baidu.com.` -> `www.baidu.com.`\n\n最后面的.对应根域名服务器\n\n`根域名服务器` -> `com顶级域名服务器` -> `baidu.comy域名服务器` -> `www.baidu.com`\n\n\n##### dns优化\n\n`dns缓存`\n\ndns有着多个缓存，从离浏览器的距离排序的话，`浏览器缓存` -> `系统缓存` -> `路由器缓存` -> `ips缓存` -> `根域名服务器缓存` -> `顶级域名服务器缓存` -> `主域名服务器缓存`\n\n其主要优化的就是缓存这部分。\n\n不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。\n\n缓存时间长：减少DNS的重复查找，节省时间。\n缓存时间短：及时检测服务器的IP变化，保证访问的正确性。\n\n`减少dns查询次数`\n\nDNS查询也消耗响应时间，若网页内容来自各个不同的domain，则客户端首次解析这些domain需要消耗一定的时间，但由于DNS查询结果会缓存在本地系统和浏览器中一段时间，所以DNS查询一般只是对首次访问时的速度有影响。\n\n减少DNS查询次数需要减少来自不同domain的请求的数量，如尽量将外部域的对象下载到本地服务器上等。\n\n##### dns负载均衡\n\ndns负载均衡又叫dns重定向，其主要作用是将用户的http请求，让最接近用户地理位置的dns服务器接收并返回请求，还有许多优化的手段\n\n\n#### tcp链接\n\n`建立连接`\n\n建立连接之前，服务器一直会打开端口并对其监听，当客户端主动和服务器端建立连接的时候，发起一个打开端口的请求（该端口一般为临时端口），然后进入三次握手的过程：\n\n`TCP连接的三次握手过程`\n\n**图解：**\n\n![](http://blog.chinaunix.net/attachment/201304/8/22312037_1365405910EROI.png)\n\nTCP报文字段格式\n（1）序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。\n（2）确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。\n（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：\n    - （A）URG：紧急指针（urgent pointer）有效。\n    - （B）ACK：确认序号有效。\n    - （C）PSH：接收方应该尽快将这个报文交给应用层。\n    - （D）RST：重置连接。\n    - （E）SYN：发起一个新连接。\n    - （F）FIN：释放一个连接。\n\n需要注意的是：\n    - （A）不要将确认序号Ack与标志位中的ACK搞混了。\n    - （B）确认方Ack=发起方Req+1，两端配对。 \n\n\n- 第一次握手:client将标志位SYN置为1，随机产生一个值为seq=J；并将数据包发送给Server,Client进入SYN_SENT状态，等待server确认\n\n- 第二次握手:Server收到数据包后由标志位SYN=1知道client请求建立连接，server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将数据包发送给client以确认连接请求，server进入SYN_RCVD状态。\n\n- 第三次握手：client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则连接简历成功，Client和server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。\n\n\n`TCP的四次挥手过程`\n\n**图解：**\n\n![](http://blog.chinaunix.net/attachment/201304/9/22312037_1365503104wDR0.png)\n\n- 第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Cient进入FIN_WAIT_1\n\n- 第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态\n\n- 第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态\n\n- 第四次挥手：Client收到FIN后,Client进入TIME_WAIT 状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。\n\n\n##### HTTP请求\n\n主要是发生在客户端，发送HTTP请求的过程就是构建HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口（HTTP协议80/8080，hTTPS协议443）。HTTP请求报文是三部分组成：请求行，请求报头和请求正文。\n\n\n##### 请求行\n\n格式如下：`Method Request-URL HTTP-Version CRLF`\n\n```\neg: GET index.html HTTP/1.1\n```\n\n常用的方法有GET,POST,PUT,DELETE,OPTIONS,HEAD.\n\n\n\n##### 请求报头\n\n请求报头允许能向服务器传递请求的工具附加信息和客户端（客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。）\n\n\n##### 请求正文\n\n当使用POST，PUT等方法时，通常需要客户端向服务端传递数据。这些数据就储存在请求正文中\n\n\n\n##### 服务器处理请求并返回HTTP报文\n\nHTTP响应报文也是由三部分组成：状态码，响应报头和响应报文\n\n\n\n详细参考：https://segmentfault.com/a/1190000006879700，\nhttps://www.cnblogs.com/chengyunshen/p/7196348.html，\nhttps://www.cnblogs.com/xsilence/p/6034361.html，\nhttps://blog.csdn.net/sssnmnmjmf/article/details/68486261","source":"_posts/从输入url到页面加载时发生了什么？.md","raw":"---\ntitle: 从输入url到页面加载时发生了什么？\ndate: 2018-03-31 17:18:22\ntags: 复习\n---\n\n可以分为六个过程：\n`1、DNS解析` -> `2、TCP连接` -> `3、发送HTTP请求` -> `4、服务器处理请求并返回HTTP报文` -> `5、浏览器解析并渲染页面` -> `6、连接结束`\n\n<!-- more -->\n\n#### dns解析\n\n每一个计算机实际上都有一个ip地址，但是用户不太方便记忆ip地址，所有就有了网址替换ip地址，dns解析就充当了一个翻译官，当用户在浏览器输入网址并打开的时候，实际上就是网址到ip地址的转换。\n\n##### dns解析过程\n\ndns解析实际上是递归查询ip地址的过程\n\n输入地址打开后告诉本地dns服务器，如果没找到，则会进入下一级域名服务器查看，如此重复，比如：www.baidu.com,首先在本地域名服务器中查找ip地址，如果没有找到，本地域名服务器会向根域名服务器发送一个请求，如果跟域名服务器也不存在该域名的ip地址时，本地域名会向com顶级域名服务器发送一个请求，依次类推循环下去，直到最后本地域名服务器得到baidu的ip地址并缓存到本地，供下次使用，所有网址的解析过程为：\n`.` -> `.com` -> `baidu.com.` -> `www.baidu.com.`\n\n最后面的.对应根域名服务器\n\n`根域名服务器` -> `com顶级域名服务器` -> `baidu.comy域名服务器` -> `www.baidu.com`\n\n\n##### dns优化\n\n`dns缓存`\n\ndns有着多个缓存，从离浏览器的距离排序的话，`浏览器缓存` -> `系统缓存` -> `路由器缓存` -> `ips缓存` -> `根域名服务器缓存` -> `顶级域名服务器缓存` -> `主域名服务器缓存`\n\n其主要优化的就是缓存这部分。\n\n不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。\n\n缓存时间长：减少DNS的重复查找，节省时间。\n缓存时间短：及时检测服务器的IP变化，保证访问的正确性。\n\n`减少dns查询次数`\n\nDNS查询也消耗响应时间，若网页内容来自各个不同的domain，则客户端首次解析这些domain需要消耗一定的时间，但由于DNS查询结果会缓存在本地系统和浏览器中一段时间，所以DNS查询一般只是对首次访问时的速度有影响。\n\n减少DNS查询次数需要减少来自不同domain的请求的数量，如尽量将外部域的对象下载到本地服务器上等。\n\n##### dns负载均衡\n\ndns负载均衡又叫dns重定向，其主要作用是将用户的http请求，让最接近用户地理位置的dns服务器接收并返回请求，还有许多优化的手段\n\n\n#### tcp链接\n\n`建立连接`\n\n建立连接之前，服务器一直会打开端口并对其监听，当客户端主动和服务器端建立连接的时候，发起一个打开端口的请求（该端口一般为临时端口），然后进入三次握手的过程：\n\n`TCP连接的三次握手过程`\n\n**图解：**\n\n![](http://blog.chinaunix.net/attachment/201304/8/22312037_1365405910EROI.png)\n\nTCP报文字段格式\n（1）序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。\n（2）确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。\n（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：\n    - （A）URG：紧急指针（urgent pointer）有效。\n    - （B）ACK：确认序号有效。\n    - （C）PSH：接收方应该尽快将这个报文交给应用层。\n    - （D）RST：重置连接。\n    - （E）SYN：发起一个新连接。\n    - （F）FIN：释放一个连接。\n\n需要注意的是：\n    - （A）不要将确认序号Ack与标志位中的ACK搞混了。\n    - （B）确认方Ack=发起方Req+1，两端配对。 \n\n\n- 第一次握手:client将标志位SYN置为1，随机产生一个值为seq=J；并将数据包发送给Server,Client进入SYN_SENT状态，等待server确认\n\n- 第二次握手:Server收到数据包后由标志位SYN=1知道client请求建立连接，server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将数据包发送给client以确认连接请求，server进入SYN_RCVD状态。\n\n- 第三次握手：client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则连接简历成功，Client和server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。\n\n\n`TCP的四次挥手过程`\n\n**图解：**\n\n![](http://blog.chinaunix.net/attachment/201304/9/22312037_1365503104wDR0.png)\n\n- 第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Cient进入FIN_WAIT_1\n\n- 第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态\n\n- 第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态\n\n- 第四次挥手：Client收到FIN后,Client进入TIME_WAIT 状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。\n\n\n##### HTTP请求\n\n主要是发生在客户端，发送HTTP请求的过程就是构建HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口（HTTP协议80/8080，hTTPS协议443）。HTTP请求报文是三部分组成：请求行，请求报头和请求正文。\n\n\n##### 请求行\n\n格式如下：`Method Request-URL HTTP-Version CRLF`\n\n```\neg: GET index.html HTTP/1.1\n```\n\n常用的方法有GET,POST,PUT,DELETE,OPTIONS,HEAD.\n\n\n\n##### 请求报头\n\n请求报头允许能向服务器传递请求的工具附加信息和客户端（客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。）\n\n\n##### 请求正文\n\n当使用POST，PUT等方法时，通常需要客户端向服务端传递数据。这些数据就储存在请求正文中\n\n\n\n##### 服务器处理请求并返回HTTP报文\n\nHTTP响应报文也是由三部分组成：状态码，响应报头和响应报文\n\n\n\n详细参考：https://segmentfault.com/a/1190000006879700，\nhttps://www.cnblogs.com/chengyunshen/p/7196348.html，\nhttps://www.cnblogs.com/xsilence/p/6034361.html，\nhttps://blog.csdn.net/sssnmnmjmf/article/details/68486261","slug":"从输入url到页面加载时发生了什么？","published":1,"updated":"2018-04-24T14:27:38.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgfb606s000sa4vbo42rygw0","content":"<p>可以分为六个过程：<br><code>1、DNS解析</code> -&gt; <code>2、TCP连接</code> -&gt; <code>3、发送HTTP请求</code> -&gt; <code>4、服务器处理请求并返回HTTP报文</code> -&gt; <code>5、浏览器解析并渲染页面</code> -&gt; <code>6、连接结束</code></p>\n<a id=\"more\"></a>\n<h4 id=\"dns解析\"><a href=\"#dns解析\" class=\"headerlink\" title=\"dns解析\"></a>dns解析</h4><p>每一个计算机实际上都有一个ip地址，但是用户不太方便记忆ip地址，所有就有了网址替换ip地址，dns解析就充当了一个翻译官，当用户在浏览器输入网址并打开的时候，实际上就是网址到ip地址的转换。</p>\n<h5 id=\"dns解析过程\"><a href=\"#dns解析过程\" class=\"headerlink\" title=\"dns解析过程\"></a>dns解析过程</h5><p>dns解析实际上是递归查询ip地址的过程</p>\n<p>输入地址打开后告诉本地dns服务器，如果没找到，则会进入下一级域名服务器查看，如此重复，比如：<a href=\"http://www.baidu.com,首先在本地域名服务器中查找ip地址，如果没有找到，本地域名服务器会向根域名服务器发送一个请求，如果跟域名服务器也不存在该域名的ip地址时，本地域名会向com顶级域名服务器发送一个请求，依次类推循环下去，直到最后本地域名服务器得到baidu的ip地址并缓存到本地，供下次使用，所有网址的解析过程为：\" target=\"_blank\" rel=\"noopener\">www.baidu.com,首先在本地域名服务器中查找ip地址，如果没有找到，本地域名服务器会向根域名服务器发送一个请求，如果跟域名服务器也不存在该域名的ip地址时，本地域名会向com顶级域名服务器发送一个请求，依次类推循环下去，直到最后本地域名服务器得到baidu的ip地址并缓存到本地，供下次使用，所有网址的解析过程为：</a><br><code>.</code> -&gt; <code>.com</code> -&gt; <code>baidu.com.</code> -&gt; <code>www.baidu.com.</code></p>\n<p>最后面的.对应根域名服务器</p>\n<p><code>根域名服务器</code> -&gt; <code>com顶级域名服务器</code> -&gt; <code>baidu.comy域名服务器</code> -&gt; <code>www.baidu.com</code></p>\n<h5 id=\"dns优化\"><a href=\"#dns优化\" class=\"headerlink\" title=\"dns优化\"></a>dns优化</h5><p><code>dns缓存</code></p>\n<p>dns有着多个缓存，从离浏览器的距离排序的话，<code>浏览器缓存</code> -&gt; <code>系统缓存</code> -&gt; <code>路由器缓存</code> -&gt; <code>ips缓存</code> -&gt; <code>根域名服务器缓存</code> -&gt; <code>顶级域名服务器缓存</code> -&gt; <code>主域名服务器缓存</code></p>\n<p>其主要优化的就是缓存这部分。</p>\n<p>不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。</p>\n<p>缓存时间长：减少DNS的重复查找，节省时间。<br>缓存时间短：及时检测服务器的IP变化，保证访问的正确性。</p>\n<p><code>减少dns查询次数</code></p>\n<p>DNS查询也消耗响应时间，若网页内容来自各个不同的domain，则客户端首次解析这些domain需要消耗一定的时间，但由于DNS查询结果会缓存在本地系统和浏览器中一段时间，所以DNS查询一般只是对首次访问时的速度有影响。</p>\n<p>减少DNS查询次数需要减少来自不同domain的请求的数量，如尽量将外部域的对象下载到本地服务器上等。</p>\n<h5 id=\"dns负载均衡\"><a href=\"#dns负载均衡\" class=\"headerlink\" title=\"dns负载均衡\"></a>dns负载均衡</h5><p>dns负载均衡又叫dns重定向，其主要作用是将用户的http请求，让最接近用户地理位置的dns服务器接收并返回请求，还有许多优化的手段</p>\n<h4 id=\"tcp链接\"><a href=\"#tcp链接\" class=\"headerlink\" title=\"tcp链接\"></a>tcp链接</h4><p><code>建立连接</code></p>\n<p>建立连接之前，服务器一直会打开端口并对其监听，当客户端主动和服务器端建立连接的时候，发起一个打开端口的请求（该端口一般为临时端口），然后进入三次握手的过程：</p>\n<p><code>TCP连接的三次握手过程</code></p>\n<p><strong>图解：</strong></p>\n<p><img src=\"http://blog.chinaunix.net/attachment/201304/8/22312037_1365405910EROI.png\" alt=\"\"></p>\n<p>TCP报文字段格式<br>（1）序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。<br>（2）确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。<br>（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：</p>\n<pre><code>- （A）URG：紧急指针（urgent pointer）有效。\n- （B）ACK：确认序号有效。\n- （C）PSH：接收方应该尽快将这个报文交给应用层。\n- （D）RST：重置连接。\n- （E）SYN：发起一个新连接。\n- （F）FIN：释放一个连接。\n</code></pre><p>需要注意的是：</p>\n<pre><code>- （A）不要将确认序号Ack与标志位中的ACK搞混了。\n- （B）确认方Ack=发起方Req+1，两端配对。 \n</code></pre><ul>\n<li><p>第一次握手:client将标志位SYN置为1，随机产生一个值为seq=J；并将数据包发送给Server,Client进入SYN_SENT状态，等待server确认</p>\n</li>\n<li><p>第二次握手:Server收到数据包后由标志位SYN=1知道client请求建立连接，server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将数据包发送给client以确认连接请求，server进入SYN_RCVD状态。</p>\n</li>\n<li><p>第三次握手：client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则连接简历成功，Client和server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p>\n</li>\n</ul>\n<p><code>TCP的四次挥手过程</code></p>\n<p><strong>图解：</strong></p>\n<p><img src=\"http://blog.chinaunix.net/attachment/201304/9/22312037_1365503104wDR0.png\" alt=\"\"></p>\n<ul>\n<li><p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Cient进入FIN_WAIT_1</p>\n</li>\n<li><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态</p>\n</li>\n<li><p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态</p>\n</li>\n<li><p>第四次挥手：Client收到FIN后,Client进入TIME_WAIT 状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p>\n</li>\n</ul>\n<h5 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h5><p>主要是发生在客户端，发送HTTP请求的过程就是构建HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口（HTTP协议80/8080，hTTPS协议443）。HTTP请求报文是三部分组成：请求行，请求报头和请求正文。</p>\n<h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>格式如下：<code>Method Request-URL HTTP-Version CRLF</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg: GET index.html HTTP/1.1</span><br></pre></td></tr></table></figure>\n<p>常用的方法有GET,POST,PUT,DELETE,OPTIONS,HEAD.</p>\n<h5 id=\"请求报头\"><a href=\"#请求报头\" class=\"headerlink\" title=\"请求报头\"></a>请求报头</h5><p>请求报头允许能向服务器传递请求的工具附加信息和客户端（客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。）</p>\n<h5 id=\"请求正文\"><a href=\"#请求正文\" class=\"headerlink\" title=\"请求正文\"></a>请求正文</h5><p>当使用POST，PUT等方法时，通常需要客户端向服务端传递数据。这些数据就储存在请求正文中</p>\n<h5 id=\"服务器处理请求并返回HTTP报文\"><a href=\"#服务器处理请求并返回HTTP报文\" class=\"headerlink\" title=\"服务器处理请求并返回HTTP报文\"></a>服务器处理请求并返回HTTP报文</h5><p>HTTP响应报文也是由三部分组成：状态码，响应报头和响应报文</p>\n<p>详细参考：<a href=\"https://segmentfault.com/a/1190000006879700，\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006879700，</a><br><a href=\"https://www.cnblogs.com/chengyunshen/p/7196348.html，\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengyunshen/p/7196348.html，</a><br><a href=\"https://www.cnblogs.com/xsilence/p/6034361.html，\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xsilence/p/6034361.html，</a><br><a href=\"https://blog.csdn.net/sssnmnmjmf/article/details/68486261\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sssnmnmjmf/article/details/68486261</a></p>\n","site":{"data":{}},"excerpt":"<p>可以分为六个过程：<br><code>1、DNS解析</code> -&gt; <code>2、TCP连接</code> -&gt; <code>3、发送HTTP请求</code> -&gt; <code>4、服务器处理请求并返回HTTP报文</code> -&gt; <code>5、浏览器解析并渲染页面</code> -&gt; <code>6、连接结束</code></p>","more":"<h4 id=\"dns解析\"><a href=\"#dns解析\" class=\"headerlink\" title=\"dns解析\"></a>dns解析</h4><p>每一个计算机实际上都有一个ip地址，但是用户不太方便记忆ip地址，所有就有了网址替换ip地址，dns解析就充当了一个翻译官，当用户在浏览器输入网址并打开的时候，实际上就是网址到ip地址的转换。</p>\n<h5 id=\"dns解析过程\"><a href=\"#dns解析过程\" class=\"headerlink\" title=\"dns解析过程\"></a>dns解析过程</h5><p>dns解析实际上是递归查询ip地址的过程</p>\n<p>输入地址打开后告诉本地dns服务器，如果没找到，则会进入下一级域名服务器查看，如此重复，比如：<a href=\"http://www.baidu.com,首先在本地域名服务器中查找ip地址，如果没有找到，本地域名服务器会向根域名服务器发送一个请求，如果跟域名服务器也不存在该域名的ip地址时，本地域名会向com顶级域名服务器发送一个请求，依次类推循环下去，直到最后本地域名服务器得到baidu的ip地址并缓存到本地，供下次使用，所有网址的解析过程为：\" target=\"_blank\" rel=\"noopener\">www.baidu.com,首先在本地域名服务器中查找ip地址，如果没有找到，本地域名服务器会向根域名服务器发送一个请求，如果跟域名服务器也不存在该域名的ip地址时，本地域名会向com顶级域名服务器发送一个请求，依次类推循环下去，直到最后本地域名服务器得到baidu的ip地址并缓存到本地，供下次使用，所有网址的解析过程为：</a><br><code>.</code> -&gt; <code>.com</code> -&gt; <code>baidu.com.</code> -&gt; <code>www.baidu.com.</code></p>\n<p>最后面的.对应根域名服务器</p>\n<p><code>根域名服务器</code> -&gt; <code>com顶级域名服务器</code> -&gt; <code>baidu.comy域名服务器</code> -&gt; <code>www.baidu.com</code></p>\n<h5 id=\"dns优化\"><a href=\"#dns优化\" class=\"headerlink\" title=\"dns优化\"></a>dns优化</h5><p><code>dns缓存</code></p>\n<p>dns有着多个缓存，从离浏览器的距离排序的话，<code>浏览器缓存</code> -&gt; <code>系统缓存</code> -&gt; <code>路由器缓存</code> -&gt; <code>ips缓存</code> -&gt; <code>根域名服务器缓存</code> -&gt; <code>顶级域名服务器缓存</code> -&gt; <code>主域名服务器缓存</code></p>\n<p>其主要优化的就是缓存这部分。</p>\n<p>不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。</p>\n<p>缓存时间长：减少DNS的重复查找，节省时间。<br>缓存时间短：及时检测服务器的IP变化，保证访问的正确性。</p>\n<p><code>减少dns查询次数</code></p>\n<p>DNS查询也消耗响应时间，若网页内容来自各个不同的domain，则客户端首次解析这些domain需要消耗一定的时间，但由于DNS查询结果会缓存在本地系统和浏览器中一段时间，所以DNS查询一般只是对首次访问时的速度有影响。</p>\n<p>减少DNS查询次数需要减少来自不同domain的请求的数量，如尽量将外部域的对象下载到本地服务器上等。</p>\n<h5 id=\"dns负载均衡\"><a href=\"#dns负载均衡\" class=\"headerlink\" title=\"dns负载均衡\"></a>dns负载均衡</h5><p>dns负载均衡又叫dns重定向，其主要作用是将用户的http请求，让最接近用户地理位置的dns服务器接收并返回请求，还有许多优化的手段</p>\n<h4 id=\"tcp链接\"><a href=\"#tcp链接\" class=\"headerlink\" title=\"tcp链接\"></a>tcp链接</h4><p><code>建立连接</code></p>\n<p>建立连接之前，服务器一直会打开端口并对其监听，当客户端主动和服务器端建立连接的时候，发起一个打开端口的请求（该端口一般为临时端口），然后进入三次握手的过程：</p>\n<p><code>TCP连接的三次握手过程</code></p>\n<p><strong>图解：</strong></p>\n<p><img src=\"http://blog.chinaunix.net/attachment/201304/8/22312037_1365405910EROI.png\" alt=\"\"></p>\n<p>TCP报文字段格式<br>（1）序号：Seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。<br>（2）确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。<br>（3）标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：</p>\n<pre><code>- （A）URG：紧急指针（urgent pointer）有效。\n- （B）ACK：确认序号有效。\n- （C）PSH：接收方应该尽快将这个报文交给应用层。\n- （D）RST：重置连接。\n- （E）SYN：发起一个新连接。\n- （F）FIN：释放一个连接。\n</code></pre><p>需要注意的是：</p>\n<pre><code>- （A）不要将确认序号Ack与标志位中的ACK搞混了。\n- （B）确认方Ack=发起方Req+1，两端配对。 \n</code></pre><ul>\n<li><p>第一次握手:client将标志位SYN置为1，随机产生一个值为seq=J；并将数据包发送给Server,Client进入SYN_SENT状态，等待server确认</p>\n</li>\n<li><p>第二次握手:Server收到数据包后由标志位SYN=1知道client请求建立连接，server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将数据包发送给client以确认连接请求，server进入SYN_RCVD状态。</p>\n</li>\n<li><p>第三次握手：client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则连接简历成功，Client和server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p>\n</li>\n</ul>\n<p><code>TCP的四次挥手过程</code></p>\n<p><strong>图解：</strong></p>\n<p><img src=\"http://blog.chinaunix.net/attachment/201304/9/22312037_1365503104wDR0.png\" alt=\"\"></p>\n<ul>\n<li><p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Cient进入FIN_WAIT_1</p>\n</li>\n<li><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态</p>\n</li>\n<li><p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态</p>\n</li>\n<li><p>第四次挥手：Client收到FIN后,Client进入TIME_WAIT 状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p>\n</li>\n</ul>\n<h5 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h5><p>主要是发生在客户端，发送HTTP请求的过程就是构建HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口（HTTP协议80/8080，hTTPS协议443）。HTTP请求报文是三部分组成：请求行，请求报头和请求正文。</p>\n<h5 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h5><p>格式如下：<code>Method Request-URL HTTP-Version CRLF</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg: GET index.html HTTP/1.1</span><br></pre></td></tr></table></figure>\n<p>常用的方法有GET,POST,PUT,DELETE,OPTIONS,HEAD.</p>\n<h5 id=\"请求报头\"><a href=\"#请求报头\" class=\"headerlink\" title=\"请求报头\"></a>请求报头</h5><p>请求报头允许能向服务器传递请求的工具附加信息和客户端（客户端不一定特指浏览器，有时候也可使用Linux下的CURL命令以及HTTP客户端测试工具等。）</p>\n<h5 id=\"请求正文\"><a href=\"#请求正文\" class=\"headerlink\" title=\"请求正文\"></a>请求正文</h5><p>当使用POST，PUT等方法时，通常需要客户端向服务端传递数据。这些数据就储存在请求正文中</p>\n<h5 id=\"服务器处理请求并返回HTTP报文\"><a href=\"#服务器处理请求并返回HTTP报文\" class=\"headerlink\" title=\"服务器处理请求并返回HTTP报文\"></a>服务器处理请求并返回HTTP报文</h5><p>HTTP响应报文也是由三部分组成：状态码，响应报头和响应报文</p>\n<p>详细参考：<a href=\"https://segmentfault.com/a/1190000006879700，\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006879700，</a><br><a href=\"https://www.cnblogs.com/chengyunshen/p/7196348.html，\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chengyunshen/p/7196348.html，</a><br><a href=\"https://www.cnblogs.com/xsilence/p/6034361.html，\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xsilence/p/6034361.html，</a><br><a href=\"https://blog.csdn.net/sssnmnmjmf/article/details/68486261\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sssnmnmjmf/article/details/68486261</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgfb60540004a4vbnlztwh0i","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb605i0007a4vb6q95qa3y"},{"post_id":"cjgfb604c0000a4vbwg16dadr","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb605o0009a4vbrj5pkiqk"},{"post_id":"cjgfb605d0005a4vbb44vmju9","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb605s000ba4vb9mdnpspf"},{"post_id":"cjgfb605j0008a4vb5z3kxd9s","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb605w000da4vb1jtf454x"},{"post_id":"cjgfb604z0003a4vbizlu34kz","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb6060000ga4vb6ftfqnhk"},{"post_id":"cjgfb605x000ea4vbfx8fg1c6","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb6064000ia4vbwv2cucrn"},{"post_id":"cjgfb6060000ha4vbf98i7kzo","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb606a000ka4vbzhk6crco"},{"post_id":"cjgfb605s000ca4vbofhqfkpk","tag_id":"cjgfb605z000fa4vbunqod0dd","_id":"cjgfb606f000na4vblgip8z03"},{"post_id":"cjgfb606b000la4vbv5md34e7","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb606l000pa4vbhqjier7f"},{"post_id":"cjgfb606g000oa4vbuk8w4a3v","tag_id":"cjgfb604v0002a4vbyr5ttljl","_id":"cjgfb606r000ra4vbqd46ih87"},{"post_id":"cjgfb6067000ja4vb56eat7ed","tag_id":"cjgfb606e000ma4vb0tfgt1qs","_id":"cjgfb606u000ta4vbqmnhw9vj"},{"post_id":"cjgfb606s000sa4vbo42rygw0","tag_id":"cjgfb605z000fa4vbunqod0dd","_id":"cjgfb606v000ua4vb8hwiethf"}],"Tag":[{"name":"主页","_id":"cjgfb604v0002a4vbyr5ttljl"},{"name":"复习","_id":"cjgfb605z000fa4vbunqod0dd"},{"name":"2017","_id":"cjgfb606e000ma4vb0tfgt1qs"}]}}